	title	Root module of relocatable CP/M 3.1 BIOS for yaze-ag
	subttl	Copyright (C) 2000,2004 Andreas Gerlich
	page	65

	.z80
	.list

version	macro
	defb	'V 1.10 12.03.2005'
endm
	; version 1.10alpha 16.08.2004
	; version 1.00, 15. January 2002
;
; This file is part of yaze-ag - yet another Z80 emulator by ag.
;
; Copyright (C) 2002 Andreas Gerlich (Andreas.Gerlich@mathematik.uni-ulm.de)
;
; Yaze-ag is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 2 of the License, or (at your
; option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program (see the file COPYING);
; if not, write to the Free Software Foundation, Inc.,
; 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
;



;		  Copyright (C), 1982
;		 Digital Research, Inc
;		     P.O. Box 579
;		Pacific Grove, CA  93950

;   This is the invariant portion of the modular BIOS and is
;	distributed as source for informational purposes only.
;	All desired modifications should be performed by
;	adding or changing externally defined modules.
;	This allows producing "standard" I/O modules that
;	can be combined to support a particular system
;	configuration.
;

	maclib	sysdef
	maclib	yazebios	; defines functions for the yaze bios

	; maclib modebaud		; define mode bits

prstr macro str
	ld	hl,str
	call	PRSTRfunc
endm

cr	equ 13
lf	equ 10
bell	equ 7
ctlQ	equ 'Q'-'@'
ctlS	equ 'S'-'@'

ccp	equ 0100h		; Console Command Processor gets loaded into the TPA

	CSEG			; GENCPM puts CSEG stuff in common memory

	; variables in system data page

;	extrn @covec,@civec,@aovec,@aivec,@lovec ; I/O redirection vectors
	extrn @mxtpa				; addr of system entry point
	extrn @mltio
;	extrn @bnkbf				; 128 byte scratch buffer

	; initialization

;	extrn ?init			; general initialization and signon
;	extrn ?ldccp,?rlccp		; load & reload CCP for BOOT & WBOOT

	; user defined character I/O routines

;	extrn ?ci,?co,?cist,?cost	; each take device in <B>
;	extrn ?cinit			; (re)initialize device in <C>
;	extrn @ctbl			; physical character device table

	; special interface tables for the yaze bios

	extrn @YCT			; Yaze Control Table

	if banked
	 extrn MMUinit			; MMU initialisation
	endif

	; disk communication data items

	extrn @dtbl			; table of pointers to XDPHs
	extrn @MEDIA
	;LOOK yct.z80 - public @adrv,@rdrv,@trk,@sect	; parameters for disk I/O
	;LOOK yct.z80 - public @dma,@dbnk,@cnt		;    ''       ''       ''

	; memory control

	;LOOK yct.z80 - public @cbnk			; current bank

;;	extrn ?xmove,?move		; select move bank, and block move
;;	extrn ?bank			; select CPU bank

	; clock support

;;	extrn ?time			; signal time operation

	; general utility routines

;;	public ?pmsg,?pdec	; print message, print number from 0 to 65535
;;	public ?pderr		; print BIOS error message header

	; External names for BIOS entry points

	public ?boot,?wboot,?const,?conin,?cono,?list,?auxo,?auxi
	public ?home,?sldsk,?sttrk,?stsec,?stdma,?read,?write
	public ?conos,?auxis,?auxos,?dvtbl,?devin,?drtbl
	public ?mltio,?flush,?mov,?tim,?bnksl,?xmov


	CSEG	; <-------------------- Common Memory


	; BIOS Jump vector
		; All Bios routines are invoked by calling these
		;	entry points.

?boot:	jp boot		; initial entry on cold start
?wboot:	jp wboot	; reentry on program exit, warm start

?const:	jp const	; return console input status
?conin:	jp conin	; return console input character
?cono:	jp conout	; send console output character
?list:	jp list		; send list output character
?auxo:	jp auxout	; send auxiliary output character
?auxi:	jp auxin	; return auxiliary input character

?home:	jp home		; set disks to logical home
?sldsk:	jp seldsk	; select disk drive, return disk parameter info
?sttrk:	jp settrk	; set disk track
?stsec:	jp setsec	; set disk sector
?stdma:	jp setdma	; set disk I/O memory address
?read:	jp read		; read physical block(s)
?write:	jp write	; write physical block(s)

?lists:	jp listst	; return list device status
?sctrn:	jp sectrn	; translate logical to physical sector

?conos:	jp conost	; return console output status
?auxis:	jp auxist	; return aux input status
?auxos:	jp auxost	; return aux output status
?dvtbl:	jp devtbl	; return address of device def table
?devin:	jp ?cinit	; change baud rate of device

?drtbl:	jp getdrv	; return address of disk drive	table
?mltio:	jp multio	; set multiple record count for disk I/O
?flush:	jp flush	; flush BIOS maintained disk caching

?mov:	jp ?move	; block move memory to memory
?tim:	jp ?time	; Signal Time and Date operation
?bnksl:	jp bnksel	; select bank for code execution and default DMA
?stbnk:	jp setbnk	; select different bank for disk I/O DMA operation
?xmov:	jp ?xmove	; set source and destination banks for one operation

	jp ?wboot	; reserved for future expansion
	jp ?wboot	; reserved for future expansion
	jp ?wboot	; reserved for future expansion


;------------------------------------------------------------------------
BOOT:	; This Routine calls a special Funktion in Yaze to modify the
	; @dtbl and to set up the DBPs of the drives which are present.

	; This routine will be used any time from SYS.COM, because
	; mounts can be changed.

	NOP		; will be repaced with RET (0C9H)

if NOT ldrbios

	; ld sp,lstack

 if banked
	xor	a,a
	ybios	y_mmutsel	; select bank 0

	jp	bootBNK		; jmp to bootBNK in banked part of the bios

BOOT2:	ybios	y_mmutsel	; in A is the bank to which will be switched
	ret
;--------------------------------------------------------------


	DSEG	; <-------------------- Banked Memory

saveSP:	defw	0

bootBNK:ld (saveSP),sp

	ld sp,lstack

	call MMUinit	; Initialize MMU for CP/M 3.1 banking

 endif
endif
	ld	a,095h	; I/O-Byte a' la cp/m 2.2 for Yaze-I/O
	ld	(3),a	; IN BANK 0 <-- very important, yaze use this I/O-Byte

;	ld bc,@dtbl	; BC = @dtbl

	extrn @BNKBF
	ld bc,@BNKBF	; BC = addr of @BNKBF (test)

	extrn dph0
	extrn scb$base

;	ld de,dph0	; de = dph0

	ld de,scb$base	; DE = SCB (test)

	ld hl,@YCT	; YAZE Control Table. Elementar for the YAZE-BIOS !!!

			; call YAZE bios
	ybios y_cpm3init ; special function "CP/M 3.1 init" (0E0H)

; Code beim BOOT: einsprung durch ein RET ersetzten (selbstmodifizierend)

	ld a,0c9h	; a <- code of RET
	ld (BOOT),a	; set a RET at BOOT:

	ld sp,(saveSP)	; get saved stack pointer
	ld a,1		; TPA-Bank (hier eventuell @cbnk nehmen, muss ich
			;		im SYSTEM guide noch nachsehen)

bootBNK2 equ $+1
	jp bootBNK3	; This jump will be replaced by the next lines

bootBNK3:
	ld hl,BOOT2	; get Adresse of BOOT2 (in COMMON)
	ld (bootBNK2),hl; put adress

	jp wboot	; put CCP.COM into TPA, setup jumps


.comment #
	ld	a,(@MEDIA)
	call	hexout	;print for test

	jp	WBOOT

hexout:	push	af
	rrca
	rrca
	rrca
	rrca		; shift down lower nibble
	call	hexo	; print it
	pop	af
hexo:	and	0Fh
	add	a,30h	; make ascii
	cp	'9'+1
	jr	c,hexo1
	add	a,7
hexo1:	ld	c,a
	call	conout
	ret
;#
;----------------------------------------------------

	; halt
	; db 0		; yaze bios "cold boot"
	; ret

;=============================================================================



	CSEG	; <-------------------- Common Memory


;----------------------------------------------------
GETCH	EQU	1
PRINT	equ	9
OPEN	equ	15
Readseq	equ	20
DMA	equ	26
setmulti equ	44

stack80	equ	0100H
tpa	equ	0100H
bdos	equ	5
jmpop	equ	0c3h

;----------------------------------------------------
WBOOT:

IF ldrbios
	ret
ELSE

if banked

	xor	a,a

WBmod	equ	$+1		; points to the yaze_functioncode
	ybios	y_mmutsel	; select bank 0
;>	^^^^^^^^^^^^^^^^^ this code will replaced by:
;>	halt	= 076H	; entry in yaze bios
;>	db 0E2H = 0E2H	; yaze func y_cpm3warmboot (see below !!!)

endif
	; Now bank 0 is selected
	;
	JP	WBOOT3	; Jump in bank 0 !

;---------------------------------------------------------------------------
CCP_LDR_BANKED equ TRUE	; True if the following routine may be resident in
			; in banked part of the bios. The CCP loader itselve
			; runns at COMMON memory (see MEM$COMMON). This is
			; realized with .phase .
			; if TRUE bios_base will be FE00H (TPA 1 page more)
			; if FALSE bios_base will be FD00H (TPA 1 page less)

PRDEBUG	equ	FALSE	; DEBUG of loading and saving CCP


	; This following code is executed only one time (if CCP_LDR_BANKED
	; is set TRUE)


IF CCP_LDR_BANKED
	;
	DSEG	; <-------------------- Banked Memory
	;
ENDIF

WBOOT3:


IF CCP_LDR_BANKED
	LD	HL,WBOOT4
	LD	DE,WBOOT5	;MEM$COMMON
	LD	BC,WBOOT6-WBOOT4
	LDIR
	JP	WBOOT5

WBOOT4	EQU	$

	.PHASE	MEM$COMMON	; see SYSDEF.LIB for MEM$COMMON

ENDIF	; of CCP_LDR_BANKED

WBOOT5:
	LD	SP,lstack

prstr VERmsg

if prdebug
prstr bank0	; test
endif

if banked
	ld	a,1
	ybios	y_mmutsel	; select bank 1 (27)
endif

	ld	a,095h	; I/O-Byte a' la cp/m 2.2 for Yaze-I/O
	ld	(3),a	; IN BANK 1 <-- very important, yaze use this I/O-Byte

	LD	HL,?wboot
	LD	(1),HL
	LD	HL,(@MXTPA)
	LD	(6),HL
	LD	A,jmpop
	LD	(0),A	; WBOOT
	LD	(bdos),A	; BDOS
;
;	@MLTIO setzten
;
;;	ld	a,1
;;	ld	(@mltio),a
;
	;
if prdebug
prstr bank1	; test
endif	;
	;
;
;	load ccp.com into tpa
;
	LD	B,36
	ld	hl,ccp$fcb	; LD	HL,05CH
	CALL	CLEAR		;clear fcb area in low ram
	ld	hl,ccp$fcb	;LD	HL,05CH
	LD	(HL),1		;drive a:
	INC	HL
	LD	DE,CCPSTG	;'ccp	  com'
	LD	BC,11		;length of a file name
	CALL	?MOVE		;move filename to fcb
	;
if prdebug
prstr openccp	; test
endif	;
	;
	ld	de,ccp$fcb	;LD	DE,05CH
	LD	C,OPEN
	CALL	JPBDOS		;open ccp.com
	OR	A
	JP	NZ,OPERR	;if open error --> operr
	;
;;prstr stdma	; test
	;
	LD	DE,TPA		;load into tpa
	LD	C,DMA
	CALL	JPBDOS		;set dma for read
	;
;;prstr smulti	; test
	;
	ld	e,128
	ld	c,setmulti	;allow up to 16k bytes
	call	JPBDOS
	;
if prdebug
prstr readccp	; test
endif	;
	;
	ld	de,ccp$fcb	;ccpfcb
	LD	C,READSEQ	;func: read sequential
	CALL	JPBDOS		;read file data to tpa ram
	;
	OR	A		;test for complete
	jp	z,GOccp		;legal exit --> ccp
;
GOCPM:
	CP	1		;only legal exit = past end of file
	JP	NZ,RDERR
if prdebug
prstr okmsg	; test
endif	;
	JP	GOccp		;now turn it loose
;
;
OPERR:
	LD	DE,OPNMSG	;"BIOS can't open CCP.COM"
	JP	ERRS
RDERR:
	LD	DE,ERRMSG	;"BIOS has bad sector in CCP.COM"
ERRS:
	LD	C,PRINT
	CALL	JPBDOS		;print the complaint
	;
	; LD	C,GETCH
	; CALL	JPBDOS		;wait for any key
	; JP	WBOOT		;try again and again
	;			; this is only good if you can change the
	;			; diskette ;-)
	;
	; in Yaze the following ist better, so you need not an unix kill :-)
	;
	;
	ybios	254		; YAZE-Monitor aufrufen
	db	0		; Stringterminator: only 0 set the monitor in
				; an interactive modus.
	JP	BOOT		; Reset all Disks an make an another WBOOT
				; and try to load CCP.COM once more

PRSTRfunc:
	ld	a,(HL)
	or	a,a
	ret	z		; if ch=0 --> return
	;
	; push	hl		; Yaze-bios does not change any register
	;
	ld	c,a
	call	conout		;print character
	;
	; pop	hl
	;
	inc	hl		;porinter to the next char
	jr	PRSTRfunc


;--------------------------------------------------------
;
;	local subroutines
;
;--------------------------------------------------------
CLEAR:
	LD	(HL),0
	INC	HL
	DJNZ	CLEAR
	RET

JPBDOS:	ld	hl,(@MXTPA)
	jp	(hl)
	; on the stack is the return address
	; (CALL is required)

;--------------------------------------------------------
;
;	initialized storage
;
;--------------------------------------------------------
ccp$fcb:ds	36

CCPSTG:
	DEFB	'CCP     COM'
OPNMSG:
	DEFB	07H,0DH,0AH,' BIOS can''t open CCP.COM on A: '
	DEFB	'(go to YAZE-Monitor)',0DH,0AH,'$'
ERRMSG:
	DEFB	0DH,0AH,'BIOS has bad sector in CCP.COM$'

VERmsg:
	DEFB	0dh,0ah,' CP/M 3.1 BIOS for yaze-ag, '
	version
	DEFB	', Copyright (c) by A.Gerlich',0dh,0ah,0

;the following was only for test
	;
if prdebug
	;
bank0:	DEFB	0dh,0ah,' BANK 0',0
bank1:	DEFB	' BANK 1',0
openccp:DEFB	'  OPEN CCP',0
;; stdma:	DEFB	' SET DMA ',0
;; smulti:	DEFB	' SET MULTICNT ',0
readccp:DEFB	'  READ CCP.COM ...',0

IF CCP_LDR_BANKED
trccp:	DEFB	' TRANSFERE CCP TO YAZE-BIOS ...',0
ENDIF
okmsg:	DEFB	' OK',0dh,0ah,0
gccp:	DEFB	' GO TO CCP',0DH,0AH,0
	;
endif	; of if prdebug
;--------------------------------------------------------


;
;	initialize low memory jumps
;

GOccp:

.comment #
if banked
	ld	a,1
	ybios	y_mmutsel	; select bank 1
endif

	ld	a,095h	; I/O-Byte a' la cp/m 2.2 for Yaze-I/O
	ld	(3),a

	LD	HL,?wboot
	LD	(1),HL
	LD	HL,(@MXTPA)
	LD	(6),HL
	LD	A,jmpop
	LD	(0),A	; WBOOT
	LD	(bdos),A	; BDOS
;#
;
;	@MLTIO setzten
;
;;	ld	a,1
;;	ld	(@mltio),a
;

IF CCP_LDR_BANKED ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	 ; Wenn TRUE  dann Code ab WBOOT ersetzen.
	 ; Wenn FALSE (--> dann wird diese Routine in den COMMON-Bereich des
	 ; Bios uebernommen), dann soll CPP.COM immer von Disk geladen werden
	 ; --> also folgende Zeilen NICHT ausfuehren!

if prdebug
prstr trccp	; test
endif

	ybios y_saveccp		;save CCP in an area in Yaze-Bios

if prdebug
prstr okmsg	; test
endif

	;----------------------------------------------------------------------
	; Der folgende Code ersetzt den Code beim Einsprung in WBOOT (selbst
	; modifizierender Code).
	;
	; ACHTUNG: Wenn dieser auskommentiert wird darf es auf keinen Fall
	;	   eine PROFILE.SUB in A: mehr geben!!!
	;
	;	   --> Warum? Der CCP laed bei einer vorhandenen PROFILE.SUB
	;		SUBMIT.COM, dessen residenter Teil sich in den oberen
	;		Bereich des TPA's verschiebt --> Also direkt vor
	;		RESBDOS --> Dies ist der Bereich von F806H abwaerts
	;		und aufgrund der Groesse von SUBMIT.COM ueber F000H
	;		hinaus.
	;		Der gerade ablaufende Code der (normalerweise) den
	;		CCP.COM (eben nur einmal) beim Start von CP/M 3.1 in
	;		den TPA laed und dann dem Yaze-Bios zum abspeichern
	;		uebergibt, laeuft aber genau ab der Grenze des Common-
	;		Bereichs (MEM$COMMON) also an der Adresse F000H ab
	;		(wird dort hin kopiert). Befindet sich dort aber der
	;		residente Teil von SUBMIT.COM (beim zweiten Warm-Boot
	;		nach dem Systemstart), so wird dieser ueberschrieben,
	;		was zu Folge hat, dass SUBMIT nicht mehr odrnungs-
	;		gemaess ausgefuehrt werden kann. Die Kiste,
	;		Aehhh Yaze meine ich ;-) , stuerzt ab. (Schoene
	;		Gruesse ans unix kill Kommando :-))
	;		Dasselbe passiert auch wenn SUBMIT von Hand ausgefuehrt
	;		wird.
	;
	;		Die folgenden Zeilen ersetzen den ab WBOOT stehenden
	;		Code an der Stelle an der der yaze-funktionscode steht.
	;		Es wir y_mmutsel durch die Funktion y_cpm3warmboot
	;		(Yaze-Bios Funktion E2H: Warm Boot unter CP/M 3.1)
	;		ersetzt. Sie ersetzen damit den Code der in die Bank 0
	;		umschaltet und die gerade ablaufende Routine (ab
	;		WBOOT3) aufruft. Diese gerade ablaufende Routine wird
	;		dadurch nur beim Systemstart genau ein mal durchlaufen.
	;
	;
	;
	LD	A,y_cpm3warmboot ;Yaze-Bios function code E2: y_cpm3warmboot
	LD	(WBmod),A	 ;replace  y_mmutsel  with  y_cpm3warmboot
	;
	;
	;
	;	Durch diese Massnahme, diese nur einmal benoetigte Routine in
	;	den banked Bereich des Bios zu verlegen, gewinnt man eine Page
	;	(256 Bytes) fuer den TPA. Damit wird die hoechst moegliche
	;	Adresse von FE00H fuer bios_base erreicht. Mehr geht beim
	;	besten Willen nicht, Alleine die Jump-Table mit den HALT-
	;	Anweisungen fuer die Aufrufe ins YAZE-Bios, belegen mit den
	;	DPB's (15 Laufwerke A: bis P:) zusammen fast 2 256-Byte Pages.
	;----------------------------------------------------------------------

ENDIF ; of CCP_LDR_BANKED <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


if prdebug
prstr gccp	; test, print string 'GO TO CCP'
endif

	JP	CCP

IF CCP_LDR_BANKED
	.DEPHASE
ENDIF

WBOOT6	EQU	$

ENDIF	; ldrbios

;--------------------------------------------------------

;wboot: halt		; reentry on program exit, warm start
;	db 01
;	ret

;=============================================================================

	CSEG	; <-------------------- Banked Memory

const:	ybios 02	; return console input status
	ret

conin:	ybios 03	; return console input character
	ret

conout:	ybios 04	; send console output character
	ret

list:	ybios 05	; send list output character
	ret

auxout:	ybios 06	; send auxiliary output character
	ret

auxin:	ybios 07	; return auxiliary input character
	ret

home:	ybios 08	; set disks to logical home
	ret

seldsk:	ybios 09	; select disk drive, return disk parameter info
	ret

settrk:	ybios 10	; set disk track
	ret

setsec:	ybios 11	; set disk sector
	ret

setdma:	ybios 12	; set disk I/O memory address
	ret

read:	ybios 13	; read physical block(s)
	ret

write:	ybios 14	; write physical block(s)
	ret

listst:	ybios 15	; return list device status
	ret

sectrn:	ybios 16	; translate logical to physical sector
	ret

; additional CP/M 3.1 funtion

conost:	ybios 17	; return console output status
	ret

auxist:	ybios 18	; return aux input status
	ret

auxost:	ybios 19	; return aux output status
	ret

devtbl:	ybios 20	; return address of device def table
	ret

?cinit:	ybios 21	; change baud rate of device
	ret


getdrv:	ld hl,@dtbl	; return address of disk drive table (func 22)
	ret		; This use GENCPM.COM !!!


multio:	ybios 23	; set multiple record count for disk I/O
	ret

flush:	ybios 24	; flush BIOS maintained disk caching
	ret

?move:	; hl=destination, de=source, bc=bytecounter
	; ex de,hl	; change it for ldir
	; ldir		; make the move
	; ex de,hl	; exchange de <> hl
	; ret		; hl and de points to the next bytes
	;
	ybios 25	; block move memory to memory made by yaze-bios
	ret

?time:	ybios 26	; Signal Time and Date operation
	ret

bnksel:	ybios y_mmutsel	; select bank for code execution and default DMA
	ret

setbnk:	ybios 28	; select different bank for disk I/O DMA operation
	ret

?xmove:	; ret		; Nach seite 67 des Bios-Handbuches soll lediglich
	; nop		; ein RET stehen wenn diese Funktion nicht
	; nop		; implementiert ist !!!
	;		; Dann muessen auch alle Disks die sektorgroesse 128
	;		; haben, denn sonst wird der residente Teil zu gross
	;		; und die Routine die den CCP.COM laed ueberschreibt
	;		; dann den Bereich ab 0F000H --> CRASH
	;		;
	ybios 29	; set source and destination banks for one operation
	ret		; B=destination bank, C=source bank

	ds	16,0AAH
lstack	equ	$	; local stack


	end ; bioskrnl.z80

