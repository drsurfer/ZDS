   1:			;
   2:			;=======================================================================
   3:			;
   4:			; CP/M 3 Z80 DarkStar (NE Z80) Porting
   5:			;
   6:			;=======================================================================
   7:			;;---------------------------------------------------------------------
   8:			;; Version      : 1.0 - 20140904
   9:			;; Assemble     : SLR z80asm
  10:			;; Revisions:
  11:			;; 20140905	- Code start
  12:			;;---------------------------------------------------------------------
  13:			
  14:				TITLE	'BOOT LOADER MODULE FOR CP/M 3.1'
  15:			
  16:				.Z80
  17:			
  18:				; define logical values:
  19:				include	common.inc
**** common.inc ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; CP/M 3 Z80 DarkStar (NE Z80) Porting
   5:			;
   6:			;=======================================================================
   7:			;;---------------------------------------------------------------------
   8:			;; Version      : 1.0 - 20140904
   9:			;; Assemble     : m80
  10:			;; Revisions:
  11:			;; 20140904	- Code start
  12:			;;---------------------------------------------------------------------
  13:			;
  14:			; Here just some common symbol...
  15:			;
  16:				; SYSBIOS equates
  17:				include	darkstar.equ
**** darkstar.equ ****
   1:			;****** Equ's file autogenerated by genequs ver: 1.0
   2:			;****** Input files:
   3:			;****** SysCommon.lst
   4:	FE77'         	TX0            	EQU	0FE77H
   5:	FDC4'         	FIN            	EQU	0FDC4H
   6:	FE79'         	TX01           	EQU	0FE79H
   7:	FD89'         	DLY1           	EQU	0FD89H
   8:	FD87'         	DLY2           	EQU	0FD87H
   9:	FDE1'         	FOUT           	EQU	0FDE1H
  10:	FE65'         	U1NUL          	EQU	0FE65H
  11:	FE25'         	U0ISR          	EQU	0FE25H
  12:	FE5B'         	U1ISR          	EQU	0FE5BH
  13:	FD85'         	DELAY          	EQU	0FD85H
  14:	FE50'         	UISRE          	EQU	0FE50H
  15:	FDB5'         	FSTAT          	EQU	0FDB5H
  16:	FE35'         	UISRI          	EQU	0FE35H
  17:	FE6F'         	DOSTX          	EQU	0FE6FH
  18:	FC4B'         	BBU1ST         	EQU	0FC4BH
  19:	FC45'         	BBU1RX         	EQU	0FC45H
  20:	FC3F'         	BBU1TX         	EQU	0FC3FH
  21:	FD29'         	BBEXEC         	EQU	0FD29H
  22:	FCFF'         	BBHDRD         	EQU	0FCFFH
  23:	FD6A'         	BBVOID         	EQU	0FD6AH
  24:	FE92'         	UASTKB         	EQU	0FE92H
  25:	FD6B'         	MMPMAP         	EQU	0FD6BH
  26:	FE0F'         	INTRDI         	EQU	0FE0FH
  27:	FC2D'         	SCONIN         	EQU	0FC2DH
  28:	FC15'         	VCONIN         	EQU	0FC15H
  29:	FCDB'         	BBDIV16        	EQU	0FCDBH
  30:	FCF9'         	BBHDWR         	EQU	0FCF9H
  31:	FD78'         	MMGETP         	EQU	0FD78H
  32:	FDFE'         	INTREN         	EQU	0FDFEH
  33:	FE85'         	RLDROM         	EQU	0FE85H
  34:	FCE1'         	BBMUL16        	EQU	0FCE1H
  35:	FC00'         	SYSCOM         	EQU	0FC00H
  36:	FE90'         	UASTAV         	EQU	0FE90H
  37:	FE19'         	SYTIMR         	EQU	0FE19H
  38:	FC33'         	SCONST         	EQU	0FC33H
  39:	FC1B'         	VCONST         	EQU	0FC1BH
  40:	FE6D'         	SRXRSM         	EQU	0FE6DH
  41:	FE69'         	SRXSTP         	EQU	0FE69H
  42:	FC39'         	BBU0INI        	EQU	0FC39H
  43:	FC51'         	BBU1INI        	EQU	0FC51H
  44:	FC87'         	BBFREAD        	EQU	0FC87H
  45:	FD23'         	BBEIDCK        	EQU	0FD23H
  46:	FD05'         	BBHDGEO        	EQU	0FD05H
  47:	FEC0'         	BBSTACK        	EQU	0FEC0H
  48:	FC81'         	BBFHOME        	EQU	0FC81H
  49:	FD94'         	BBCONIN        	EQU	0FD94H
  50:	FFF0'         	SINTVEC        	EQU	0FFF0H
  51:	FEC0'         	SYSCMLO        	EQU	0FEC0H
  52:	FE22'         	VOIDISR        	EQU	0FE22H
  53:	FC9F'         	BBSTTIM        	EQU	0FC9FH
  54:	FDAA'         	BBCONST        	EQU	0FDAAH
  55:	FC27'         	SCONOUT        	EQU	0FC27H
  56:	FC0F'         	VCONOUT        	EQU	0FC0FH
  57:	FCE7'         	BBOFFCAL       	EQU	0FCE7H
  58:	FC57'         	BBINICTC       	EQU	0FC57H
  59:	FE9C'         	BBSTBASE       	EQU	0FE9CH
  60:	FC5D'         	BBRESCTC       	EQU	0FC5DH
  61:	FCA5'         	BBRDTIME       	EQU	0FCA5H
  62:	FD5A'         	BBCALRET       	EQU	0FD5AH
  63:	FCB7'         	BBDMASET       	EQU	0FCB7H
  64:	FCBD'         	BBDSKSEL       	EQU	0FCBDH
  65:	FCED'         	BBHDINIT       	EQU	0FCEDH
  66:	FCB1'         	BBSECSET       	EQU	0FCB1H
  67:	FD0B'         	BBHDBOOT       	EQU	0FD0BH
  68:	FC69'         	BBUPLCHR       	EQU	0FC69H
  69:	FC99'         	BBPRNCHR       	EQU	0FC99H
  70:	FCC9'         	BBVCPMBT       	EQU	0FCC9H
  71:	FC93'         	BBFLOPIO       	EQU	0FC93H
  72:	FD1D'         	BBEPMNGR       	EQU	0FD1DH
  73:	FCCF'         	BBSIDSET       	EQU	0FCCFH
  74:	FD11'         	BBLDPART       	EQU	0FD11H
  75:	FC75'         	BBRDVDSK       	EQU	0FC75H
  76:	FC8D'         	BBFWRITE       	EQU	0FC8DH
  77:	FCC3'         	BBCPBOOT       	EQU	0FCC3H
  78:	FC21'         	BBCURSET       	EQU	0FC21H
  79:	FCAB'         	BBTRKSET       	EQU	0FCABH
  80:	FC7B'         	BBWRVDSK       	EQU	0FC7BH
  81:	FD9F'         	BBCONOUT       	EQU	0FD9FH
  82:	FCF3'         	BBDRIVEID      	EQU	0FCF3H
  83:	FC63'         	BBPSNDBLK      	EQU	0FC63H
  84:	FC03'         	BBCRTCINI      	EQU	0FC03H
  85:	FC6F'         	BBPRCVBLK      	EQU	0FC6FH
  86:	FC09'         	BBCRTFILL      	EQU	0FC09H
  87:	FCD5'         	BBFDRVSEL      	EQU	0FCD5H
  88:	FD17'         	BBDPRMSET      	EQU	0FD17H
  89:			;****** EOF ***
  90:			
**** common.inc ****
  18:			
  19:	FFFF'         	TRUE	EQU	-1
  20:	0000'         	FALSE	EQU	0
  21:			
  22:			
  23:				; determine if for bank select or not:
  24:	FFFF'         	BANKED	EQU	TRUE		;< ... BANKED VERSION
  25:	0000'         	ZPM3	EQU	FALSE		; ZPM3 build ?
  26:			
  27:				;
  28:				; some other equs...
  29:				;
  30:	000D'         	CR	EQU     0DH		; CARRIAGE RETURN
  31:	000A'         	LF	EQU     0AH		; LINE FEED;
  32:	000C'         	FF	EQU	0CH		; FORM FEED (clear screen)
  33:			
  34:			
  35:			;
  36:			; COMMON.ASM [EOF]
  37:			
**** boot.asm ****
  20:				include	syshw.inc
**** syshw.inc ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) SysBios
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; Original code:
   9:			; Z80 Nuova Elettronica Monitor 390 su eprom 2532 (4k)
  10:			;
  11:			; Disassembled and reconstructed by
  12:			; Piergiorgio Betti <pbetti@lpconsul.net> on 2005 01 26
  13:			;
  14:			; Latest non modular BIOS is DARKSTAR-MONITOR-0.9.0.asm
  15:			; dated 20140531
  16:			; - Following addition of MultiF-Board doing complete rewrite of the
  17:			;   monitor/BIOS has been started.
  18:			;   Major goals:
  19:			;   o Modularization: Now monitor can grow up to 256kb instead of 4kb
  20:			;     :-)
  21:			;   o Specialized images fitted in memory page (4kb) or multiples
  22:			;   o Full support for new hardware
  23:			;   o I/O rewrite for MODE 2 interrupts
  24:			;   Minor goals:
  25:			;   o Full code clean-up & reoarganization
  26:			; ---------------------------------------------------------------------
  27:			; Revisions:
  28:			; 20140905 - Modified hexadecimal constants to 0xxH format to be widely
  29:			;            accepted by different assemblers
  30:			; 20150714 - Modified to implement serial XON/XOFF and RTS/CTS
  31:			; ---------------------------------------------------------------------
  32:			
  33:			; ---------------------------------------------------------------------
  34:			; SYSBIOS
  35:			;
  36:			; This is the BIOS non-resident portion of the new (banked)
  37:			; BIOS/Monitor for the NE Z80 (aka DarkStar)
  38:			;
  39:			; ---------------------------------------------------------------------
  40:			;
  41:			; Full BIOS memory scheme:
  42:			;
  43:			;	+-----------------+
  44:			;	+    SysCommon    +   <-- Resident portion. Common to all images
  45:			;	+   FC00 - FFFF   +
  46:			;	+-----------------+
  47:			;	+-----------------+   +-----------------+   +-----------------+
  48:			;	+     SysBios     +   +   BootMonitor   +   +     [Other]     +
  49:			;	+   F000 - FBFF   +   +   F000 - FBFF   +   +   F000 - FBFF   +
  50:			;	+-----------------+   +-----------------+   +-----------------+
  51:			;
  52:			;	         ^                     ^                     ^
  53:			;	         |                     |                     |
  54:			;	         ---------------------------------------------
  55:			;	                      Variable section
  56:			;
  57:			; The above are always assembled at ORG F000 and linked and allocated
  58:			; in the EEPROM in this way:
  59:			;
  60:			;	+-----------------+
  61:			;	+    SysCommon    +
  62:			;	+   FC00 - FFFF   +
  63:			;	+     SysBios     +     <-- EEPROM page 1 ($C1000)
  64:			;	+   F000 - FBFF   +
  65:			;	+-----------------+
  66:			;	+-----------------+
  67:			;	+    SysCommon    +
  68:			;	+   FC00 - FFFF   +
  69:			;	+   BootMonitor   +     <-- EEPROM page 0 ($C0000)
  70:			;	+   F000 - FBFF   +
  71:			;	+-----------------+
  72:			;
  73:			; ---------------------------------------------------------------------
  74:			;
  75:			; Define which assembler we are using
  76:			;
  77:			
  78:			; PASMO	EQU	1
  79:	0001'         	MZMAC	EQU	1
  80:			; ZMAC	EQU	1			; ZMAC Z80 assembler, not Linux/Unix version
  81:			
  82:			; ... only one at a time can be active (1) ...
  83:			
  84:			;
  85:			; Monitor version numbers (major.minor)
  86:			;
  87:	0033'         	MONMAJ		EQU	'3'
  88:	0034'         	MONMIN		EQU	'4'
  89:			
  90:			;
  91:			; Buffers addresses labels
  92:			;
  93:			
  94:			; -- Global --
  95:	0003'         	IOBYTE		EQU	0003H		; byte: Intel IOBYTE (CP/M 2.2 only)
  96:	0004'         	CDISK		EQU	0004H		; byte: Last logged drive
  97:	0006'         	BTPASIZ		EQU	0006H		; word: size of tpa + 1
  98:			;
  99:			; -- Private --
 100:	000B'         	HMEMPAG		EQU	000BH		; byte: highest ram page
 101:	000C'         	BBCBANK		EQU	000CH		; byte: current bank
 102:	000D'         	BBCSTCK		EQU	000DH		; word: current stack
 103:					;
 104:	004F'         	PRVTOP		EQU	004FH		; top of private area storage
 105:	004F'         	COLBUF		EQU	PRVTOP		; byte:
 106:	004E'         	DSELBF		EQU	COLBUF-1	; byte: floppy drive select status
 107:								; - bits: 0 = drive 0
 108:								; - bits: 1 = drive 1
 109:								; - bits: 2 = drive 2
 110:								; - bits: 3 = drive 3
 111:								; - bits: 4 = unused
 112:								; - bits: 5 = head select
 113:								; - bits: 6 = motor on (disabled by jumper)
 114:								; - bits: 7 = unused
 115:	004D'         	KBDBYTE		EQU	DSELBF-1	; byte: store keyboard input
 116:	004C'         	MIOBYTE		EQU	KBDBYTE-1	; byte:
 117:								; - bits: 0: 0 = floppy write		1 = floppy read
 118:								;         1: 0 = no ctrl on keypress	1 = ctrl on keypress
 119:								;         2: 0 = scroll			1 = no scroll
 120:								;         3: 0 = accept lowercase	1 = convert to uppercase
 121:								;         4: 0 = destr. bkspace		1 = non destr. bkspace
 122:								;         5: 0 = console out		1 = serial out
 123:								;         6: 0 = disp. all chars	1 = obscure non punct.
 124:								;         7: 0 = ctrl chr set 1		1 = ctrl chr set 2
 125:	004B'         	TMPBYTE		EQU	MIOBYTE-1	; byte: transients flags
 126:								; - bits: 0: 0 = high in cursor addressing
 127:								;         1: 0 = ESC catched by ANSI driver
 128:								;         2: 0 = CSI catched by ANSI driver
 129:								;         3: 0 = Two byte code ESC seq. from serial
 130:								;         4: 0 = Plain serial i/o (disable ANSI driver)
 131:								;         5: 0 = store interrupt status (on/off)
 132:								;         6: 0 = floppy home on err	1 = no home on err
 133:								;         7: 0 = unlock LBA free addressing (unpartitioned)
 134:	004A'         	CURSSHP		EQU	TMPBYTE-1	; cursor shape
 135:	0048'         	CURPBUF		EQU	CURSSHP-2	; word: cursor position
 136:	0046'         	FTRKBUF		EQU	CURPBUF-2	; word: track # for i/o (0 - 65535)
 137:	0045'         	FDRVBUF		EQU	FTRKBUF-1	; byte: drive number for i/0 (0 - 15)
 138:	0043'         	FSECBUF		EQU	FDRVBUF-2	; word: sector # for i/o (1 .. 65535)
 139:	0041'         	FRDPBUF		EQU	FSECBUF-2	; word: dma address for i/o
 140:	003F'         	FSEKBUF		EQU	FRDPBUF-2	; word: current track number for drive A/B
 141:	003E'         	RAM3BUF		EQU	FSEKBUF-1	; byte:
 142:	003D'         	RAM2BUF		EQU	RAM3BUF-1	; byte:
 143:	003C'         	RAM1BUF		EQU	RAM2BUF-1	; byte:
 144:	003B'         	RAM0BUF		EQU	RAM1BUF-1	; byte:
 145:	003A'         	RST7SP3		EQU	003AH		; keep clear area of RST38 (RST7)
 146:	0039'         	RST7SP2		EQU	0039H
 147:	0038'         	RST7SP1		EQU	0038H
 148:	002F'         	RSRVBUF		EQU	RST7SP1-9	; free 9 byte buffer
 149:	002D'         	APPBUF		EQU	RSRVBUF-2	; word: generic buffer
 150:	002C'         	COPSYS		EQU	APPBUF-1	; Op system type for partition selection
 151:	002B'         	UART0BR		EQU	COPSYS-1	; UART 0 baudrate
 152:	002A'         	UART1BR		EQU	UART0BR-1	; UART 1 baudrate
 153:	0029'         	CTC0TC		EQU	UART1BR-1	; CTC channel 0 time constant
 154:	0028'         	CTC1TC		EQU	CTC0TC-1	; CTC channel 1 time constant
 155:	0027'         	TIMRCON		EQU	CTC1TC-1	; timer buf
 156:	0026'         	CNFBYTE		EQU	TIMRCON-1	; config byte
 157:								; - bits: 0: 0 = UART1 intr disabled	1 = RST8 redir UART1
 158:								;         1: 1 = XON/XOFF enabled on UART0
 159:								;         2: 1 = RTS/CTS enabled on UART0
 160:								;         3: 0 = unused/reserved
 161:								;         4: 0 = unused/reserved
 162:								;         5: 0 = unused/reserved
 163:								;         6: 0 = unused/reserved
 164:								;         7: 0 = unused/reserved
 165:	000F'         	FIFOSTO		EQU	000FH		; fifo queues storage start
 166:	0008'         	FIFSIZE		EQU	8		; fifo queue lenght
 167:	000B'         	FIFBLOK		EQU	11		; fifo queue size
 168:	000F'         	FIFOU0		EQU	FIFOSTO		; uart 0 queue (alternate console)
 169:	001A'         	FIFOKB		EQU	FIFOU0+FIFBLOK	; keyboard queue
 170:	0025'         	FIFOEND		EQU	FIFOKB+FIFBLOK	; fifo blocks end
 171:			;
 172:	3000'         	BLDOFFS		EQU	3000H		; place for disk bootloader
 173:			
 174:			;
 175:			; Some commodity equs
 176:			;
 177:	000D'         	CR		EQU	0DH		; ascii CR & LF
 178:	000A'         	LF		EQU	0AH
 179:	000C'         	FF		EQU	0CH		; FORM FEED (clear screen)
 180:	001B'         	ESC		EQU	1BH		; ESCape
 181:	0011'         	XONC		EQU	11H		; Xon
 182:	0013'         	XOFC		EQU	13H		; Xoff
 183:	FFFF'         	TRUE		EQU	-1
 184:	0000'         	FALSE		EQU	0
 185:	0100'         	TPA		EQU	0100H		; TPA base address (for CP/M)
 186:			
 187:			;
 188:			; Modules equs
 189:			;
 190:				; delay
 191:	00F6'         	MSCNT		EQU	246
 192:				; mmu
 193:	000D'         	MMUTSTPAGE	EQU	0DH		; logical page used for sizing
 194:	D000'         	MMUTSTADDR	EQU	MMUTSTPAGE<<12	; logical page used for sizing
 195:			
 196:			; Conventionally all bios/monitor images start at $F000.
 197:			; Except for special cases all code is copied to ram @ $F000.
 198:			; In this case eeprom page 0 is directly mapped into logical space
 199:			; by hardware so we can initialize the system at cold boot.
 200:			;
 201:			; We assume to initialize MMU as follow:
 202:			;
 203:			; +--------+
 204:			; |  F000  |	-> $C0000  eeprom page 0
 205:			; +--------+
 206:			; +--------+
 207:			; |  EFFF  |
 208:			; +--------+
 209:			;     ...       -> $00000 to $0EFFF ram
 210:			; +--------+
 211:			; |  0000  |
 212:			; +--------+
 213:			;
 214:			
 215:			
 216:			; include	modules/hwequs.inc.asm
 217:			; Hardware equates
 218:			; ---------------------------------------------------------------------
 219:			
 220:			; ---------------------------------------------------------------------
 221:			; LX529 VIDEO BOARD:
 222:			; ---------------------------------------------------------------------
 223:	0080'         	CRTBASE		EQU	80H
 224:				; RAM0 for ascii chars & semi6. Combined with RAM1 and RAM2 for graphics
 225:	0080'         	CRTRAM0DAT	EQU	CRTBASE		; RAM0 access: PIO0 port A data register
 226:	0082'         	CRTRAM0CNT	EQU	CRTBASE+2	; RAM0 access: PIO0 port A control register
 227:				; Printer port
 228:	0081'         	CRTPRNTDAT	EQU	CRTBASE+1	; PRINTER (output): PIO0 port B data register
 229:	0083'         	CRTPRNTCNT	EQU	CRTBASE+3	; PRINTER (output): PIO0 port B control register
 230:								; STROBE is generated by hardware
 231:				; RAM1 for graphics. (pixel index by RAM0+RAM1+RAM2)
 232:	0084'         	CRTRAM1DAT	EQU	CRTBASE+4	; RAM1 access: PIO1 port A data register
 233:	0086'         	CRTRAM1CNT	EQU	CRTBASE+6	; RAM1 access: PIO1 port A control register
 234:				; Keyboard port (negated). Bit 7 is for strobe
 235:	0085'         	CRTKEYBDAT	EQU	CRTBASE+5	; KEYBOARD (input): PIO1 port B data register
 236:	0087'         	CRTKEYBCNT	EQU	CRTBASE+7	; KEYBOARD (input): PIO1 port B control register
 237:	0007'         	KEYBSTRBBIT	EQU	7		; Strobe bit
 238:				; RAM2 for graphics. (pixel index by RAM0+RAM1+RAM2)
 239:	0088'         	CRTRAM2DAT	EQU	CRTBASE+8	; RAM2 access: PIO2 port A data register
 240:	008A'         	CRTRAM2CNT	EQU	CRTBASE+10	; RAM2 access: PIO2 port A control register
 241:				; Service/User port
 242:	0089'         	CRTSERVDAT	EQU	CRTBASE+9	; Service (i/o): PIO2 port B data register
 243:	008B'         	CRTSERVCNT	EQU	CRTBASE+11	; Service (i/o): PIO2 port B control register
 244:	0000'         	PRNTBUSYBIT	EQU	0		; Printer BUSY bit		(in)	1
 245:	0001'         	CRTWIDTHBIT	EQU	1		; Set 40/80 chars per line	(out)	0
 246:	0002'         	PIO2BIT2	EQU	2		; user 1 (input)		(in)	1
 247:	0003'         	PIO2BIT3	EQU	3		; user 2 (input)		(in)	1
 248:	0004'         	PIO2BIT4	EQU	4		; user 3 (input)		(in)	1
 249:	0005'         	CLKSCLK		EQU	5		; DS1320 clock line		(out)	0
 250:	0006'         	CLKIO		EQU	6		; DS1320 I/O line		(i/o)	1
 251:	0007'         	CLKRST		EQU	7		; DS1320 RST line		(out)	0
 252:				; normal set for PIO2 (msb) 01011101 (lsb) that is hex $5D
 253:								; Other bits available to user
 254:				; RAM3 control chars/graphics attributes
 255:	008E'         	CRTRAM3PORT	EQU	CRTBASE+14	; RAM3 port
 256:	0000'         	CRTBLINKBIT	EQU	0		; Blink
 257:	0001'         	CRTREVRSBIT	EQU	1		; Reverse
 258:	0002'         	CRTUNDERBIT	EQU	2		; Underline
 259:	0003'         	CRTHILITBIT	EQU	3		; Highlight
 260:	0004'         	CRTMODEBIT	EQU	4		; ASCII/GRAPHIC mode
 261:				; Beeper port
 262:	008F'         	CRTBEEPPORT	EQU	CRTBASE+15	; Beeper port
 263:				; 6545 CRT controller ports
 264:	008C'         	CRT6545ADST	EQU	CRTBASE+12	; Address & Status register
 265:	008D'         	CRT6545DATA	EQU	CRTBASE+13	; Data register
 266:				; Cursor modes
 267:	0040'         	BLISLOWBLOK	EQU	40H		; Blink, slow, block
 268:	004A'         	BLISLOWLINE	EQU	4AH		; Blink, slow, line
 269:	0060'         	BLIFASTBLOK	EQU	60H		; Blink, fast, block
 270:	006A'         	BLIFASTLINE	EQU	6AH		; Blink, fast, line
 271:	0020'         	CURSOROFF	EQU	20H		; Off
 272:	0000'         	FIXBLOCK	EQU	00H		; Fixed, block
 273:	000A'         	CURSORON	EQU	0AH		; On
 274:			
 275:			; ---------------------------------------------------------------------
 276:			; LX390 FDC CONTROLLER:
 277:			; ---------------------------------------------------------------------
 278:	00D0'         	FDCBASE		EQU	0D0H
 279:	00D0'         	FDCCMDSTATR	EQU	FDCBASE		; Command and status register
 280:	00D1'         	FDCTRAKREG	EQU	FDCBASE+1	; Track register
 281:	00D2'         	FDCSECTREG	EQU	FDCBASE+2	; Sector register
 282:	00D7'         	FDCDATAREG	EQU	FDCBASE+7	; Data register *** Verificare che sia $d7
 283:	00D6'         	FDCDRVRCNT	EQU	FDCBASE+6	; Driver select/control register
 284:			;
 285:	0007'         	FDCRESTC	EQU	00000111b	; 1771 restore (seek to trak 0) cmd
 286:	0017'         	FDCSEEKC	EQU	00010111b	; seek cmd
 287:	0088'         	FDCREADC	EQU	10001000b	; read cmd
 288:	00A8'         	FDCWRITC	EQU	10101000b	; write cmd
 289:	00D0'         	FDCRESET	EQU	11010000b	; fdc reset immediate cmd
 290:			;
 291:			; ---------------------------------------------------------------------
 292:			; LX389: PARALLEL INTERFACE
 293:			; ---------------------------------------------------------------------
 294:			; alternate printer port
 295:	0003'         	ALTPRNPRT	EQU	03H
 296:			;
 297:			; parallel port PC link
 298:	0003'         	PPDATAP		EQU	03H		; Data port
 299:	0002'         	PPCNTRP		EQU	02H		; Control port
 300:	0000'         	PPSTROB		EQU	0		; Strobe bit
 301:	0001'         	PPAKSTB		EQU	1		; Acknowledge/Stop bit
 302:			;
 303:	0000'         	PPDINI		EQU	00H		; 00000000 Dnl Init byte
 304:	0004'         	PPDRDY		EQU	04H		; 00000100 Dnl Ready
 305:	0006'         	PPDSTP		EQU	06H		; 00000110 Dnl Stop
 306:	0002'         	PPDOKG		EQU	02H		; 00000010 Dnl Ok Go
 307:	0001'         	PPUINI		EQU	01H		; 00000001 Upl Init byte
 308:	0005'         	PPURDY		EQU	05H		; 00000101 Upl Ready
 309:	0007'         	PPUACK		EQU	07H		; 00000111 Upl Acknowledge
 310:	0003'         	PPUOKG		EQU	03H		; 00000011 Upl Ok Go
 311:			;
 312:			; virtual disks (PC-linked over parallel port)
 313:	0000'         	VDRDSEC		EQU	0		; read sector command
 314:	0001'         	VDWRSEC		EQU	1		; write sector command
 315:	000A'         	VDBUFSZ		EQU	10		; 10 bytes block
 316:			; ---------------------------------------------------------------------
 317:			; MULTF-BOARD: MMU, IDE, SERIAL, CTC
 318:			; ---------------------------------------------------------------------
 319:			; -- I/O --
 320:	0020'         	MMUPORT		EQU	20H
 321:	0021'         	MENAPRT		EQU	21H
 322:			; -- Map --
 323:	00C0'         	EEPAGE0		EQU	0C0H		; page 0 of eeprom
 324:	F000'         	EEPSTA		EQU	0F000H		; eeprom location after MMU reset
 325:	00EF'         	MMTPAPAG	EQU	(EEPSTA>>8)-1	; TPA top page (256 bytes pages)
 326:	00FF'         	IMTPAG		EQU	0FFH		; eeprom page with image table
 327:	0400'         	IMTSIZ		EQU	1024		; size
 328:	E000'         	RAMTBL		EQU	0E000H		; ram table location
 329:	0030'         	TBLBLK		EQU	48		; block size
 330:	0014'         	MAXBLK		EQU	20		; max images
 331:	03C0'         	RTBSIZ		EQU	TBLBLK * MAXBLK	; real table size
 332:								; A table block is:
 333:	0008'         	TNAMELEN	EQU	8		;	name		: 8 bytes
 334:	0002'         	TPAGELEN	EQU	2		;	page offset	: 2 bytes
 335:	0004'         	TIADDRLEN	EQU	4		;	image address	: 4 bytes
 336:	0004'         	TSIZELEN	EQU	4		;	image size	: 4 bytes
 337:	0014'         	TDESCLEN	EQU	20		;	description	: 20 bytes
 338:			; -- IDE --
 339:	00E0'         	IDEPORTA	EQU	0E0H		; lower 8 bits of IDE interface
 340:	00E1'         	IDEPORTB	EQU	0E1H		; upper 8 bits of IDE interface
 341:	00E2'         	IDEPORTC	EQU	0E2H		; control lines for IDE interface
 342:	00E3'         	IDEPORTCTRL	EQU	0E3H		; 8255 configuration port
 343:			
 344:	0092'         	READCFG8255	EQU	10010010b	; Set 8255 IDEportC to output, IDEportA/B input
 345:	0080'         	WRITECFG8255	EQU	10000000b	; Set all three 8255 ports to output mode
 346:			;IDE control lines for use with IDEportC.
 347:	0001'         	IDEA0LINE	EQU	01H		; direct from 8255 to IDE interface
 348:	0002'         	IDEA1LINE	EQU	02H		; direct from 8255 to IDE interface
 349:	0004'         	IDEA2LINE	EQU	04H		; direct from 8255 to IDE interface
 350:	0008'         	IDECS0LINE	EQU	08H		; inverter between 8255 and IDE interface
 351:	0010'         	IDECS1LINE	EQU	10H		; inverter between 8255 and IDE interface
 352:	0020'         	IDEWRLINE	EQU	20H		; inverter between 8255 and IDE interface
 353:	0040'         	IDERDLINE	EQU	40H		; inverter between 8255 and IDE interface
 354:	0080'         	IDERSTLINE	EQU	80H		; inverter between 8255 and IDE interface
 355:			;Symbolic constants for the IDE Drive registers
 356:	0008'         	REGDATA		EQU	IDECS0LINE
 357:	0009'         	REGERR		EQU	IDECS0LINE + IDEA0LINE
 358:	000A'         	REGSECCNT	EQU	IDECS0LINE + IDEA1LINE
 359:	000B'         	REGSECTOR	EQU	IDECS0LINE + IDEA1LINE + IDEA0LINE
 360:	000C'         	REGCYLLSB	EQU	IDECS0LINE + IDEA2LINE
 361:	000D'         	REGCYLMSB	EQU	IDECS0LINE + IDEA2LINE + IDEA0LINE
 362:	000E'         	REGSHD		EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE		;(0EH)
 363:	000F'         	REGCOMMAND	EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE + IDEA0LINE	;(0FH)
 364:	000F'         	REGSTATUS	EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE + IDEA0LINE
 365:	0016'         	REGCONTROL	EQU	IDECS1LINE + IDEA2LINE + IDEA1LINE
 366:	0016'         	REGASTATUS	EQU	IDECS1LINE + IDEA2LINE + IDEA1LINE
 367:			;IDE Command Constants.
 368:	0010'         	CMDRECAL	EQU	010H
 369:	0020'         	CMDREAD		EQU	020H
 370:	0030'         	CMDWRITE	EQU	030H
 371:	0091'         	CMDINIT		EQU	091H
 372:	00EC'         	CMDID		EQU	0ECH
 373:	00E0'         	CMDSPINDOWN	EQU	0E0H
 374:	00E1'         	CMDSPINUP	EQU	0E1H
 375:			; -- 16C550 UARTS --
 376:	00C0'         	UART0BASE	EQU	0C0H		; Port base address for 0
 377:	00C8'         	UART1BASE	EQU	0C8H		; Port base address for 1
 378:	00C0'         	UART0		EQU	UART0BASE	; Select UART 0
 379:	00C8'         	UART1		EQU	UART1BASE	; Select UART 1
 380:	0000'         	R0RXTX		EQU	0		; (r/w) RXD/TXD Transmit/Receive Buffer
 381:	0000'         	R0BRDL		EQU	0		; (r/w) DLL  if bit 7 of LCR is set: Baud Rate Divisor LSB
 382:	0001'         	R1IER		EQU	1		; (r/w) IER - Interrupt Enable Register
 383:	0001'         	R1BRDM		EQU	1		; (r/w) DLM if bit 7 of LCR is set: Baud Rate Divisor MSB
 384:	0002'         	R2IIR		EQU	2		; (r)   IIR - Interrupt Identification Register
 385:	0002'         	R2FCR		EQU	2		; (w)   FCR - FIFO Control Register
 386:	0003'         	R3LCR		EQU	3		; (r/w) LCR - Line Control Register
 387:	0004'         	R4MCR		EQU	4		; (r/w) MCR - Modem Control Register
 388:	0005'         	R5LSR		EQU	5		; (r)   LSR - Line Status Register
 389:	0006'         	R6MSR		EQU	6		; (r)   MSR - Modem Status Register
 390:	0007'         	R7SPR		EQU	7		; (r/w) SPR - Scratch Pad Register
 391:				; speeds:
 392:	0060'         	UART1200	EQU	96		; = 1,843,200 / ( 16 x 1200 )
 393:	0030'         	UART2400	EQU	48		; = 1,843,200 / ( 16 x 2400 )
 394:	0018'         	UART4800	EQU	24		; = 1,843,200 / ( 16 x 4800 )
 395:	000C'         	UART9600	EQU	12		; = 1,843,200 / ( 16 x 9600 )
 396:	0006'         	UART19K2	EQU	06		; = 1,843,200 / ( 16 x 19,200 )
 397:	0003'         	UART38K4	EQU	03		; = 1,843,200 / ( 16 x 38,400 )
 398:	0002'         	UART57K6	EQU	02		; = 1,843,200 / ( 16 x 57,600 )
 399:	0001'         	UART115K2	EQU	01		; = 1,843,200 / ( 16 x 115,200 )
 400:			
 401:	0006'         	U0DEFSPEED	EQU	UART19K2	; UART 0 default speed
 402:	000C'         	U1DEFSPEED	EQU	UART9600	; UART 1 default speed
 403:			; -- Z80CTC --
 404:	00E8'         	CTCBASE		EQU	0E8H
 405:	00E8'         	CTCCHAN0	EQU	CTCBASE+0	; Channel 1 - Free
 406:	00E9'         	CTCCHAN1	EQU	CTCBASE+1	; Channel 2 - System Timer
 407:	00EA'         	CTCCHAN2	EQU	CTCBASE+2	; Channel 3 - UART 1 Interrupt
 408:	00EB'         	CTCCHAN3	EQU	CTCBASE+3	; Channel 4 - UART 0 Interrupt
 409:	0020'         	CTC0TCHI	EQU	32		; hi speed chan. 0 tc: 4Mhz / 256 / 32 = 488.28 Hz
 410:	0005'         	CTC1TC100HZ	EQU	5		; lo speed chan. 1 tc: 488.28 Hz / 5 = ~ 97.6 Hz
 411:	000A'         	CTC1TC50HZ	EQU	10		; lo speed chan. 1 tc: 488.28 Hz / 10 = ~ 48.8 Hz
 412:	0013'         	CTC1TC25HZ	EQU	19		; lo speed chan. 1 tc: 488.28 Hz / 19 = ~ 25 Hz
 413:	0030'         	CTC1TC10HZ	EQU	48		; lo speed chan. 1 tc: 488.28 Hz / 48 = ~ 10 Hz
 414:	00F4'         	CTC1TC2HZ	EQU	244		; lo speed chan. 1 tc: 488.28 Hz / 244 = ~ 2 Hz
 415:	0013'         	SYSHERTZ	EQU	CTC1TC25HZ	; System timer hertz
 416:			; -- EEPROM --
 417:	0001'         	EEP29EE		EQU	01H		; type 29EE020
 418:	0002'         	EEP29XE		EQU	02H		; type 29LE020 or 29VE020
 419:	0004'         	EEP29C		EQU	04H		; type 29C020
 420:	0008'         	EEPUNSUPP	EQU	08H		; unsupported
 421:	0010'         	EEPROGLOCK	EQU	10H		; programming locked
 422:				;
 423:	0080'         	EERINEPROM	EQU	80H		; tried to program eeprom running inside it
 424:			
 425:			;
 426:			; MMU organization
 427:			;
 428:			; MMU manage 16 4kb pages in Z80 address space (logical)
 429:			; It can assign any of 256 4k pages (physical) from its
 430:			; 1Mb address space.
 431:			;
 432:			; To load phisycal page XXh to logical page (in CPU address space) Y,
 433:			; you should consider that MMU is at a fixed address 20h and that
 434:			; logical 4K page Y is derived in the MMU by the usage of A12,A13,A14
 435:			; and A15 address lines during an I/O instruction.
 436:			;
 437:			; So to address phys. ram page 00h at the top of logical space page Fh
 438:			; you need to have Fh * on top address lines * because this address
 439:			; is the index to MMU page.
 440:			;
 441:			; So:
 442:			;
 443:			; 	LD	A,00h		<--- phis. page number	00xxxh (4k page)
 444:			; 	LD	B,F0h		<--- log. page number 	 Fxxxh (cpu page)
 445:			; 	LD	C,20h		<--- MMU I/O address
 446:			; 	OUT	(C),A
 447:			; 	RET
 448:			;
 449:			; The OUT instruction place:
 450:			; A on data lines D0-D7
 451:			; Fh (from B register) on A12-A15
 452:			; on port 20h (C register)
 453:			;
 454:			;
 455:			; Memory is organized as follow:
 456:			;
 457:			;	Slot 1	-> RAM	  -> 512k from 00000h to 7ffffh (mandatory)
 458:			;	Slot 2	-> RAM	  -> 128k from 80000h to 9ffffh (option 1)
 459:			;	Slot 2	-> RAM    -> 256k from 80000h to bffffh (option 2)
 460:			;	Slot 3	-> EEPROM -> 256k from c0000h to fffffh (mandatory)
 461:			;
 462:			
 463:			
 464:			;-------------------------------------
 465:			; Production / Testing
 466:			
 467:	FFFF'         	BBDEBUG	EQU	TRUE
 468:			
 469:			
 470:			;-------------------------------------
 471:			; Segments, pages locations
 472:			
 473:	FFFF'         	IF	BBDEBUG
 474:			
 475:	0004'         	BBIMGP	EQU	04H		; Image location (DEBUG)
 476:	000E'         	BBAPPP	EQU	0EH
 477:	000F'         	BBPAG	EQU	0FH		; Base page location
 478:			
 479:			ELSE
 485:			ENDIF
 486:			
 487:	000D'         	TRNPAG	EQU	0DH		; Page used for transient MMU ops
 488:	F000'         	BBBASE	EQU	BBPAG << 12	; non resident base address
 489:	FC00'         	BBCOMN	EQU	BBBASE + 0C00H	; resident portion address
 490:			
 491:	F000'         	SYSBASE EQU	BBBASE		; use this to have 60K TPA
 492:			; SYSBASE EQU	BBCOMN		; use this to have 63K TPA
 493:			
 494:			;-------------------------------------
**** boot.asm ****
  21:			
  22:	0000'         	LDRDBG	EQU	false
  23:			
  24:			FTRACE	macro	p1
  25:				if ldrdbg
  26:				ld	(OLDSTACK),SP
  27:				ld	sp,NEWSTACK
  28:				push	af
  29:				push	bc
  30:				push	de
  31:				push	hl
  32:				call	inline
  33:				defb	p1,cr,lf,'$'
  34:				call	bbconin
  35:				pop	hl
  36:				pop	de
  37:				pop	bc
  38:				pop	af
  39:				ld	sp,(OLDSTACK)
  40:				endif
  41:				endm
  42:			
  43:			HEX16	macro	p1,p2
  44:				if ldrdbg
  45:				ld	(OLDSTACK),SP
  46:				ld	sp,NEWSTACK
  47:				push	af
  48:				push	bc
  49:				push	de
  50:				push	hl
  51:				ld	a,p1
  52:				call	phex
  53:				ld	a,p2
  54:				call	phex
  55:				ld	c,CR
  56:				call	BBCONOUT
  57:				ld	c,LF
  58:				call	BBCONOUT
  59:				pop	hl
  60:				pop	de
  61:				pop	bc
  62:				pop	af
  63:				ld	sp,(OLDSTACK)
  64:				endif
  65:				endm
  66:			
  67:			HEX8	macro	p1
  68:				if ldrdbg
  69:				ld	(OLDSTACK),SP
  70:				ld	sp,NEWSTACK
  71:				push	af
  72:				push	bc
  73:				push	de
  74:				push	hl
  75:				ld	a,p1
  76:				call	phex
  77:				ld	c,CR
  78:				call	BBCONOUT
  79:				ld	c,LF
  80:				call	BBCONOUT
  81:				pop	hl
  82:				pop	de
  83:				pop	bc
  84:				pop	af
  85:				ld	sp,(OLDSTACK)
  86:				endif
  87:				endm
  88:			
  89:				; define public labels:
  90:				PUBLIC	?INIT,?LDCCP,?RLCCP
  91:				PUBLIC	IDEERR
  92:			
  93:				; externally defined entry points and labels:
  94:				EXTRN	?PMSG,?PDERR,?CONIN
  95:				EXTRN	@CIVEC,@COVEC,@AIVEC,@AOVEC,@LOVEC
  96:				EXTRN	@CBNK,?BNKSL,@DTBL
  97:	FFFF'         		IF	BANKED
  98:				EXTRN	BANKBF
  99:				ENDIF
 100:			
 101:			;
 102:			;
 103:				; we can do initialization from banked memory (if we have it):
 104:	FFFF'         		IF BANKED
 105:				DSEG				; init done from banked memory
 106:				ELSE
 108:				ENDIF
 109:			
 110:	0005"         	BDOS	EQU	5			; BDOS entry point
 111:	0008"         	CCPBNK	EQU	8
 112:			
 113:				;; ?init
 114:				;; hardware initialization other than character and disk i/o:
 115:	0000"         	?INIT:
 116:				; assign console input and output to crtc:
 117:	0000" 210080  		LD	HL,1000000000000000B	; assign console to CRTC:
 118:	0003" 220000  		LD	(@CIVEC),HL
 119:	0006" 220000  		LD	(@COVEC),HL
 120:	0009" 210040  		LD	HL,0100000000000000B	; assign auxiliary to UART0:
 121:	000C" 220000  		LD	(@AIVEC),HL
 122:	000F" 220000  		LD	(@AOVEC),HL
 123:	0012" 210010  		LD	HL,0001000000000000B	; assign printer to LPT:
 124:	0015" 220000  		LD	(@LOVEC),HL
 125:			
 126:	0018" 3E33    		LD	A,'3'
 127:	001A" 322C00  		LD	(COPSYS),A		; identify opsys for partitions
 128:			
 129:	001D" 3A0400  		LD	A,(CDISK)
 130:	0020" 3C      		INC	A
 131:	0021" 320101  		LD	(BOOTDRIVE),A		; remember boot drive
 132:			
 133:	0024" FDE5    		PUSH	IY
 134:	0026" CDEDFC  		CALL	BBHDINIT		; IDE init
 135:	0029" B7      		OR	A
 136:	002A" 200B    		JR	NZ,IDEERR
 137:	002C" CD11FD  		CALL	BBLDPART
 138:	002F" FDE1    		POP	IY
 139:			
 140:				; print the sign-on message:
 141:	0031" 212601  		LD	HL,SIGNONMSG		; point to it
 142:	0034" C30000  		JP	?PMSG			; and print it
 143:			
 144:	0037"         	IDEERR:
 145:	0037" 21D400  		LD	HL,IDEMSG		; report the error
 146:	003A" C30000  		JP	?PMSG
 147:				;
 148:			
 149:	FFFF"         		IF BANKED
 150:				CSEG
 151:				ENDIF
 152:			
 153:				;; ?ldccp
 154:				;; this routine is entered to load the ccp.com file into the tpa bank
 155:				;; at system cold start:
 156:	0000'         	?LDCCP:
 157:				; set up the fcb for the file operation:
 158:	0000' AF      		XOR	A			; zero extent
 159:	0001' 321101  		LD	(CCPFCB+15),A
 160:	0004' 3A0101  		LD	A,(BOOTDRIVE)
 161:	0007' 320201  		LD	(CCPFCB),A		; set drive
 162:	000A' 210000  		LD	HL,0			; start at beginning of file
 163:	000D' 222201  		LD	(FCBNR),HL
 164:			
 165:				; try to open the ccp.com file:
 166:	0010' 110201  		LD	DE,CCPFCB		; point to fcb
 167:	0013' CDA400  		CALL	LOPEN			; attempt the open operation
 168:	0016' 3C      		INC	A			; was it on the disk ?
 169:	0017' 200B    		JR	NZ,CCPFOUND		; yes -- go load it
 170:			
 171:				; we arrive here when ccp.com file wasn't found:
 172:	0019' 21B800  		LD	HL,CCPMSG		; report the error
 173:	001C' CD0000  		CALL	?PMSG
 174:	001F' CD0000  		CALL	?CONIN			; get a response
 175:	0022' 18DC    		JR	?LDCCP			; and try again
 176:			
 177:				; file was opened ok -- read it in:
 178:	0024'         	CCPFOUND:
 179:	0024' 110001  		LD	DE,0100H		; load at bottom of tpa
 180:	0027' CDA900  		CALL	LSETDMA			; by setting the next dma address
 181:	002A' 118000  		LD	DE,128			; Set multi sector i/o count
 182:	002D' CDAE00  		CALL	LSETMULTI		; to allow up to 16k bytes in one operation
 183:	0030' 110201  		LD	DE,CCPFCB		; point to the fcb
 184:	0033' CDB300  		CALL	LREAD			; And read the ccp in
 185:	0036' FE01    		CP	1			; error 1 is ok, since we read until EOF
 186:	0038' 2812    		JR	Z,POSTLOAD
 187:	003A' B7      		OR	A			; 0
 188:	003B' 280F    		JR	Z,POSTLOAD
 189:			
 190:	003D' 21E900  		LD	HL,LDERRM
 191:	0040' CD0000  		CALL	?PMSG
 192:	0043' CD0000  		CALL	?PDERR
 193:	0046' CD94FD  		CALL	BBCONIN
 194:	0049' C300FC  		JP	$FC00			; reboot system
 195:			
 196:	004C'         	POSTLOAD:
 197:			
 198:				; following code for banked systems -- moves ccp image to bank 2
 199:				; for later reloading at warm starts:
 200:	FFFF'         		IF	BANKED
 201:			
 202:	004C' 210001  		LD	HL,0100H		; get ccp image from start of tpa
 203:	004F' 0619    		LD	B,25			; transfer 25 logical sectors
 204:	0051' 3A0000  		LD	A,(@CBNK)		; get current bank
 205:	0054' F5      		PUSH	AF			; and save it
 206:	0055'         	LD1:
 207:	0055' C5      		PUSH	BC			; save sector count
 208:	0056' 3E01    		LD	A,1			; Select tpa bank
 209:	0058' CD0000  		CALL	?BNKSL
 210:	005B' 018000  		LD	BC,128			; transfer 128 bytes to temporary buffer
 211:	005E' 110000  		LD	DE,BANKBF		; temporary buffer addr in [de]
 212:	0061' E5      		PUSH	HL			; save source address
 213:	0062' D5      		PUSH	DE			; and destination
 214:	0063' C5      		PUSH	BC			; and count
 215:	0064' EDB0    		LDIR				; block move sector to temporary buffer
 216:	0066' 3E08    		LD	A,CCPBNK		; select bank to save ccp in
 217:	0068' CD0000  		CALL	?BNKSL
 218:	006B' C1      		POP	BC			; get back count
 219:	006C' E1      		POP	HL			; last destination will be new source addr
 220:	006D' D1      		POP	DE			; last source will be new destination
 221:	006E' EDB0    		LDIR				; block move sector from buffer to alternate
 222:				; bank
 223:	0070' EB      		EX	DE,HL			; next addr will be new source addr
 224:	0071' C1      		POP	BC			; get back sector count
 225:	0072' 10E1    		DJNZ	LD1			; drop sector count and loop till done...
 226:	0074' F1      		POP	AF			; when done -- restore original bank
 227:	0075' C30000  		JP	?BNKSL
 228:			
 229:				ELSE
 234:				ENDIF
 235:			
 236:			
 237:				;; ?rlccp
 238:				;; routine reloads ccp image from bank 2 if banked system or from the
 239:				;; disk if non-banked version:
 240:	0078'         	?RLCCP:
 241:	FFFF'         		IF	BANKED
 242:				; following code for banked version:
 243:	0078' 210001  		LD	HL,0100H		; get ccp image from start of alternate buffER
 244:	007B' 0619    		LD	B,25			; transfer 25 logical sectors
 245:	007D' 3A0000  		LD	A,(@CBNK)		; get current bank
 246:	0080' F5      		PUSH	AF			; and save it
 247:	0081'         	RL1:
 248:	0081' C5      		PUSH	BC			; save sector count
 249:	0082' 3E08    		LD	A,CCPBNK		; select alternate bank
 250:	0084' CD0000  		CALL	?BNKSL
 251:	0087' 018000  		LD	BC,128			; transfer 128 bytes to temporary buffER
 252:	008A' 110000  		LD	DE,BANKBF		; temporary buffer addr in [de]
 253:	008D' E5      		PUSH	HL			; save source address
 254:	008E' D5      		PUSH	DE			; and destination
 255:	008F' C5      		PUSH	BC			; and count
 256:	0090' EDB0    		LDIR				; block move sector to temporary buffer
 257:	0092' 3E01    		LD	A,1			; put ccp to tpa bank
 258:	0094' CD0000  		CALL	?BNKSL
 259:	0097' C1      		POP	BC			; get back count
 260:	0098' E1      		POP	HL			; last destination will be new source addr
 261:	0099' D1      		POP	DE			; last source will be new destination
 262:	009A' EDB0    		LDIR				; block move sector from buffer to tpa bank
 263:	009C' EB      		EX	DE,HL			; next addr will be new source addr
 264:	009D' C1      		POP	BC			; get back sector count
 265:	009E' 10E1    		DJNZ	RL1			; drop sector count and loop till done...
 266:	00A0' F1      		POP	AF			; get back last current bank #
 267:	00A1' C30000  		JP	?BNKSL			; select it and return
 268:			
 269:				ELSE
 273:				ENDIF
 274:			
 275:			;
 276:	FFFF'         		IF	BANKED
 277:				CSEG
 278:				ENDIF
 279:			
 280:				; cp/m bdos function interfaces
 281:			
 282:				; open file:
 283:	00A4'         	LOPEN:
 284:	00A4' 0E0F    		LD	C,15
 285:	00A6' C30500  		JP	BDOS		; open file control block
 286:			
 287:				; set dma address:
 288:	00A9'         	LSETDMA:
 289:	00A9' 0E1A    		LD	C,26
 290:	00AB' C30500  		JP	BDOS		; set data transfer address
 291:			
 292:				; set multi sector i/o count:
 293:	00AE'         	LSETMULTI:
 294:	00AE' 0E2C    		LD	C,44
 295:	00B0' C30500  		JP	BDOS		; set record count
 296:			
 297:				; read file record:
 298:	00B3'         	LREAD:
 299:	00B3' 0E14    		LD	C,20
 300:	00B5' C30500  		JP	BDOS		; read records
 301:			
 302:				; ccp not found error message:
 303:	00B8'         	CCPMSG:
 304:	00B8' 0D0A4249		DEFB	CR,LF,"BIOS ERR: NO CCP.COM FILE",0
	      4F532045
	      52523A20
	      4E4F2043
	      43502E43
	      4F4D2046
	      494C4500
 305:				; ide init error
 306:	00D4'         	IDEMSG:
 307:	00D4' 0D0A4944		DEFB	CR,LF,"IDE HD INIT ERROR.",0
	      45204844
	      20494E49
	      54204552
	      524F522E
	      00
 308:				; load error
 309:	00E9'         	LDERRM:
 310:	00E9' 0D0A4C4F		DEFB	CR,LF,"LOAD ERROR. REBOOTING",0
	      41442045
	      52524F52
	      2E205245
	      424F4F54
	      494E4700
 311:			
 312:	0101'         	BOOTDRIVE:
 313:	0101' 00      		DB	0
 314:			
 315:				; fcb for ccp.com file loading:
 316:	0102'         	CCPFCB:
 317:	0102' 01      		DEFB	1			; auto-select drive a
 318:	0103' 43435020		DEFB	"CCP     COM"		; file name and type
	      20202020
	      434F4D
 319:	010E' 00000000		DEFB	0,0,0,0
 320:	0112'         		DEFS	16
 321:	0122' 00000000	FCBNR:	DEFB	0,0,0,0
 322:			;
 323:			;
 324:	FFFF'         		IF	BANKED
 325:				CSEG
 326:				ENDIF
 327:			
 328:			
 329:				; SYSTEM SIGN-ON MESSAGE:
 330:	0126'         	SIGNONMSG:
 331:	0126' 0D0A0D0A		DEFB	CR,LF,CR,LF,"Z80 CP/M version 3.1 (Piergiorgio Betti 06/09/2014)"
	      5A383020
	      43502F4D
	      20766572
	      73696F6E
	      20332E31
	      20285069
	      65726769
	      6F726769
	      6F204265
	      74746920
	      30362F30
	      392F3230
	      313429
 332:	0000'         		IF NOT BANKED
 334:				ELSE
 335:	015D' 0D0A4261		DEFB	CR,LF,"Banked version."
	      6E6B6564
	      20766572
	      73696F6E
	      2E
 336:				ENDIF
 337:	0000'         		IF ZPM3
 339:				ELSE
 340:	016E' 0D0A2B20		DEFB	CR,LF,"+ CP/M 3 Plus standard BDOS"
	      43502F4D
	      20332050
	      6C757320
	      7374616E
	      64617264
	      2042444F
	      53
 341:				ENDIF
 342:	018B' 0D0A00  		DEFB	CR,LF,0
 343:			
 344:			
 345:	0000'         		IF LDRDBG
 394:				ENDIF
 395:			
 396:	018E'         		END



Statistics:

     5	passes
     0	jr promotions
   353	symbols
     0	bytes

     0	macro calls
   640	macro bytes
     0	invented symbols



Symbol Table:

?bnksl             0      (extern)
?conin             0      (extern)
?init              0"     (public)
?ldccp             0'     (public)
?pderr             0      (extern)
?pmsg              0      (extern)
?rlccp            78'     (public)
@aivec             0      (extern)
@aovec             0      (extern)
@cbnk              0      (extern)
@civec             0      (extern)
@covec             0      (extern)
@dtbl              0      (extern)
@lovec             0      (extern)
altprnprt      =   3     
appbuf         =  2d     
bankbf             0      (extern)
banked         =ffffffff 
bbappp         =   e     
bbbase         =f000     
bbcalret       =fd5a     
bbcbank        =   c     
bbcomn         =fc00     
bbconin        =fd94     
bbconout       =fd9f     
bbconst        =fdaa     
bbcpboot       =fcc3     
bbcrtcini      =fc03     
bbcrtfill      =fc09     
bbcstck        =   d     
bbcurset       =fc21     
bbdebug        =ffffffff 
bbdiv16        =fcdb     
bbdmaset       =fcb7     
bbdprmset      =fd17     
bbdriveid      =fcf3     
bbdsksel       =fcbd     
bbeidck        =fd23     
bbepmngr       =fd1d     
bbexec         =fd29     
bbfdrvsel      =fcd5     
bbfhome        =fc81     
bbflopio       =fc93     
bbfread        =fc87     
bbfwrite       =fc8d     
bbhdboot       =fd0b     
bbhdgeo        =fd05     
bbhdinit       =fced     
bbhdrd         =fcff     
bbhdwr         =fcf9     
bbimgp         =   4     
bbinictc       =fc57     
bbldpart       =fd11     
bbmul16        =fce1     
bboffcal       =fce7     
bbpag          =   f     
bbprcvblk      =fc6f     
bbprnchr       =fc99     
bbpsndblk      =fc63     
bbrdtime       =fca5     
bbrdvdsk       =fc75     
bbresctc       =fc5d     
bbsecset       =fcb1     
bbsidset       =fccf     
bbstack        =fec0     
bbstbase       =fe9c     
bbsttim        =fc9f     
bbtrkset       =fcab     
bbu0ini        =fc39     
bbu1ini        =fc51     
bbu1rx         =fc45     
bbu1st         =fc4b     
bbu1tx         =fc3f     
bbuplchr       =fc69     
bbvcpmbt       =fcc9     
bbvoid         =fd6a     
bbwrvdsk       =fc7b     
bdos           =   5     
bldoffs        =3000     
blifastblok    =  60     
blifastline    =  6a     
blislowblok    =  40     
blislowline    =  4a     
bootdrive        101'    
btpasiz        =   6     
ccpbnk         =   8     
ccpfcb           102'    
ccpfound          24'    
ccpmsg            b8'    
cdisk          =   4     
clkio          =   6     
clkrst         =   7     
clksclk        =   5     
cmdid          =  ec     
cmdinit        =  91     
cmdread        =  20     
cmdrecal       =  10     
cmdspindown    =  e0     
cmdspinup      =  e1     
cmdwrite       =  30     
cnfbyte        =  26     
colbuf         =  4f     
copsys         =  2c     
cr             =   d     
crt6545adst    =  8c     
crt6545data    =  8d     
crtbase        =  80     
crtbeepport    =  8f     
crtblinkbit    =   0     
crthilitbit    =   3     
crtkeybcnt     =  87     
crtkeybdat     =  85     
crtmodebit     =   4     
crtprntcnt     =  83     
crtprntdat     =  81     
crtram0cnt     =  82     
crtram0dat     =  80     
crtram1cnt     =  86     
crtram1dat     =  84     
crtram2cnt     =  8a     
crtram2dat     =  88     
crtram3port    =  8e     
crtrevrsbit    =   1     
crtservcnt     =  8b     
crtservdat     =  89     
crtunderbit    =   2     
crtwidthbit    =   1     
ctc0tc         =  29     
ctc0tchi       =  20     
ctc1tc         =  28     
ctc1tc100hz    =   5     
ctc1tc10hz     =  30     
ctc1tc25hz     =  13     
ctc1tc2hz      =  f4     
ctc1tc50hz     =   a     
ctcbase        =  e8     
ctcchan0       =  e8     
ctcchan1       =  e9     
ctcchan2       =  ea     
ctcchan3       =  eb     
curpbuf        =  48     
cursoroff      =  20     
cursoron       =   a     
cursshp        =  4a     
delay          =fd85     
dly1           =fd89     
dly2           =fd87     
dostx          =fe6f     
dselbf         =  4e     
eep29c         =   4     
eep29ee        =   1     
eep29xe        =   2     
eepage0        =  c0     
eeproglock     =  10     
eepsta         =f000     
eepunsupp      =   8     
eerineprom     =  80     
esc            =  1b     
false          =   0     
fcbnr            122'    
fdcbase        =  d0     
fdccmdstatr    =  d0     
fdcdatareg     =  d7     
fdcdrvrcnt     =  d6     
fdcreadc       =  88     
fdcreset       =  d0     
fdcrestc       =   7     
fdcsectreg     =  d2     
fdcseekc       =  17     
fdctrakreg     =  d1     
fdcwritc       =  a8     
fdrvbuf        =  45     
ff             =   c     
fifblok        =   b     
fifoend        =  25     
fifokb         =  1a     
fifosto        =   f     
fifou0         =   f     
fifsize        =   8     
fin            =fdc4     
fixblock       =   0     
fout           =fde1     
frdpbuf        =  41     
fsecbuf        =  43     
fsekbuf        =  3f     
fstat          =fdb5     
ftrace             0     
ftrkbuf        =  46     
hex16             c0     
hex8             1aa     
hmempag        =   b     
idea0line      =   1     
idea1line      =   2     
idea2line      =   4     
idecs0line     =   8     
idecs1line     =  10     
ideerr            37"     (public)
idemsg            d4'    
ideporta       =  e0     
ideportb       =  e1     
ideportc       =  e2     
ideportctrl    =  e3     
iderdline      =  40     
iderstline     =  80     
idewrline      =  20     
imtpag         =  ff     
imtsiz         = 400     
intrdi         =fe0f     
intren         =fdfe     
iobyte         =   3     
kbdbyte        =  4d     
keybstrbbit    =   7     
ld1               55'    
lderrm            e9'    
ldrdbg         =   0     
lf             =   a     
lopen             a4'    
lread             b3'    
lsetdma           a9'    
lsetmulti         ae'    
maxblk         =  14     
menaprt        =  21     
miobyte        =  4c     
mmgetp         =fd78     
mmpmap         =fd6b     
mmtpapag       =  ef     
mmuport        =  20     
mmutstaddr     =d000     
mmutstpage     =   d     
monmaj         =  33     
monmin         =  34     
mscnt          =  f6     
mzmac          =   1     
pio2bit2       =   2     
pio2bit3       =   3     
pio2bit4       =   4     
postload          4c'    
ppakstb        =   1     
ppcntrp        =   2     
ppdatap        =   3     
ppdini         =   0     
ppdokg         =   2     
ppdrdy         =   4     
ppdstp         =   6     
ppstrob        =   0     
ppuack         =   7     
ppuini         =   1     
ppuokg         =   3     
ppurdy         =   5     
prntbusybit    =   0     
prvtop         =  4f     
r0brdl         =   0     
r0rxtx         =   0     
r1brdm         =   1     
r1ier          =   1     
r2fcr          =   2     
r2iir          =   2     
r3lcr          =   3     
r4mcr          =   4     
r5lsr          =   5     
r6msr          =   6     
r7spr          =   7     
ram0buf        =  3b     
ram1buf        =  3c     
ram2buf        =  3d     
ram3buf        =  3e     
ramtbl         =e000     
readcfg8255    =  92     
regastatus     =  16     
regcommand     =   f     
regcontrol     =  16     
regcyllsb      =   c     
regcylmsb      =   d     
regdata        =   8     
regerr         =   9     
regseccnt      =   a     
regsector      =   b     
regshd         =   e     
regstatus      =   f     
rl1               81'    
rldrom         =fe85     
rsrvbuf        =  2f     
rst7sp1        =  38     
rst7sp2        =  39     
rst7sp3        =  3a     
rtbsiz         = 3c0     
sconin         =fc2d     
sconout        =fc27     
sconst         =fc33     
signonmsg        126'    
sintvec        =fff0     
srxrsm         =fe6d     
srxstp         =fe69     
sysbase        =f000     
syscmlo        =fec0     
syscom         =fc00     
syshertz       =  13     
sytimr         =fe19     
tblblk         =  30     
tdesclen       =  14     
tiaddrlen      =   4     
timrcon        =  27     
tmpbyte        =  4b     
tnamelen       =   8     
tpa            = 100     
tpagelen       =   2     
trnpag         =   d     
true           =ffffffff 
tsizelen       =   4     
tx0            =fe77     
tx01           =fe79     
u0defspeed     =   6     
u0isr          =fe25     
u1defspeed     =   c     
u1isr          =fe5b     
u1nul          =fe65     
uart0          =  c0     
uart0base      =  c0     
uart0br        =  2b     
uart1          =  c8     
uart115k2      =   1     
uart1200       =  60     
uart19k2       =   6     
uart1base      =  c8     
uart1br        =  2a     
uart2400       =  30     
uart38k4       =   3     
uart4800       =  18     
uart57k6       =   2     
uart9600       =   c     
uastav         =fe90     
uastkb         =fe92     
uisre          =fe50     
uisri          =fe35     
vconin         =fc15     
vconout        =fc0f     
vconst         =fc1b     
vdbufsz        =   a     
vdrdsec        =   0     
vdwrsec        =   1     
voidisr        =fe22     
writecfg8255   =  80     
xofc           =  13     
xonc           =  11     
zpm3           =   0     
