   1:			;
   2:			;=======================================================================
   3:			;
   4:			; CP/M 3 Z80 DarkStar (NE Z80) Porting
   5:			;
   6:			;=======================================================================
   7:			;;---------------------------------------------------------------------
   8:			;; Version      : 1.0 - 20140904
   9:			;; Assemble     : SLR z80asm
  10:			;; Revisions:
  11:			;; 20140905	- Code start
  12:			;;---------------------------------------------------------------------
  13:			
  14:				TITLE	'TIME MODULE FOR THE MODULAR CP/M 3 BIOS'
  15:			
  16:				.Z80
  17:			
  18:				; define logical values:
  19:				include	common.inc
**** common.inc ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; CP/M 3 Z80 DarkStar (NE Z80) Porting
   5:			;
   6:			;=======================================================================
   7:			;;---------------------------------------------------------------------
   8:			;; Version      : 1.0 - 20140904
   9:			;; Assemble     : m80
  10:			;; Revisions:
  11:			;; 20140904	- Code start
  12:			;;---------------------------------------------------------------------
  13:			;
  14:			; Here just some common symbol...
  15:			;
  16:				; SYSBIOS equates
  17:				include	darkstar.equ
**** darkstar.equ ****
   1:			;****** Equ's file autogenerated by genequs ver: 1.0
   2:			;****** Input files:
   3:			;****** SysCommon.lst
   4:	FE77'         	TX0            	EQU	0FE77H
   5:	FDC4'         	FIN            	EQU	0FDC4H
   6:	FE79'         	TX01           	EQU	0FE79H
   7:	FD89'         	DLY1           	EQU	0FD89H
   8:	FD87'         	DLY2           	EQU	0FD87H
   9:	FDE1'         	FOUT           	EQU	0FDE1H
  10:	FE65'         	U1NUL          	EQU	0FE65H
  11:	FE25'         	U0ISR          	EQU	0FE25H
  12:	FE5B'         	U1ISR          	EQU	0FE5BH
  13:	FD85'         	DELAY          	EQU	0FD85H
  14:	FE50'         	UISRE          	EQU	0FE50H
  15:	FDB5'         	FSTAT          	EQU	0FDB5H
  16:	FE35'         	UISRI          	EQU	0FE35H
  17:	FE6F'         	DOSTX          	EQU	0FE6FH
  18:	FC4B'         	BBU1ST         	EQU	0FC4BH
  19:	FC45'         	BBU1RX         	EQU	0FC45H
  20:	FC3F'         	BBU1TX         	EQU	0FC3FH
  21:	FD29'         	BBEXEC         	EQU	0FD29H
  22:	FCFF'         	BBHDRD         	EQU	0FCFFH
  23:	FD6A'         	BBVOID         	EQU	0FD6AH
  24:	FE92'         	UASTKB         	EQU	0FE92H
  25:	FD6B'         	MMPMAP         	EQU	0FD6BH
  26:	FE0F'         	INTRDI         	EQU	0FE0FH
  27:	FC2D'         	SCONIN         	EQU	0FC2DH
  28:	FC15'         	VCONIN         	EQU	0FC15H
  29:	FCDB'         	BBDIV16        	EQU	0FCDBH
  30:	FCF9'         	BBHDWR         	EQU	0FCF9H
  31:	FD78'         	MMGETP         	EQU	0FD78H
  32:	FDFE'         	INTREN         	EQU	0FDFEH
  33:	FE85'         	RLDROM         	EQU	0FE85H
  34:	FCE1'         	BBMUL16        	EQU	0FCE1H
  35:	FC00'         	SYSCOM         	EQU	0FC00H
  36:	FE90'         	UASTAV         	EQU	0FE90H
  37:	FE19'         	SYTIMR         	EQU	0FE19H
  38:	FC33'         	SCONST         	EQU	0FC33H
  39:	FC1B'         	VCONST         	EQU	0FC1BH
  40:	FE6D'         	SRXRSM         	EQU	0FE6DH
  41:	FE69'         	SRXSTP         	EQU	0FE69H
  42:	FC39'         	BBU0INI        	EQU	0FC39H
  43:	FC51'         	BBU1INI        	EQU	0FC51H
  44:	FC87'         	BBFREAD        	EQU	0FC87H
  45:	FD23'         	BBEIDCK        	EQU	0FD23H
  46:	FD05'         	BBHDGEO        	EQU	0FD05H
  47:	FEC0'         	BBSTACK        	EQU	0FEC0H
  48:	FC81'         	BBFHOME        	EQU	0FC81H
  49:	FD94'         	BBCONIN        	EQU	0FD94H
  50:	FFF0'         	SINTVEC        	EQU	0FFF0H
  51:	FEC0'         	SYSCMLO        	EQU	0FEC0H
  52:	FE22'         	VOIDISR        	EQU	0FE22H
  53:	FC9F'         	BBSTTIM        	EQU	0FC9FH
  54:	FDAA'         	BBCONST        	EQU	0FDAAH
  55:	FC27'         	SCONOUT        	EQU	0FC27H
  56:	FC0F'         	VCONOUT        	EQU	0FC0FH
  57:	FCE7'         	BBOFFCAL       	EQU	0FCE7H
  58:	FC57'         	BBINICTC       	EQU	0FC57H
  59:	FE9C'         	BBSTBASE       	EQU	0FE9CH
  60:	FC5D'         	BBRESCTC       	EQU	0FC5DH
  61:	FCA5'         	BBRDTIME       	EQU	0FCA5H
  62:	FD5A'         	BBCALRET       	EQU	0FD5AH
  63:	FCB7'         	BBDMASET       	EQU	0FCB7H
  64:	FCBD'         	BBDSKSEL       	EQU	0FCBDH
  65:	FCED'         	BBHDINIT       	EQU	0FCEDH
  66:	FCB1'         	BBSECSET       	EQU	0FCB1H
  67:	FD0B'         	BBHDBOOT       	EQU	0FD0BH
  68:	FC69'         	BBUPLCHR       	EQU	0FC69H
  69:	FC99'         	BBPRNCHR       	EQU	0FC99H
  70:	FCC9'         	BBVCPMBT       	EQU	0FCC9H
  71:	FC93'         	BBFLOPIO       	EQU	0FC93H
  72:	FD1D'         	BBEPMNGR       	EQU	0FD1DH
  73:	FCCF'         	BBSIDSET       	EQU	0FCCFH
  74:	FD11'         	BBLDPART       	EQU	0FD11H
  75:	FC75'         	BBRDVDSK       	EQU	0FC75H
  76:	FC8D'         	BBFWRITE       	EQU	0FC8DH
  77:	FCC3'         	BBCPBOOT       	EQU	0FCC3H
  78:	FC21'         	BBCURSET       	EQU	0FC21H
  79:	FCAB'         	BBTRKSET       	EQU	0FCABH
  80:	FC7B'         	BBWRVDSK       	EQU	0FC7BH
  81:	FD9F'         	BBCONOUT       	EQU	0FD9FH
  82:	FCF3'         	BBDRIVEID      	EQU	0FCF3H
  83:	FC63'         	BBPSNDBLK      	EQU	0FC63H
  84:	FC03'         	BBCRTCINI      	EQU	0FC03H
  85:	FC6F'         	BBPRCVBLK      	EQU	0FC6FH
  86:	FC09'         	BBCRTFILL      	EQU	0FC09H
  87:	FCD5'         	BBFDRVSEL      	EQU	0FCD5H
  88:	FD17'         	BBDPRMSET      	EQU	0FD17H
  89:			;****** EOF ***
  90:			
**** common.inc ****
  18:			
  19:	FFFF'         	TRUE	EQU	-1
  20:	0000'         	FALSE	EQU	0
  21:			
  22:			
  23:				; determine if for bank select or not:
  24:	FFFF'         	BANKED	EQU	TRUE		;< ... BANKED VERSION
  25:	0000'         	ZPM3	EQU	FALSE		; ZPM3 build ?
  26:			
  27:				;
  28:				; some other equs...
  29:				;
  30:	000D'         	CR	EQU     0DH		; CARRIAGE RETURN
  31:	000A'         	LF	EQU     0AH		; LINE FEED;
  32:	000C'         	FF	EQU	0CH		; FORM FEED (clear screen)
  33:			
  34:			
  35:			;
  36:			; COMMON.ASM [EOF]
  37:			
**** time.asm ****
  20:			; 	include syshw.inc
  21:			
  22:				PUBLIC	ZDSTIME
  23:			
  24:				EXTRN	@DATE,@HOUR,@MIN,@SEC
  25:				EXTRN	@BIOS$STACK ;,?PMSG
  26:			
  27:	FFFF'         		IF	BANKED
  28:				EXTRN	?BANK
  29:				EXTRN	@CBNK
  30:				ENDIF
  31:			
  32:			
  33:				CSEG				; time must be done from resident memory
  34:			
  35:				; ZDS Clock support. Hardware details behind SYSBIOS
  36:			
  37:	FFFF'         		IF	BANKED
  38:				DSEG				; FOLLOWING GOES TO BANKED MEMORY
  39:				ENDIF
  40:			
  41:	0000"         	DOTIME:
  42:	0000" 79      		LD	A,C			; set time ?
  43:	0001" B7      		OR	A
  44:	0002" C22900  	        JP	NZ,SETTIME
  45:			
  46:	0005" 21FC01  		LD	HL,TIMSTR		; point to the destination time string
  47:	0008" F3      		DI
  48:	0009" CDA5FC  		CALL	BBRDTIME		; read clock
  49:	000C" FB      		EI
  50:	000D" CD4A00  		CALL	CDAYS			; compute number of days
  51:	0010" EB      		EX	DE,HL
  52:	0011" 210000  		LD	HL,@DATE
  53:	0014" 73      		LD	(HL),E			; store date
  54:	0015" 23      		INC	HL
  55:	0016" 72      		LD	(HL),D
  56:	0017" 23      		INC	HL
  57:	0018" 11FE01  		LD	DE,TIMSTR+2		; store time
  58:	001B" 1A      		LD	A,(DE)			; get hours
  59:	001C" CDE200  		CALL	CVHOUR			; convert to 24-hours format as necessary
  60:	001F" 77      		LD	(HL),A			; hours
  61:	0020" 1B      		DEC	DE
  62:	0021" 23      		INC	HL
  63:	0022" 1A      		LD	A,(DE)
  64:	0023" 77      		LD	(HL),A			; minutes
  65:	0024" 1B      		DEC	DE
  66:	0025" 23      		INC	HL
  67:	0026" 1A      		LD	A,(DE)
  68:	0027" 77      		LD	(HL),A			; seconds
  69:	0028" C9      		RET
  70:			
  71:	0029"         	SETTIME:
  72:	0029" 210000  		LD	HL,@DATE		; hl now points to tod buffer
  73:	002C" 5E      		LD	E,(HL)			; first word is the date
  74:	002D" 23      		INC	HL			; (number of days since 1/1/78)
  75:	002E" 56      		LD	D,(HL)
  76:	002F" 23      		INC	HL
  77:	0030" E5      		PUSH	HL
  78:	0031" EB      		EX	DE,HL
  79:	0032" CD7F01  		CALL	GETDATE			; convert date to DS1302 format
  80:	0035" E1      		POP	HL
  81:	0036" 11FE01  		LD	DE,TIMSTR+2
  82:	0039" 7E      		LD	A,(HL)			; hours
  83:	003A" 12      		LD	(DE),A
  84:	003B" 23      		INC	HL
  85:	003C" 1B      		DEC	DE
  86:	003D" 7E      		LD	A,(HL)			; minutes
  87:	003E" 12      		LD	(DE),A
  88:	003F" 23      		INC	HL
  89:	0040" 1B      		DEC	DE
  90:	0041" 7E      		LD	A,(HL)			; seconds
  91:	0042" 12      		LD	(DE),A
  92:	0043" EB      		EX	DE,HL			; hl = timstr
  93:	0044" F3      		DI
  94:	0045" CD9FFC  		CALL	BBSTTIM			; activate and set the clock
  95:	0048" FB      		EI
  96:	0049" C9      		RET
  97:			
  98:			
  99:			; compute number of days since 1/1/78.
 100:			; the algorithm was taken from the mp/m tod program.
 101:			; entry: timstr containing date in DS1302 format (bcd)
 102:			; exit:  hl = number of days
 103:			
 104:	004A" 3A0002  	CDAYS:	LD	A,(TIMSTR+4)		; fetch month
 105:	004D" CDD000  		CALL	BCD2BIN
 106:	0050" 3D      		DEC	A			; month = 0...11
 107:	0051" 87      		ADD	A,A
 108:	0052" 5F      		LD	E,A
 109:	0053" 1600    		LD	D,0
 110:	0055" 21E401  		LD	HL,MDAYS
 111:	0058" 19      		ADD	HL,DE
 112:	0059" 4E      		LD	C,(HL)
 113:	005A" 23      		INC	HL
 114:	005B" 46      		LD	B,(HL)			; onth_days[month]
 115:	005C" 3A0202  		LD	A,(TIMSTR+6)		; fetch year
 116:	005F" CDD000  		CALL	BCD2BIN
 117:	0062" D64E    		SUB	78			; 1978
 118:	0064" 3002    		JR	NC,CD1
 119:	0066" C664    		ADD	A,100			; if year was < 78, consider it as >= 2000
 120:	0068" 116D01  	CD1:	LD	DE,365
 121:	006B" 6F      		LD	L,A
 122:	006C" 62      		LD	H,D
 123:	006D" CD4B01  		CALL	MLTHL
 124:	0070" 65      		LD	H,L
 125:	0071" 2E00    		LD	L,0
 126:	0073" 57      		LD	D,A
 127:	0074" CD5B01  		CALL	MLTDE
 128:	0077" 19      		ADD	HL,DE			; hl = a * 365
 129:	0078" 09      		ADD	HL,BC			; + month_days[month]
 130:	0079" 3AFF01  		LD	A,(TIMSTR+3)		; fetch day
 131:	007C" CDD000  		CALL	BCD2BIN
 132:	007F" 4F      		LD	C,A			; day = 1...29,30, or 31
 133:	0080" 0600    		LD	B,0
 134:	0082" 09      		ADD	HL,BC			; + day
 135:	0083" E5      		PUSH	HL
 136:	0084" 214E00  		LD	HL,78			; 1978
 137:	0087" 110000  		LD	DE,0
 138:	008A" CDB200  		CALL	LEAPDAYS
 139:	008D" EB      		EX	DE,HL
 140:	008E" E1      		POP	HL
 141:	008F" B7      		OR	A
 142:	0090" ED52    		SBC	HL,DE			; - leap_days(78, 0)
 143:	0092" E5      		PUSH	HL
 144:	0093" 3A0202  		LD	A,(TIMSTR+6)		; year
 145:	0096" CDD000  		CALL	BCD2BIN
 146:	0099" FE4E    		CP	78
 147:	009B" 3002    		JR	NC,CD2
 148:	009D" C664    		ADD	A,100
 149:	009F" 6F      	CD2:	LD	L,A
 150:	00A0" 2600    		LD	H,0
 151:	00A2" 3A0002  		LD	A,(TIMSTR+4)		; month
 152:	00A5" CDD000  		CALL	BCD2BIN
 153:	00A8" 3D      		DEC	A			; month = 0...11
 154:	00A9" 5F      		LD	E,A
 155:	00AA" 1600    		LD	D,0
 156:	00AC" CDB200  		CALL	LEAPDAYS
 157:	00AF" D1      		POP	DE
 158:	00B0" 19      		ADD	HL,DE			; + leap_days(year, month)
 159:	00B1" C9      		RET
 160:			
 161:	00B2"         	LEAPDAYS:
 162:	00B2" 2600    		LD	H,0			; just in case... (h should be already 0)
 163:	00B4" 7D      		LD	A,L
 164:	00B5" 0F      		RRCA
 165:	00B6" 0F      		RRCA
 166:	00B7" E63F    		AND	3FH
 167:	00B9" 6F      		LD	L,A			; hl = year / 4
 168:	00BA" E603    		AND	3
 169:	00BC" C0      		RET	NZ
 170:	00BD" E5      		PUSH	HL
 171:	00BE" 21E401  		LD	HL,MDAYS
 172:	00C1" 19      		ADD	HL,DE
 173:	00C2" 19      		ADD	HL,DE
 174:	00C3" 5E      		LD	E,(HL)
 175:	00C4" 23      		INC	HL
 176:	00C5" 56      		LD	D,(HL)			; month_days[month]
 177:	00C6" E1      		POP	HL
 178:	00C7" 7A      		LD	A,D
 179:	00C8" B7      		OR	A
 180:	00C9" C0      		RET	NZ
 181:	00CA" 3E3B    		LD	A,59
 182:	00CC" BA      		CP	D
 183:	00CD" D0      		RET	NC
 184:	00CE" 2B      		DEC	HL
 185:	00CF" C9      		RET
 186:			
 187:			;.....
 188:			; convert 2-digit bcd value to 8-bit binary.
 189:			; entry: a = bcd value
 190:			; exit:  a = binary value
 191:			
 192:	00D0"         	BCD2BIN:
 193:	00D0" D5      		PUSH	DE
 194:	00D1" 57      		LD	D,A
 195:	00D2" E6F0    		AND	0F0H
 196:	00D4" 5F      		LD	E,A
 197:	00D5" 7A      		LD	A,D
 198:	00D6" E60F    		AND	0FH
 199:	00D8" CB3B    		SRL	E
 200:	00DA" 83      		ADD	A,E
 201:	00DB" CB3B    		SRL	E
 202:	00DD" CB3B    		SRL	E
 203:	00DF" 83      		ADD	A,E
 204:	00E0" D1      		POP	DE
 205:	00E1" C9      		RET
 206:			
 207:			;.....
 208:			; convert DS1302 hour byte from 12-hour format to 24.
 209:			; entry: a = hour in DS1302 12-hour or 24-hour format
 210:			; exit:  a = hour in 24-hour bcd format (00..23)
 211:			
 212:	00E2" CB7F    	CVHOUR:	BIT	7,A			; check 12/24-hours bit
 213:	00E4" C8      		RET	Z			; return if already in 24-hour format
 214:	00E5" E67F    		AND	7Fh
 215:	00E7" CB6F    		BIT	5,A			; check am/pm bit
 216:	00E9" C8      		RET	Z			; return if am
 217:	00EA" E61F    		AND	1Fh
 218:	00EC" C612    		ADD	A,12h			; correct if pm
 219:	00EE" FE24    		CP	24h			; hour >= 24?
 220:	00F0" D8      		RET	C			; return if not
 221:	00F1" D624    		SUB	24h			; otherwise correct.
 222:	00F3" C9      		RET
 223:			
 224:			;.....
 225:			; compute day of week from number of days in rem_days
 226:			; entry: hl = rem_days
 227:			; exit:  a = dow (0 = sunday)
 228:			
 229:	00F4" E5      	CDOW:	PUSH	HL
 230:	00F5" 2B      		DEC	HL
 231:	00F6" 1E07    		LD	E,7
 232:	00F8" CDFD00  		CALL	MYDIV16			; day of week = (rem_days - 1) mod 7
 233:	00FB" E1      		POP	HL
 234:	00FC" C9      		RET
 235:			
 236:			;.....
 237:			; divide 16-bit number in hl by 8-bit number in e.
 238:			; returns 16-bit quotient in hl, 8-bit remainder in a.
 239:			
 240:	00FD"         	MYDIV16:
 241:	00FD" 0611    		LD	B,16+1
 242:	00FF" AF      		XOR	A
 243:	0100" 8F      	MYDIV:	ADC	A,A
 244:	0101" 9B      		SBC	A,E
 245:	0102" 3001    		JR	NC,MYDIV0
 246:	0104" 83      		ADD	A,E
 247:	0105" 3F      	MYDIV0:	CCF
 248:	0106" ED6A    		ADC	HL,HL
 249:	0108" 10F6    		DJNZ	MYDIV
 250:	010A" C9      		RET
 251:			
 252:			;.....
 253:			; compute year from number of days in rem_days
 254:			; entry: hl = rem_days
 255:			; exit:  bc = year
 256:			
 257:	010B" 014E00  	CYEAR:	LD	BC,78			; base year
 258:	010E" 116D01  	CY1:	LD	DE,365			; year length
 259:	0111" 79      		LD	A,C
 260:	0112" E603    		AND	3			; leap year?
 261:	0114" 2001    		JR	NZ,CY2
 262:	0116" 13      		INC	DE			; year length = 366
 263:	0117" E5      	CY2:	PUSH	HL
 264:	0118" 1B      		DEC	DE
 265:	0119" B7      		OR	A
 266:	011A" ED52    		SBC	HL,DE			; rem_days - year_length
 267:	011C" 3805    		JR	C,CY3			; return if <= 0
 268:	011E" F1      		POP	AF
 269:	011F" 2B      		DEC	HL
 270:	0120" 03      		INC	BC			; year++
 271:	0121" 18EB    		JR	CY1
 272:	0123" E1      	CY3:	POP	HL
 273:	0124" C9      		RET
 274:			
 275:			;.....
 276:			; compute month
 277:			; entry: hl = rem_days, c = leap_bias
 278:			; exit:  de = month, c = leap_bias
 279:			
 280:	0125" E5      	CMONTH:	PUSH	HL
 281:	0126" 110B00  		LD	DE,11			; e = month, d = 0
 282:	0129" 42      		LD	B,D			; b = 0
 283:	012A" 7B      	CM1:	LD	A,E
 284:	012B" FE02    		CP	2			; if month < 2 (jan or feb)
 285:	012D" 3002    		JR	NC,CM2
 286:	012F" 0E00    		LD	C,0			; ..leap_bias = 0
 287:	0131" 21E401  	CM2:	LD	HL,MDAYS
 288:	0134" 19      		ADD	HL,DE
 289:	0135" 19      		ADD	HL,DE
 290:	0136" 7E      		LD	A,(HL)
 291:	0137" 23      		INC	HL
 292:	0138" 66      		LD	H,(HL)
 293:	0139" 6F      		LD	L,A			; hl = month_days[month]
 294:	013A" 09      		ADD	HL,BC			; month_days[month] + leap_bias
 295:	013B" EB      		EX	DE,HL
 296:	013C" E3      		EX	(SP),HL			; hl = word value
 297:	013D" 7B      		LD	A,E
 298:	013E" 95      		SUB	L
 299:	013F" 7A      		LD	A,D
 300:	0140" 9C      		SBC	A,H
 301:	0141" E3      		EX	(SP),HL
 302:	0142" EB      		EX	DE,HL
 303:	0143" 3804    		JR	C,CM3
 304:	0145" 1D      		DEC	E
 305:	0146" F22A01  		JP	P,CM1
 306:	0149" E1      	CM3:	POP	HL
 307:	014A" C9      		RET
 308:			
 309:	014B"         	MLTHL:
 310:	014B" F5      		PUSH	AF
 311:	014C" C5      		PUSH	BC
 312:	014D" D5      		PUSH	DE
 313:	014E" 5D      		LD	E,L
 314:	014F" 1600    		LD	D,0
 315:	0151" 4C      		LD	C,H
 316:	0152" 0600    		LD	B,0
 317:	0154" CD6C01  		CALL	MUL16
 318:	0157" D1      		POP	DE
 319:	0158" C1      		POP	BC
 320:	0159" F1      		POP	AF
 321:	015A" C9      		RET
 322:			
 323:	015B"         	MLTDE:
 324:	015B" F5      		PUSH	AF
 325:	015C" C5      		PUSH	BC
 326:	015D" E5      		PUSH	HL
 327:	015E" 7A      		LD	A,D
 328:	015F" 1600    		LD	D,0
 329:	0161" 4F      		LD	C,A
 330:	0162" 0600    		LD	B,0
 331:	0164" CD6C01  		CALL	MUL16
 332:	0167" EB      		EX	DE,HL
 333:	0168" E1      		POP	HL
 334:	0169" C1      		POP	BC
 335:	016A" F1      		POP	AF
 336:	016B" C9      		RET
 337:			
 338:			;
 339:			;;	mul16 - 16x16 bit multiplication
 340:			;;
 341:			;; 	in  de = multiplicand
 342:			;;	    bc = multiplier
 343:			;;	out de = result
 344:	016C" 79      	MUL16:	LD	A,C			; A = low mpler
 345:	016D" 48      		LD	C,B			; C = high mpler
 346:	016E" 0610    		LD	B,16			; counter
 347:	0170" 210000  		LD	HL,0
 348:	0173" CB39    	ML1601:	SRL	C			; right shift mpr high
 349:	0175" 1F      		RRA				; rot. right mpr low
 350:	0176" 3001    		JR	NC,ML1602		; test carry
 351:	0178" 19      		ADD	HL,DE			; add mpd to result
 352:	0179" EB      	ML1602:	EX	DE,HL
 353:	017A" 29      		ADD	HL,HL			; double shift mpd
 354:	017B" EB      		EX	DE,HL
 355:	017C" 10F5    		DJNZ	ML1601
 356:	017E" C9      		RET
 357:			
 358:			;.....
 359:			; convert mp/m time-of-day value to DS1302 format.
 360:			; entry: hl = tod (number of days since 1/1/78)
 361:			; exit:  timstr buffer updated accordingly.
 362:			
 363:	017F"         	GETDATE:
 364:	017F" CDF400  		CALL	CDOW			; compute day of week
 365:	0182" 3C      		INC	A			; base 1
 366:	0183" 320102  		LD	(TIMSTR+5),A
 367:	0186" E1      		POP	HL
 368:	0187" CD0B01  		CALL	CYEAR			; compute year, returns rem_days remainder
 369:	018A" 79      		LD	A,C
 370:	018B" FE64    		CP	100			; above year 2000?
 371:	018D" 3802    		JR	C,GD0
 372:	018F" D664    		SUB	100			; correct if yes
 373:	0191" CDCF01  	GD0:	CALL	BIN2BCD			; convert to bcd
 374:	0194" 320202  		LD	(TIMSTR+6),A
 375:	0197" 1E00    		LD	E,0			; leap_bias = 0
 376:	0199" 79      		LD	A,C
 377:	019A" E603    		AND	3			; (year & 3) == 0 ?
 378:	019C" 2009    		JR	NZ,GD1
 379:	019E" 7D      		LD	A,L
 380:	019F" D63C    		SUB	59+1			; ..and (rem_days > 59) ?
 381:	01A1" 7C      		LD	A,H
 382:	01A2" DE00    		SBC	A,0
 383:	01A4" 3801    		JR	C,GD1
 384:	01A6" 1C      		INC	E			; ..then leap_bias = 1;
 385:	01A7" 4B      	GD1:	LD	C,E
 386:	01A8" CD2501  		CALL	CMONTH			; compute month
 387:	01AB" D5      		PUSH	DE
 388:	01AC" E5      		PUSH	HL
 389:	01AD" 21E401  		LD	HL,MDAYS
 390:	01B0" 19      		ADD	HL,DE
 391:	01B1" 19      		ADD	HL,DE
 392:	01B2" 7E      		LD	A,(HL)
 393:	01B3" 23      		INC	HL
 394:	01B4" 66      		LD	H,(HL)
 395:	01B5" 6F      		LD	L,A			; hl = month_days[month]
 396:	01B6" 0600    		LD	B,0
 397:	01B8" 09      		ADD	HL,BC			; + leap_bias;
 398:	01B9" EB      		EX	DE,HL
 399:	01BA" E1      		POP	HL
 400:	01BB" B7      		OR	A
 401:	01BC" ED52    		SBC	HL,DE			; day = rem_days - hl;
 402:	01BE" 7D      		LD	A,L
 403:	01BF" CDCF01  		CALL	BIN2BCD
 404:	01C2" 32FF01  		LD	(TIMSTR+3),A
 405:	01C5" D1      		POP	DE
 406:	01C6" 13      		INC	DE			; month++
 407:	01C7" 7B      		LD	A,E
 408:	01C8" CDCF01  		CALL	BIN2BCD
 409:	01CB" 320002  		LD	(TIMSTR+4),A
 410:	01CE" C9      		RET
 411:			
 412:			;.....
 413:			; convert 8-bit binary value to 2-digit bcd.
 414:			; entry: a = binary value
 415:			; exit:  a = bcd value
 416:			
 417:	01CF"         	BIN2BCD:
 418:	01CF" C5      		PUSH	BC
 419:	01D0" 060A    		LD	B,10
 420:	01D2" 0EFF    		LD	C,-1
 421:	01D4" 0C      	AD1:	INC	C
 422:	01D5" 90      		SUB	B
 423:	01D6" 30FC    		JR	NC,AD1
 424:	01D8" 80      		ADD	A,B
 425:	01D9" CB21    		SLA	C
 426:	01DB" CB21    		SLA	C
 427:	01DD" CB21    		SLA	C
 428:	01DF" CB21    		SLA	C
 429:	01E1" B1      		OR	C
 430:	01E2" C1      		POP	BC
 431:	01E3" C9      		RET
 432:			
 433:			
 434:	01E4"         	MDAYS:
 435:			;		jan feb mar apr may jun jul aug sep oct nov dec
 436:	01E4" 00001F00		DW	000,031,059,090,120,151,181,212,243,273,304,334
	      3B005A00
	      78009700
	      B500D400
	      F3001101
	      30014E01
 437:			
 438:	01FC"         	TIMSTR:
 439:	01FC" 00000000		DB	0,0,0,0,0,0,0,0		; string for reading/setting date/time
	      00000000
 440:			
 441:	0204"         	ZDSTIME:
 442:	0204" E5      		PUSH	HL
 443:	0205" D5      		PUSH	DE
 444:			
 445:	0206" ED732402		LD	(SPSAVE),SP
 446:	020A" 310000  		LD	SP,@BIOS$STACK		; switch to a local stack
 447:			
 448:	FFFF"         		IF	BANKED
 449:	020D" 3A0000  		LD	A,(@CBNK)
 450:	0210" F5      		PUSH	AF			; save current bank number
 451:	0211" 3E00    		LD	A,0
 452:	0213" CD0000  		CALL	?BANK
 453:				ENDIF
 454:			
 455:	0216" CD0000  		CALL	DOTIME
 456:			
 457:	FFFF"         		IF	BANKED
 458:	0219" F1      		POP	AF
 459:	021A" CD0000  		CALL	?BANK			; restore caller's bank
 460:				ENDIF
 461:			
 462:	021D" ED7B2402		LD	SP,(SPSAVE)
 463:	0221" D1      		POP	DE
 464:	0222" E1      		POP	HL
 465:	0223" C9      		RET
 466:			
 467:	0224" 0000    	SPSAVE: DW	0
 468:			
 469:	0226"         		END



Statistics:

     4	passes
     0	jr promotions
   133	symbols
     0	bytes



Symbol Table:

?bank              0      (extern)
@bios$stack        0      (extern)
@cbnk              0      (extern)
@date              0      (extern)
@hour              0      (extern)
@min               0      (extern)
@sec               0      (extern)
ad1              1d4"    
banked         =ffffffff 
bbcalret       =fd5a     
bbconin        =fd94     
bbconout       =fd9f     
bbconst        =fdaa     
bbcpboot       =fcc3     
bbcrtcini      =fc03     
bbcrtfill      =fc09     
bbcurset       =fc21     
bbdiv16        =fcdb     
bbdmaset       =fcb7     
bbdprmset      =fd17     
bbdriveid      =fcf3     
bbdsksel       =fcbd     
bbeidck        =fd23     
bbepmngr       =fd1d     
bbexec         =fd29     
bbfdrvsel      =fcd5     
bbfhome        =fc81     
bbflopio       =fc93     
bbfread        =fc87     
bbfwrite       =fc8d     
bbhdboot       =fd0b     
bbhdgeo        =fd05     
bbhdinit       =fced     
bbhdrd         =fcff     
bbhdwr         =fcf9     
bbinictc       =fc57     
bbldpart       =fd11     
bbmul16        =fce1     
bboffcal       =fce7     
bbprcvblk      =fc6f     
bbprnchr       =fc99     
bbpsndblk      =fc63     
bbrdtime       =fca5     
bbrdvdsk       =fc75     
bbresctc       =fc5d     
bbsecset       =fcb1     
bbsidset       =fccf     
bbstack        =fec0     
bbstbase       =fe9c     
bbsttim        =fc9f     
bbtrkset       =fcab     
bbu0ini        =fc39     
bbu1ini        =fc51     
bbu1rx         =fc45     
bbu1st         =fc4b     
bbu1tx         =fc3f     
bbuplchr       =fc69     
bbvcpmbt       =fcc9     
bbvoid         =fd6a     
bbwrvdsk       =fc7b     
bcd2bin           d0"    
bin2bcd          1cf"    
cd1               68"    
cd2               9f"    
cdays             4a"    
cdow              f4"    
cm1              12a"    
cm2              131"    
cm3              149"    
cmonth           125"    
cr             =   d     
cvhour            e2"    
cy1              10e"    
cy2              117"    
cy3              123"    
cyear            10b"    
delay          =fd85     
dly1           =fd89     
dly2           =fd87     
dostx          =fe6f     
dotime             0"    
false          =   0     
ff             =   c     
fin            =fdc4     
fout           =fde1     
fstat          =fdb5     
gd0              191"    
gd1              1a7"    
getdate          17f"    
intrdi         =fe0f     
intren         =fdfe     
leapdays          b2"    
lf             =   a     
mdays            1e4"    
ml1601           173"    
ml1602           179"    
mltde            15b"    
mlthl            14b"    
mmgetp         =fd78     
mmpmap         =fd6b     
mul16            16c"    
mydiv            100"    
mydiv0           105"    
mydiv16           fd"    
rldrom         =fe85     
sconin         =fc2d     
sconout        =fc27     
sconst         =fc33     
settime           29"    
sintvec        =fff0     
spsave           224"    
srxrsm         =fe6d     
srxstp         =fe69     
syscmlo        =fec0     
syscom         =fc00     
sytimr         =fe19     
timstr           1fc"    
true           =ffffffff 
tx0            =fe77     
tx01           =fe79     
u0isr          =fe25     
u1isr          =fe5b     
u1nul          =fe65     
uastav         =fe90     
uastkb         =fe92     
uisre          =fe50     
uisri          =fe35     
vconin         =fc15     
vconout        =fc0f     
vconst         =fc1b     
voidisr        =fe22     
zdstime          204"     (public)
zpm3           =   0     
