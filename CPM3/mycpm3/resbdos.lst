   1:			
   2:			
   3:				TITLE	'CP/M 3 Banked BDOS Resident Module, Dec 1982'
   4:			;***************************************************************
   5:			;***************************************************************
   6:			;**                                                           **
   7:			;**   B a s i c    D i s k   O p e r a t i n g   S y s t e m  **
   8:			;**                                                           **
   9:			;**   R e s i d e n t   M o d u l e  -  B a n k e d  B D O S  **
  10:			;**                                                           **
  11:			;***************************************************************
  12:			;***************************************************************
  13:			
  14:			;/*
  15:			;  Copyright (C) 1978,1979,1980,1981,1982
  16:			;  Digital Research
  17:			;  P.O. Box 579
  18:			;  Pacific Grove, CA 93950
  19:			;
  20:			;  December, 1982
  21:			;
  22:			;*/
  23:			;
  24:			
  25:			;
  26:			; [JCE] Have the date and copyright messages in only one source file
  27:			;
  28:			@BDATE	MACRO
  29:				DEFB	'101198'
  30:				ENDM
  31:			
  32:			@LCOPY	MACRO
  33:				DEFB	'Copyright 1998, '
  34:				DEFB	'Caldera, Inc.   '
  35:				ENDM
  36:			
  37:			@SCOPY	MACRO
  38:				DEFB	'(c) 98 Caldera'
  39:				ENDM
  40:			;
  41:			;
  42:	001E'         	SSIZE	EQU	30
  43:	000C'         	DISKFX	EQU	12
  44:	0002'         	CONOUTFXX EQU	2
  45:	0009'         	PRINTFX EQU	9
  46:	000B'         	CONSTATFX EQU	11
  47:	001A'         	SETDMAFX EQU	26
  48:	002F'         	CHAINFX EQU	47
  49:	0003'         	IOLOC	EQU	3
  50:			
  51:			; 	ORG	0000H
  52:	0000'         	BASE	EQU	$
  53:			
  54:	FC00'         	BNKBDOS$PG EQU	BASE+0FC00H
  55:	FD00'         	RESBDOS$PG EQU	BASE+0FD00H
  56:	FE00'         	SCB$PG	EQU	BASE+0FE00H
  57:	FF00'         	BIOS$PG EQU	BASE+0FF00H
  58:			
  59:	FC06'         	BNKBDOS EQU	BNKBDOS$PG+6
  60:	FC7C'         	ERROR$JMP EQU	BNKBDOS$PG+7CH
  61:			
  62:	FF00'         	BIOS	EQU	BIOS$PG
  63:	FF00'         	BOOTF	EQU	BIOS$PG		; 00. cold boot function
  64:	FF03'         	WBOOTF	EQU	BIOS$PG+3	; 01. warm boot function
  65:	FF06'         	CONSTF	EQU	BIOS$PG+6	; 02. console status function
  66:	FF09'         	CONINF	EQU	BIOS$PG+9	; 03. console input function
  67:	FF0C'         	CONOUTF EQU	BIOS$PG+12	; 04. console output function
  68:	FF0F'         	LISTF	EQU	BIOS$PG+15	; 05. list output function
  69:	FF12'         	PUNCHF	EQU	BIOS$PG+18	; 06. punch output function
  70:	FF15'         	READERF EQU	BIOS$PG+21	; 07. reader input function
  71:	FF18'         	HOMEF	EQU	BIOS$PG+24	; 08. disk home function
  72:	FF1B'         	SELDSKF EQU	BIOS$PG+27	; 09. select disk function
  73:	FF1E'         	SETTRKF EQU	BIOS$PG+30	; 10. set track function
  74:	FF21'         	SETSECF EQU	BIOS$PG+33	; 11. set sector function
  75:	FF24'         	SETDMAF EQU	BIOS$PG+36	; 12. set dma function
  76:	FF27'         	READF	EQU	BIOS$PG+39	; 13. read disk function
  77:	FF2A'         	WRITEF	EQU	BIOS$PG+42	; 14. write disk function
  78:	FF2D'         	LISTSTF EQU	BIOS$PG+45	; 15. list status function
  79:	FF30'         	SECTRAN EQU	BIOS$PG+48	; 16. sector translate
  80:	FF33'         	CONOUTSTF EQU	BIOS$PG+51	; 17. console output status function
  81:	FF36'         	AUXINSTF EQU	BIOS$PG+54	; 18. aux input status function
  82:	FF39'         	AUXOUTSTF EQU	BIOS$PG+57	; 19. aux output status function
  83:	FF3C'         	DEVTBLF EQU	BIOS$PG+60	; 20. return device table address fx
  84:	FF3F'         	DEVINITF EQU	BIOS$PG+63	; 21. initialize device function
  85:	FF42'         	DRVTBLF EQU	BIOS$PG+66	; 22. return drive table address
  86:	FF45'         	MULTIOF EQU	BIOS$PG+69	; 23. multiple i/o function
  87:	FF48'         	FLUSHF	EQU	BIOS$PG+72	; 24. flush function
  88:	FF4B'         	MOVEF	EQU	BIOS$PG+75	; 25. memory move function
  89:	FF4E'         	TIMEF	EQU	BIOS$PG+78	; 26. get/set system time function
  90:	FF51'         	SELMEMF EQU	BIOS$PG+81	; 27. select memory function
  91:	FF54'         	SETBNKF EQU	BIOS$PG+84	; 28. set dma bank function
  92:	FF4E'         	XMOVEF	EQU	BIOS$PG+78	; 29. extended move function
  93:			
  94:	FF0C'         	SCONOUTF EQU	CONOUTF		; 31. escape sequence decoded conout
  95:	FFFF'         	SCREENF EQU	0FFFFH		; 32. screen function
  96:			
  97:	0000' 36353433	SERIAL:	DEFB	'654321'
	      3231
  98:			
  99:	0006' C32400  		JP	BDOS
 100:	0009' C3E402  		JP	MOVE$OUT	;A = bank #
 101:				;HL = dest, DE = srce
 102:	000C' C3F202  		JP	MOVE$TPA	;A = bank #
 103:				;HL = dest, DE = srce
 104:	000F' C3FA02  		JP	SEARCH$HASH	;A = bank #
 105:				;HL = hash table address
 106:			
 107:				; on return, Z flag set for eligible DCNTs
 108:				;	     Z flag reset implies unsuccessful search
 109:			
 110:				; Additional variables referenced directly by bnkbdos
 111:			
 112:	0012' 0000    	HASHMX:		DEFW	0	;max hash search dcnt
 113:	0014' 00      	RD$DIR:		DEFB	0	;read directory flag
 114:	0015' 00      	MAKE$XFCB: 	DEFB	0	;Make XFCB flag
 115:	0016' 00      	FIND$XFCB: 	DEFB	0	;Search XFCB flag
 116:	0017' 0000    	XDCNT:		DEFW	0	;current xdcnt
 117:			
 118:	0019' 4E04    	XDMAADD:	DEFW	COMMON$DMA
 119:	001B' 0000    	CURDMA:		DEFW	0
 120:	001D' 00      	COPY$CR$ONLY: 	DEFB	0
 121:	001E' 0000    	USER$INFO: 	DEFW	0
 122:	0020' 00      	KBCHAR:		DEFB	0
 123:	0021' C37701  		JP	QCONINX
 124:			
 125:	0024'         	BDOS:	;arrive here from user programs
 126:	0024' 79      		LD	A,C		; c = BDOS function #
 127:			
 128:				;switch to local stack
 129:			
 130:	0025' 210000  		LD	HL,0
 131:	0028' 222804  		LD	(ARET),HL
 132:	002B' 39      		ADD	HL,SP
 133:	002C' 226605  		LD	(ENTSP),HL	; save stack pointer
 134:	002F' 316605  		LD	SP,LSTACK
 135:	0032' 21CB02  		LD	HL,GOBACK
 136:	0035' E5      		PUSH	HL
 137:			
 138:	0036' FE0C    		CP	DISKFX
 139:	0038' D29401  		JP	NC,DISK$FUNC
 140:			
 141:	003B' 32DF05  		LD	(FX),A		;[JCE] DRI patch 1
 142:			
 143:	003E' 218600  		LD	HL,FUNCTAB
 144:	0041' 0600    		LD	B,0
 145:	0043' 09      		ADD	HL,BC
 146:	0044' 09      		ADD	HL,BC
 147:	0045' 7E      		LD	A,(HL)
 148:	0046' 23      		INC	HL
 149:	0047' 66      		LD	H,(HL)
 150:	0048' 6F      		LD	L,A
 151:	0049' E9      		JP	(HL)
 152:			
 153:	004A'         		@LCOPY
 153:	004A' 636F7079		defb	'copyright 1998, '
	      72696768
	      74203139
	      39382C20
 153:	005A' 63616C64		defb	'caldera, inc.   '
	      6572612C
	      20696E63
	      2E202020
 153:	006A'         		endm
 153:			
 154:	006A'         		@BDATE
 154:	006A' 31303131		defb	'101198'
	      3938
 154:	0070'         		endm
 154:			
 155:	0070' 00000000		DEFW	0,0,0,0,0,0,0,0,0,0,0
	      00000000
	      00000000
	      00000000
	      00000000
	      0000
 156:			
 157:	0086'         	FUNCTAB:
 158:	0086' 03FFD502		DEFW	WBOOTF, BANK$BDOS, BANK$BDOS, FUNC3
	      D5029E00
 159:	008E' A400A800		DEFW	FUNC4, FUNC5, FUNC6, FUNC7
	      AC00E300
 160:	0096' E900EF00		DEFW	FUNC8, FUNC9, FUNC10, BANK$BDOS
	      0101D502
 161:			
 162:	009E'         	FUNC3:
 163:	009E' CD15FF  		CALL	READERF
 164:	00A1' C3C802  		JP	STA$RET
 165:			
 166:	00A4'         	FUNC4:
 167:	00A4' 4B      		LD	C,E
 168:	00A5' C312FF  		JP	PUNCHF
 169:			
 170:	00A8'         	FUNC5:
 171:	00A8' 4B      		LD	C,E
 172:	00A9' C30FFF  		JP	LISTF
 173:			
 174:	00AC'         	FUNC6:
 175:	00AC' 7B      		LD	A,E
 176:	00AD' 3C      		INC	A
 177:	00AE' CAC300  		JP	Z,DIRINP	;0ffh -> cond. input
 178:	00B1' 3C      		INC	A
 179:	00B2' CABD00  		JP	Z,DIRSTAT	;0feh -> status
 180:	00B5' 3C      		INC	A
 181:	00B6' CAC800  		JP	Z,DIRINP1	;0fdh -> input
 182:	00B9' 4B      		LD	C,E
 183:	00BA' C30CFF  		JP	CONOUTF		;	 output
 184:	00BD'         	DIRSTAT:
 185:	00BD' CDCE00  		CALL	CONSTX
 186:	00C0' C3C802  		JP	STA$RET
 187:	00C3'         	DIRINP:
 188:	00C3' CDCE00  		CALL	CONSTX
 189:	00C6' B7      		OR	A
 190:	00C7' C8      		RET	Z
 191:	00C8'         	DIRINP1:
 192:	00C8' CDD800  		CALL	CONIN
 193:	00CB' C3C802  		JP	STA$RET
 194:			
 195:	00CE'         	CONSTX:
 196:	00CE' 3A2000  		LD	A,(KBCHAR)
 197:	00D1' B7      		OR	A
 198:	00D2' 3EFF    		LD	A,0FFH
 199:	00D4' C0      		RET	NZ
 200:	00D5' C306FF  		JP	CONSTF
 201:			
 202:	00D8'         	CONIN:
 203:	00D8' 212000  		LD	HL,KBCHAR
 204:	00DB' 7E      		LD	A,(HL)
 205:	00DC' 3600    		LD	(HL),0
 206:	00DE' B7      		OR	A
 207:	00DF' C0      		RET	NZ
 208:	00E0' C309FF  		JP	CONINF
 209:			
 210:	00E3'         	FUNC7:
 211:	00E3' CD36FF  		CALL	AUXINSTF
 212:	00E6' C3C802  		JP	STA$RET
 213:			
 214:	00E9'         	FUNC8:
 215:	00E9' CD39FF  		CALL	AUXOUTSTF
 216:	00EC' C3C802  		JP	STA$RET
 217:			
 218:	00EF'         	FUNC9:
 219:	00EF' 42      		LD	B,D
 220:	00F0' 4B      		LD	C,E
 221:	00F1'         	PRINT:
 222:	00F1' 21D305  		LD	HL,OUTDELIM
 223:	00F4' 0A      		LD	A,(BC)
 224:	00F5' BE      		CP	(HL)
 225:	00F6' C8      		RET	Z
 226:	00F7' 03      		INC	BC
 227:	00F8' C5      		PUSH	BC
 228:	00F9' 4F      		LD	C,A
 229:	00FA' CD5301  		CALL	BLK$OUT0
 230:	00FD' C1      		POP	BC
 231:	00FE' C3F100  		JP	PRINT
 232:			
 233:	0101'         	FUNC10:
 234:	0101' EB      		EX	DE,HL
 235:	0102' 7D      		LD	A,L
 236:	0103' B4      		OR	H
 237:	0104' C21001  		JP	NZ,FUNC10A
 238:	0107' 212C04  		LD	HL,BUFFER+2
 239:	010A' 22BA05  		LD	(CONBUFFADD),HL
 240:	010D' 2AD805  		LD	HL,(DMAAD)
 241:	0110'         	FUNC10A:
 242:	0110' E5      		PUSH	HL
 243:	0111' 112A04  		LD	DE,BUFFER
 244:	0114' D5      		PUSH	DE
 245:	0115' 0600    		LD	B,0
 246:	0117' 4E      		LD	C,(HL)
 247:	0118' 03      		INC	BC
 248:	0119' 03      		INC	BC
 249:	011A' 03      		INC	BC
 250:	011B' EB      		EX	DE,HL
 251:	011C' CD4BFF  		CALL	MOVEF
 252:	011F' 3600    		LD	(HL),0
 253:	0121' D1      		POP	DE
 254:	0122' D5      		PUSH	DE
 255:	0123' 0E0A    		LD	C,10
 256:	0125' CDD502  		CALL	BANK$BDOS
 257:	0128' 3A2B04  		LD	A,(BUFFER+1)
 258:	012B' 4F      		LD	C,A
 259:	012C' 0600    		LD	B,0
 260:	012E' 03      		INC	BC
 261:	012F' 03      		INC	BC
 262:	0130' D1      		POP	DE
 263:	0131' E1      		POP	HL
 264:	0132' C34BFF  		JP	MOVEF
 265:			
 266:	0135'         	FUNC111:
 267:	0135'         	FUNC112:
 268:	0135' 322404  		LD	(RES$FX),A
 269:	0138' EB      		EX	DE,HL
 270:	0139' 5E      		LD	E,(HL)
 271:	013A' 23      		INC	HL
 272:	013B' 56      		LD	D,(HL)
 273:	013C' 23      		INC	HL
 274:	013D' 4E      		LD	C,(HL)
 275:	013E' 23      		INC	HL
 276:	013F' 46      		LD	B,(HL)
 277:	0140' EB      		EX	DE,HL
 278:				; hl = addr of string
 279:				; bc = length of string
 280:	0141'         	BLK$OUT:
 281:	0141' 78      		LD	A,B
 282:	0142' B1      		OR	C
 283:	0143' C8      		RET	Z
 284:	0144' C5      		PUSH	BC
 285:	0145' E5      		PUSH	HL
 286:	0146' 4E      		LD	C,(HL)
 287:	0147' 117001  		LD	DE,BLK$OUT2
 288:	014A' D5      		PUSH	DE
 289:	014B' 3A2404  		LD	A,(RES$FX)
 290:	014E' FE70    		CP	112
 291:	0150' CA0FFF  		JP	Z,LISTF
 292:			
 293:	0153'         	BLK$OUT0:
 294:	0153' 3ACF05  		LD	A,(CONMODE)
 295:	0156' 47      		LD	B,A
 296:	0157' E602    		AND	2
 297:	0159' CA6A01  		JP	Z,BLK$OUT1
 298:	015C' 78      		LD	A,B
 299:	015D' E614    		AND	14H
 300:	015F' CA6A01  		JP	Z,BLK$OUT1
 301:	0162' E610    		AND	10H
 302:	0164' C20CFF  		JP	NZ,SCONOUTF
 303:	0167' C30CFF  		JP	CONOUTF
 304:			
 305:	016A'         	BLK$OUT1:
 306:	016A' 59      		LD	E,C
 307:	016B' 0E02    		LD	C,CONOUTFXX
 308:	016D' C3D502  		JP	BANK$BDOS
 309:			
 310:	0170'         	BLK$OUT2:
 311:	0170' E1      		POP	HL
 312:	0171' 23      		INC	HL
 313:	0172' C1      		POP	BC
 314:	0173' 0B      		DEC	BC
 315:	0174' C34101  		JP	BLK$OUT
 316:			
 317:	0177'         	QCONINX:
 318:				; switch to bank 1
 319:	0177' 3E01    		LD	A,1
 320:	0179' CD51FF  		CALL	SELMEMF
 321:				; get character
 322:	017C' 46      		LD	B,(HL)
 323:				; return to bank zero
 324:	017D' AF      		XOR	A
 325:	017E' CD51FF  		CALL	SELMEMF
 326:				; return with character in A
 327:	0181' 78      		LD	A,B
 328:	0182' C9      		RET
 329:			
 330:	0183'         	SWITCH1:
 331:	0183' 118D01  		LD	DE,SWITCH0
 332:	0186' D5      		PUSH	DE
 333:	0187' 3E01    		LD	A,1
 334:	0189' CD51FF  		CALL	SELMEMF
 335:	018C' E9      		JP	(HL)
 336:	018D'         	SWITCH0:
 337:	018D' 47      		LD	B,A
 338:	018E' AF      		XOR	A
 339:	018F' CD51FF  		CALL	SELMEMF
 340:	0192' 78      		LD	A,B
 341:	0193' C9      		RET
 342:			
 343:	0194'         	DISK$FUNC:
 344:	0194' FE33    		CP	NDF
 345:	0196' DAB001  		JP	C,OKDF		;func < ndf
 346:	0199' FE62    		CP	98
 347:	019B' DABC02  		JP	C,BADFUNC	;ndf < func < 98
 348:	019E' FE71    		CP	NXDF
 349:	01A0' D2BC02  		JP	NC,BADFUNC	;func >= nxdf
 350:	01A3' FE6F    		CP	111
 351:	01A5' CA3501  		JP	Z,FUNC111
 352:	01A8' FE70    		CP	112
 353:	01AA' CA3501  		JP	Z,FUNC112
 354:	01AD' C3CF01  		JP	DISK$FUNCTION
 355:			
 356:	01B0'         	OKDF:
 357:	01B0' FE11    		CP	17
 358:	01B2' CAC701  		JP	Z,SEARCH
 359:	01B5' FE12    		CP	18
 360:	01B7' CACB01  		JP	Z,SEARCHN
 361:	01BA' FE1A    		CP	SETDMAFX
 362:	01BC' C2CF01  		JP	NZ,DISK$FUNCTION
 363:			
 364:				; Set dma addr
 365:	01BF' EB      		EX	DE,HL
 366:	01C0' 22D805  		LD	(DMAAD),HL
 367:	01C3' 221B00  		LD	(CURDMA),HL
 368:	01C6' C9      		RET
 369:			
 370:	01C7'         	SEARCH:
 371:	01C7' EB      		EX	DE,HL
 372:	01C8' 22E305  		LD	(SEARCHA),HL
 373:			
 374:	01CB'         	SEARCHN:
 375:	01CB' 2AE305  		LD	HL,(SEARCHA)
 376:	01CE' EB      		EX	DE,HL
 377:			
 378:	01CF'         	DISK$FUNCTION:
 379:			
 380:			;
 381:			;	Perform the required buffer tranfers from
 382:			;	the user bank to common memory
 383:			;
 384:			
 385:	01CF' 21E203  		LD	HL,DFCTBL-12
 386:	01D2' 79      		LD	A,C
 387:	01D3' FE62    		CP	98
 388:	01D5' DADB01  		JP	C,NORMALCPM
 389:	01D8' 21B303  		LD	HL,XDFCTBL-98
 390:	01DB'         	NORMALCPM:
 391:	01DB' 0600    		LD	B,0
 392:	01DD' 09      		ADD	HL,BC
 393:	01DE' 7E      		LD	A,(HL)
 394:			
 395:			; ****  SAVE DFTBL ITEM, INFO, & FUNCTION *****
 396:			
 397:	01DF' 47      		LD	B,A
 398:	01E0' C5      		PUSH	BC
 399:	01E1' D5      		PUSH	DE
 400:			
 401:	01E2' 1F      		RRA
 402:	01E3' DAED01  		JP	C,CPYCDMAIN	;cdmain test
 403:	01E6' 1F      		RRA
 404:	01E7' DAFC01  		JP	C,CPYFCBIN	;fcbin test
 405:	01EA' C31302  		JP	NOCPYIN
 406:			
 407:	01ED'         	CPYCDMAIN:
 408:	01ED' 2AD805  		LD	HL,(DMAAD)
 409:	01F0' EB      		EX	DE,HL
 410:	01F1' 214E04  		LD	HL,COMMON$DMA
 411:	01F4' 011000  		LD	BC,16
 412:	01F7' CD4BFF  		CALL	MOVEF
 413:	01FA' D1      		POP	DE
 414:	01FB' D5      		PUSH	DE
 415:			
 416:	01FC'         	CPYFCBIN:
 417:	01FC' AF      		XOR	A
 418:	01FD' 321D00  		LD	(COPY$CR$ONLY),A
 419:	0200' 212A04  		LD	HL,COMMONFCB
 420:	0203' 012400  		LD	BC,36
 421:	0206' CD4BFF  		CALL	MOVEF
 422:	0209' 112A04  		LD	DE,COMMONFCB
 423:	020C' E1      		POP	HL
 424:	020D' C1      		POP	BC
 425:	020E' C5      		PUSH	BC
 426:	020F' E5      		PUSH	HL
 427:	0210' 221E00  		LD	(USER$INFO),HL
 428:			
 429:	0213'         	NOCPYIN:
 430:			
 431:	0213' CDD502  		CALL	BANK$BDOS
 432:			
 433:	0216' D1      		POP	DE		;restore FCB address
 434:	0217' C1      		POP	BC
 435:	0218' 78      		LD	A,B		;restore fcbtbl byte & function #
 436:	0219' E6FC    		AND	0FCH
 437:	021B' C8      		RET	Z		;[JCE] DRI Patch 13: F8 -> FC
 438:	021C' 212A04  		LD	HL,COMMONFCB
 439:	021F' EB      		EX	DE,HL
 440:	0220' 012100  		LD	BC,33
 441:	0223' 17      		RLA
 442:	0224' DA4002  		JP	C,COPY$FCB$BACK	;fcbout test
 443:	0227' 0E24    		LD	C,36
 444:	0229' 17      		RLA
 445:	022A' DA4002  		JP	C,COPY$FCB$BACK	;pfcbout test
 446:	022D' 17      		RLA
 447:	022E' DA6802  		JP	C,CDMACPYOUT128	;cdmaout128 test
 448:	0231' 0E04    		LD	C,4
 449:	0233' 17      		RLA
 450:	0234' DA4BFF  		JP	C,MOVEF		;timeout test
 451:	0237' 17      		RLA
 452:	0238' DA5C02  		JP	C,CDMACPYOUT003	;cdmaout003 test
 453:	023B' 0E06    		LD	C,6
 454:	023D' C34BFF  		JP	MOVEF		;seriout
 455:			
 456:	0240'         	COPY$FCB$BACK:
 457:	0240' 3A1D00  		LD	A,(COPY$CR$ONLY)
 458:	0243' B7      		OR	A
 459:	0244' CA4BFF  		JP	Z,MOVEF
 460:	0247' 010E00  		LD	BC,14
 461:	024A' 09      		ADD	HL,BC
 462:	024B' EB      		EX	DE,HL
 463:	024C' 09      		ADD	HL,BC
 464:	024D' 7E      		LD	A,(HL)
 465:	024E' 12      		LD	(DE),A
 466:	024F' 23      		INC	HL
 467:	0250' 13      		INC	DE
 468:	0251' 7E      		LD	A,(HL)
 469:	0252' 12      		LD	(DE),A
 470:	0253' 03      		INC	BC
 471:	0254' 03      		INC	BC
 472:	0255' 03      		INC	BC
 473:	0256' 09      		ADD	HL,BC
 474:	0257' EB      		EX	DE,HL
 475:	0258' 09      		ADD	HL,BC
 476:	0259' 1A      		LD	A,(DE)
 477:	025A' 77      		LD	(HL),A
 478:	025B' C9      		RET
 479:			
 480:	025C'         	CDMACPYOUT003:
 481:	025C' 2AD805  		LD	HL,(DMAAD)
 482:	025F' 010300  		LD	BC,3
 483:	0262' 114E04  		LD	DE,COMMON$DMA
 484:	0265' C34BFF  		JP	MOVEF
 485:			
 486:	0268'         	CDMACPYOUT128:
 487:	0268' 2AD805  		LD	HL,(DMAAD)
 488:	026B' 018000  		LD	BC,128
 489:	026E' 114E04  		LD	DE,COMMON$DMA
 490:	0271' C34BFF  		JP	MOVEF
 491:			
 492:	0274'         	PARSE:
 493:	0274' EB      		EX	DE,HL
 494:	0275' 5E      		LD	E,(HL)
 495:	0276' 23      		INC	HL
 496:	0277' 56      		LD	D,(HL)
 497:	0278' 23      		INC	HL
 498:	0279' 4E      		LD	C,(HL)
 499:	027A' 23      		INC	HL
 500:	027B' 46      		LD	B,(HL)
 501:	027C' 21AF04  		LD	HL,BUFFER+133
 502:	027F' E5      		PUSH	HL
 503:	0280' C5      		PUSH	BC
 504:	0281' D5      		PUSH	DE
 505:	0282' 222C04  		LD	(BUFFER+2),HL
 506:	0285' 212E04  		LD	HL,BUFFER+4
 507:	0288' 222A04  		LD	(BUFFER),HL
 508:	028B' 018000  		LD	BC,128
 509:	028E' CD4BFF  		CALL	MOVEF
 510:	0291' 3600    		LD	(HL),0
 511:	0293' 0E98    		LD	C,152
 512:	0295' 112A04  		LD	DE,BUFFER
 513:	0298' CDD502  		CALL	BANK$BDOS
 514:	029B' C1      		POP	BC
 515:	029C' 7D      		LD	A,L
 516:	029D' B4      		OR	H
 517:	029E' CAB402  		JP	Z,PARSE1
 518:	02A1' 7D      		LD	A,L
 519:	02A2' A4      		AND	H
 520:	02A3' 3C      		INC	A
 521:	02A4' CAB402  		JP	Z,PARSE1
 522:	02A7' 112E04  		LD	DE,BUFFER+4
 523:	02AA' 7D      		LD	A,L
 524:	02AB' 93      		SUB	E
 525:	02AC' 6F      		LD	L,A
 526:	02AD' 7C      		LD	A,H
 527:	02AE' 9A      		SBC	A,D
 528:	02AF' 67      		LD	H,A
 529:	02B0' 09      		ADD	HL,BC
 530:	02B1' 222804  		LD	(ARET),HL
 531:	02B4'         	PARSE1:
 532:	02B4' E1      		POP	HL
 533:	02B5' D1      		POP	DE
 534:	02B6' 012400  		LD	BC,36
 535:	02B9' C34BFF  		JP	MOVEF
 536:			
 537:	02BC'         	BADFUNC:
 538:	02BC' FE98    		CP	152
 539:	02BE' CA7402  		JP	Z,PARSE
 540:			
 541:				; A = 0 if fx >= 128, 0ffh otherwise
 542:	02C1' 17      		RLA
 543:	02C2' 3E00    		LD	A,0
 544:	02C4' DAC802  		JP	C,STA$RET
 545:			
 546:	02C7' 3D      		DEC	A
 547:			
 548:	02C8'         	STA$RET:
 549:	02C8' 322804  		LD	(ARET),A
 550:			
 551:	02CB'         	GOBACK:
 552:	02CB' 2A6605  		LD	HL,(ENTSP)
 553:	02CE' F9      		LD	SP,HL		;user stack restored
 554:	02CF' 2A2804  		LD	HL,(ARET)
 555:	02D2' 7D      		LD	A,L
 556:	02D3' 44      		LD	B,H		;BA = HL = aret
 557:	02D4' C9      		RET
 558:			
 559:	02D5'         	BANK$BDOS:
 560:			
 561:	02D5' AF      		XOR	A
 562:	02D6' CD51FF  		CALL	SELMEMF
 563:			
 564:	02D9' CD06FC  		CALL	BNKBDOS
 565:			
 566:	02DC' 222804  		LD	(ARET),HL
 567:	02DF' 3E01    		LD	A,1
 568:	02E1' C351FF  		JP	SELMEMF		;ret
 569:			
 570:			
 571:	02E4'         	MOVE$OUT:
 572:	02E4' B7      		OR	A
 573:	02E5' CA4BFF  		JP	Z,MOVEF
 574:	02E8' CD51FF  		CALL	SELMEMF
 575:	02EB'         	MOVE$RET:
 576:	02EB' CD4BFF  		CALL	MOVEF
 577:	02EE' AF      		XOR	A
 578:	02EF' C351FF  		JP	SELMEMF
 579:			
 580:	02F2'         	MOVE$TPA:
 581:	02F2' 3E01    		LD	A,1
 582:	02F4' CD51FF  		CALL	SELMEMF
 583:	02F7' C3EB02  		JP	MOVE$RET
 584:			
 585:	02FA'         	SEARCH$HASH: ; A = bank # , HL = hash table addr
 586:			
 587:				; Hash format
 588:				; xxsuuuuu xxxxxxxx xxxxxxxx ssssssss
 589:				; x = hash code of fcb name field
 590:				; u = low 5 bits of fcb user field
 591:				;     1st bit is on for XFCB's
 592:				; s = shiftr(mod || ext,extshf)
 593:			
 594:	02FA' 222504  		LD	(HASH$TBLA),HL
 595:	02FD' CD51FF  		CALL	SELMEMF
 596:				; Push return address
 597:	0300' 21D603  		LD	HL,SEARCH$H7
 598:	0303' E5      		PUSH	HL
 599:				; Reset read directory record flag
 600:	0304' AF      		XOR	A
 601:	0305' 321400  		LD	(RD$DIR),A
 602:			
 603:	0308' 2A2504  		LD	HL,(HASH$TBLA)
 604:	030B' 44      		LD	B,H
 605:	030C' 4D      		LD	C,L
 606:	030D' 2A1200  		LD	HL,(HASHMX)
 607:	0310' EB      		EX	DE,HL
 608:				; Return with Z flag set if dcnt = hash$mx
 609:	0311' 2AE105  		LD	HL,(DCNT)
 610:	0314' E5      		PUSH	HL
 611:	0315' CDDD03  		CALL	SUBDH
 612:	0318' D1      		POP	DE
 613:	0319' B5      		OR	L
 614:	031A' C8      		RET	Z
 615:				; Push hash$mx-dcnt (# of hash$tbl entries to search)
 616:				; Push dcnt+1
 617:	031B' E5      		PUSH	HL
 618:	031C' 13      		INC	DE
 619:	031D' EB      		EX	DE,HL
 620:	031E' E5      		PUSH	HL
 621:				; Compute .hash$tbl(dcnt-1)
 622:	031F' 2B      		DEC	HL
 623:	0320' 29      		ADD	HL,HL
 624:	0321' 29      		ADD	HL,HL
 625:	0322' 09      		ADD	HL,BC
 626:	0323'         	SEARCH$H1:
 627:				; Advance hl to address of next hash$tbl entry
 628:	0323' 110400  		LD	DE,4
 629:	0326' 19      		ADD	HL,DE
 630:	0327' 119D05  		LD	DE,HASH
 631:				; Do hash u fields match?
 632:	032A' 1A      		LD	A,(DE)
 633:	032B' AE      		XOR	(HL)
 634:	032C' E61F    		AND	1FH
 635:	032E' C24803  		JP	NZ,SEARCH$H3	; no
 636:				; Do hash's match?
 637:	0331' CDC003  		CALL	SEARCH$H6
 638:	0334' CA7E03  		JP	Z,SEARCH$H4	; yes
 639:	0337'         	SEARCH$H2:
 640:	0337' EB      		EX	DE,HL
 641:	0338' E1      		POP	HL
 642:	0339'         	SEARCH$H25:
 643:				; de = .hash$tbl(dcnt), hl = dcnt
 644:				; dcnt = dcnt + 1
 645:	0339' 23      		INC	HL
 646:	033A' E3      		EX	(SP),HL
 647:				; hl = # of hash$tbl entries to search
 648:				; decrement & test for zero
 649:				; Restore stack & hl to .hash$tbl(dcnt)
 650:	033B' 2B      		DEC	HL
 651:	033C' 7D      		LD	A,L
 652:	033D' B4      		OR	H
 653:	033E' E3      		EX	(SP),HL
 654:	033F' E5      		PUSH	HL
 655:				; Are we done?
 656:	0340' EB      		EX	DE,HL
 657:	0341' C22303  		JP	NZ,SEARCH$H1	; no - keep searching
 658:				; Search unsuccessful - return with Z flag reset
 659:	0344' 3C      		INC	A
 660:	0345' E1      		POP	HL
 661:	0346' E1      		POP	HL
 662:	0347' C9      		RET
 663:	0348'         	SEARCH$H3:
 664:				; Does xdcnt+1 = 0ffh?
 665:	0348' 3A1800  		LD	A,(XDCNT+1)
 666:	034B' 3C      		INC	A
 667:	034C' CAB203  		JP	Z,SEARCH$H5	; yes
 668:				; Does xdcnt+1 = 0feh?
 669:	034F' 3C      		INC	A
 670:	0350' C23703  		JP	NZ,SEARCH$H2	; no - continue searching
 671:				; Do hash's match?
 672:	0353' D5      		PUSH	DE
 673:	0354' CDC003  		CALL	SEARCH$H6
 674:	0357' D1      		POP	DE
 675:	0358' C23703  		JP	NZ,SEARCH$H2	; no
 676:				; Does find$xfcb = 0ffh?
 677:	035B' 3A1600  		LD	A,(FIND$XFCB)
 678:	035E' 3C      		INC	A
 679:	035F' CAA203  		JP	Z,SEARCH$H45	; yes
 680:				; Does find$xfcb = 0feh?
 681:	0362' 3C      		INC	A
 682:	0363' CA6F03  		JP	Z,SEARCH$H35	; yes
 683:				; xdcnt+1 = 0feh & find$xfcb < 0feh
 684:				; Open user 0 search
 685:				; Does hash u field = 0?
 686:	0366' 7E      		LD	A,(HL)
 687:	0367' E61F    		AND	1FH
 688:	0369' C23703  		JP	NZ,SEARCH$H2	; no
 689:				; Search successful
 690:	036C' C37E03  		JP	SEARCH$H4
 691:	036F'         	SEARCH$H35:
 692:				; xdcnt+1 = 0feh & find$xfcb = 0feh
 693:				; Delete search to return matching fcb's & xfcbs
 694:				; Do hash user fields match?
 695:	036F' 1A      		LD	A,(DE)
 696:	0370' AE      		XOR	(HL)
 697:	0371' E60F    		AND	0FH
 698:	0373' C23703  		JP	NZ,SEARCH$H2	; no
 699:				; Exclude empty fcbs, sfcbs, and dir lbls
 700:	0376' 7E      		LD	A,(HL)
 701:	0377' E630    		AND	30H
 702:	0379' FE30    		CP	30H
 703:	037B' CA3703  		JP	Z,SEARCH$H2
 704:	037E'         	SEARCH$H4:
 705:				; successful search
 706:				; Set dcnt to search$hash dcnt-1
 707:				; dcnt gets incremented by read$dir
 708:				; Also discard search$hash loop count
 709:	037E' 2AE105  		LD	HL,(DCNT)
 710:	0381' EB      		EX	DE,HL
 711:	0382' E1      		POP	HL
 712:	0383' 2B      		DEC	HL
 713:	0384' 22E105  		LD	(DCNT),HL
 714:	0387' C1      		POP	BC
 715:				; Does dcnt&3 = 3?
 716:	0388' 7D      		LD	A,L
 717:	0389' E603    		AND	03H
 718:	038B' FE03    		CP	03H
 719:	038D' C8      		RET	Z		; yes
 720:				; Does old dcnt & new dcnt reside in same sector?
 721:	038E' 7B      		LD	A,E
 722:	038F' E6FC    		AND	0FCH
 723:	0391' 5F      		LD	E,A
 724:	0392' 7D      		LD	A,L
 725:	0393' E6FC    		AND	0FCH
 726:	0395' 6F      		LD	L,A
 727:	0396' CDDD03  		CALL	SUBDH
 728:	0399' B5      		OR	L
 729:	039A' C8      		RET	Z		; yes
 730:				; Set directory read flag
 731:	039B' 3EFF    		LD	A,0FFH
 732:	039D' 321400  		LD	(RD$DIR),A
 733:	03A0' AF      		XOR	A
 734:	03A1' C9      		RET
 735:	03A2'         	SEARCH$H45:
 736:				; xdcnt+1 = 0feh, find$xfcb = 0ffh
 737:				; Rename search to save dcnt of xfcb in xdcnt
 738:				; Is hash entry an xfcb?
 739:	03A2' 7E      		LD	A,(HL)
 740:	03A3' E610    		AND	10H
 741:	03A5' CA3703  		JP	Z,SEARCH$H2	; no
 742:				; Do hash user fields agree?
 743:	03A8' 1A      		LD	A,(DE)
 744:	03A9' AE      		XOR	(HL)
 745:	03AA' E60F    		AND	0FH
 746:	03AC' C23703  		JP	NZ,SEARCH$H2	; no
 747:				; set xdcnt
 748:	03AF' C3B803  		JP	SEARCH$H55
 749:	03B2'         	SEARCH$H5:
 750:				; xdcnt+1 = 0ffh
 751:				; Make search to save dcnt of empty fcb
 752:				; is hash$tbl entry empty?
 753:	03B2' 7E      		LD	A,(HL)
 754:	03B3' FEF5    		CP	0F5H
 755:	03B5' C23703  		JP	NZ,SEARCH$H2	; no
 756:	03B8'         	SEARCH$H55:
 757:				; xdcnt = dcnt
 758:	03B8' EB      		EX	DE,HL
 759:	03B9' E1      		POP	HL
 760:	03BA' 221700  		LD	(XDCNT),HL
 761:	03BD' C33903  		JP	SEARCH$H25
 762:	03C0'         	SEARCH$H6:
 763:				; hash compare routine
 764:				; Is hashl = 0?
 765:	03C0' 3A9C05  		LD	A,(HASHL)
 766:	03C3' B7      		OR	A
 767:	03C4' C8      		RET	Z		; yes - hash compare successful
 768:				; hash$mask = 0e0h if hashl = 3
 769:				;           = 0c0h if hashl = 2
 770:	03C5' 4F      		LD	C,A
 771:	03C6' 0F      		RRCA
 772:	03C7' 0F      		RRCA
 773:	03C8' 1F      		RRA
 774:	03C9' 47      		LD	B,A
 775:				; hash s field does not pertain if hashl ~= 3
 776:				; Does hash(0) fields match?
 777:	03CA' 1A      		LD	A,(DE)
 778:	03CB' AE      		XOR	(HL)
 779:	03CC' A0      		AND	B
 780:	03CD' C0      		RET	NZ		; no
 781:				; Compare remainder of hash fields for hashl bytes
 782:	03CE' E5      		PUSH	HL
 783:	03CF' 23      		INC	HL
 784:	03D0' 13      		INC	DE
 785:	03D1' CDE403  		CALL	COMPARE
 786:	03D4' E1      		POP	HL
 787:	03D5' C9      		RET
 788:	03D6'         	SEARCH$H7:
 789:				; Return to bnkbdos
 790:	03D6' F5      		PUSH	AF
 791:	03D7' AF      		XOR	A
 792:	03D8' CD51FF  		CALL	SELMEMF
 793:	03DB' F1      		POP	AF
 794:	03DC' C9      		RET
 795:			
 796:	03DD'         	SUBDH:
 797:				;compute HL = DE - HL
 798:	03DD' 7B      		LD	A,E
 799:	03DE' 95      		SUB	L
 800:	03DF' 6F      		LD	L,A
 801:	03E0' 7A      		LD	A,D
 802:	03E1' 9C      		SBC	A,H
 803:	03E2' 67      		LD	H,A
 804:	03E3' C9      		RET
 805:			
 806:	03E4'         	COMPARE:
 807:	03E4' 1A      		LD	A,(DE)
 808:	03E5' BE      		CP	(HL)
 809:	03E6' C0      		RET	NZ
 810:	03E7' 23      		INC	HL
 811:	03E8' 13      		INC	DE
 812:	03E9' 0D      		DEC	C
 813:	03EA' C8      		RET	Z
 814:	03EB' C3E403  		JP	COMPARE
 815:			
 816:			;	Disk Function Copy Table
 817:			
 818:	0001'         	CDMAIN	EQU	00000001B;copy 1ST 16 bytes of DMA to
 819:				;common$dma on entry
 820:	0002'         	FCBIN	EQU	00000010B	;fcb copy on entry
 821:	0080'         	FCBOUT	EQU	10000000B	;fcb copy on exit
 822:	0040'         	PFCBOUT EQU	01000000B	;random fcb copy on exit
 823:	0020'         	CDMA128 EQU	00100000B	;copy 1st 128 bytes of common$dma
 824:				;to DMA on exit
 825:	0010'         	TIMEOUT EQU	00010000B	;copy date & time on exit
 826:	0008'         	CDMA003 EQU	00001000B	;copy 1ST 3 bytes of common$dma
 827:				;to DMA on exit
 828:	0004'         	SEROUT	EQU	00000100B	;copy serial # on exit
 829:			
 830:	03EE'         	DFCTBL:
 831:	03EE' 00      		DEFB	0		; 12=return version #
 832:	03EF' 00      		DEFB	0		; 13=reset disk system
 833:	03F0' 00      		DEFB	0		; 14=select disk
 834:	03F1' 83      		DEFB	FCBIN+FCBOUT+CDMAIN; 15=open file
 835:	03F2' 82      		DEFB	FCBIN+FCBOUT	; 16=close file
 836:	03F3' 22      		DEFB	FCBIN+CDMA128	; 17=search first
 837:	03F4' 22      		DEFB	FCBIN+CDMA128	; 18=search next
 838:	03F5' 03      		DEFB	FCBIN+CDMAIN	; 19=delete file
 839:	03F6' 82      		DEFB	FCBIN+FCBOUT	; 20=read sequential
 840:	03F7' 82      		DEFB	FCBIN+FCBOUT	; 21=write sequential
 841:	03F8' 83      		DEFB	FCBIN+FCBOUT+CDMAIN; 22=make file
 842:	03F9' 03      		DEFB	FCBIN+CDMAIN	; 23=rename file
 843:	03FA' 00      		DEFB	0		; 24=return login vector
 844:	03FB' 00      		DEFB	0		; 25=return current disk
 845:	03FC' 00      		DEFB	0		; 26=set DMA address
 846:	03FD' 00      		DEFB	0		; 27=get alloc address
 847:	03FE' 00      		DEFB	0		; 28=write protect disk
 848:	03FF' 00      		DEFB	0		; 29=get R/O vector
 849:	0400' 83      		DEFB	FCBIN+FCBOUT+CDMAIN; 30=set file attributes
 850:	0401' 00      		DEFB	0		; 31=get disk param addr
 851:	0402' 00      		DEFB	0		; 32=get/set user code
 852:	0403' 82      		DEFB	FCBIN+FCBOUT	; 33=read random
 853:	0404' 82      		DEFB	FCBIN+FCBOUT	; 34=write random
 854:	0405' 42      		DEFB	FCBIN+PFCBOUT	; 35=compute file size
 855:	0406' 42      		DEFB	FCBIN+PFCBOUT	; 36=set random record
 856:	0407' 00      		DEFB	0		; 37=drive reset
 857:	0408' 00      		DEFB	0		; 38=access drive
 858:	0409' 00      		DEFB	0		; 39=free drive
 859:	040A' 82      		DEFB	FCBIN+FCBOUT	; 40=write random w/ zero fill
 860:			
 861:	040B' 82      		DEFB	FCBIN+FCBOUT	; 41=test & write record
 862:	040C' 00      		DEFB	0		; 42=record lock
 863:	040D' 00      		DEFB	0		; 43=record unlock
 864:	040E' 00      		DEFB	0		; 44=set multi-sector count
 865:	040F' 00      		DEFB	0		; 45=set BDOS error mode
 866:	0410' 08      		DEFB	CDMA003		; 46=get disk free space
 867:	0411' 00      		DEFB	0		; 47=chain to program
 868:	0412' 00      		DEFB	0		; 48=flush buffers
 869:	0413' 02      		DEFB	FCBIN		; 49=Get/Set system control block
 870:	0414' 02      		DEFB	FCBIN		; 50=direct BIOS call (CP/M)
 871:	0033'         	NDF	EQU	($-DFCTBL)+12
 872:			
 873:	0415'         	XDFCTBL:
 874:	0415' 00      		DEFB	0		; 98=reset allocation vectors
 875:	0416' 03      		DEFB	FCBIN+CDMAIN	; 99=truncate file
 876:	0417' 03      		DEFB	FCBIN+CDMAIN	; 100=set directory label
 877:	0418' 00      		DEFB	0		; 101=return directory label data
 878:	0419' 83      		DEFB	FCBIN+FCBOUT+CDMAIN; 102=read file xfcb
 879:	041A' 03      		DEFB	FCBIN+CDMAIN	; 103=write or update file xfcb
 880:	041B' 02      		DEFB	FCBIN		; 104=set current date and time
 881:	041C' 12      		DEFB	FCBIN+TIMEOUT	; 105=get current date and time
 882:	041D' 02      		DEFB	FCBIN		; 106=set default password
 883:	041E' 06      		DEFB	FCBIN+SEROUT	; 107=return serial number
 884:	041F' 00      		DEFB	0		; 108=get/set program return code
 885:	0420' 00      		DEFB	0		; 109=get/set console mode
 886:	0421' 00      		DEFB	0		; 110=get/set output delimiter
 887:	0422' 00      		DEFB	0		; 111=print block
 888:	0423' 00      		DEFB	0		; 112=list block
 889:			
 890:	0071'         	NXDF	EQU	($-XDFCTBL)+98
 891:			
 892:	0424'         	RES$FX:	DEFS	1
 893:	0425'         	HASH$TBLA:
 894:	0425'         		DEFS	2
 895:	0427'         	BANK:	DEFS	1
 896:	0428'         	ARET:	DEFS	2		;address value to return
 897:			
 898:	042A'         	BUFFER:	;function 10 256 byte buffer
 899:			
 900:	042A'         	COMMONFCB:
 901:	042A'         		DEFS	36		;fcb copy in common memory
 902:			
 903:	044E'         	COMMON$DMA:
 904:	044E'         		DEFS	220		;function 10 buffer cont.
 905:			
 906:	052A'         		DEFS	SSIZE*2
 907:	0566'         	LSTACK:
 908:	0566'         	ENTSP:	DEFS	2
 909:			
 910:			; BIOS intercept vector
 911:			
 912:	0568' C303FF  	WBOOTFX:JP	WBOOTF
 913:	056B' C38301  		JP	SWITCH1
 914:	056E' C306FF  	CONSTFX:JP	CONSTF
 915:	0571' C38301  		JP	SWITCH1
 916:	0574' C309FF  	CONINFX:JP	CONINF
 917:	0577' C38301  		JP	SWITCH1
 918:	057A' C30CFF  	CONOUTFX: JP	CONOUTF
 919:	057D' C38301  		JP	SWITCH1
 920:	0580' C30FFF  	LISTFX:	JP	LISTF
 921:	0583' C38301  		JP	SWITCH1
 922:			
 923:	0586' 00000000		DEFW	0,0,0
	      0000
 924:	058C' 0000    		DEFW	0
 925:	058E' 0000    		DEFW	0
 926:			
 927:	0590' 0000    	OLOG:	DEFW	0
 928:	0592' 0000    	RLOG:	DEFW	0
 929:			
 930:	0594' 00000007	PATCH$FLGS: DEFB	0,0,0,7	;[JCE] Patchlevel 7
 931:			
 932:			; Base of RESBDOS
 933:			
 934:	0598' 0600    		DEFW	BASE+6
 935:			
 936:			; Reserved for use by non-banked BDOS
 937:			
 938:	059A'         		DEFS	2
 939:			
 940:			; System Control Block
 941:			
 942:	059C'         	SCB:
 943:			
 944:			; Expansion Area - 6 bytes
 945:			
 946:	059C' 00      	HASHL:	DEFB	0	;hash length (0,2,3)
 947:	059D' 00000000	HASH:	DEFW	0,0		;hash entry
 948:	05A1' 31      	VERSION:DEFB	31H		;version 3.1
 949:			
 950:			; Utilities Section - 8 bytes
 951:			
 952:	05A2' 00000000	UTIL$FLGS: DEFW	0,0
 953:	05A6' 0000    	DSPL$FLGS: DEFW	0
 954:	05A8' 0000    		DEFW	0
 955:			
 956:			; CLP Section - 4 bytes
 957:			
 958:	05AA' 0000    	CLP$FLGS: DEFW	0
 959:	05AC' 0000    	CLP$ERRCDE: DEFW	0
 960:			
 961:			; CCP Section - 8 bytes
 962:			
 963:	05AE' 00      	CCP$COMLEN: DEFB	0
 964:	05AF' 00      	CCP$CURDRV: DEFB	0
 965:	05B0' 00      	CCP$CURUSR: DEFB	0
 966:	05B1' 0000    	CCP$CONBUFF: DEFW	0
 967:	05B3' 0000    	CCP$FLGS: DEFW	0
 968:	05B5' 00      		DEFB	0
 969:			
 970:			; Device I/O Section - 32 bytes
 971:			
 972:	05B6' 00      	CONWIDTH: DEFB	0
 973:	05B7' 00      	COLUMN:	DEFB	0
 974:	05B8' 00      	CONPAGE:DEFB	0
 975:	05B9' 00      	CONLINE:DEFB	0
 976:	05BA' 0000    	CONBUFFADD: DEFW	0
 977:	05BC' 0000    	CONBUFFLEN: DEFW	0
 978:	05BE' 0000    	CONIN$RFLG: DEFW	0
 979:	05C0' 0000    	CONOUT$RFLG: DEFW	0
 980:	05C2' 0000    	AUXIN$RFLG: DEFW	0
 981:	05C4' 0000    	AUXOUT$RFLG: DEFW	0
 982:	05C6' 0000    	LSTOUT$RFLG: DEFW	0
 983:	05C8' 00      	PAGE$MODE: DEFB	0
 984:	05C9' 00      	PM$DEFAULT: DEFB	0
 985:	05CA' 00      	CTLH$ACT: DEFB	0
 986:	05CB' 00      	RUBOUT$ACT: DEFB	0
 987:	05CC' 00      	TYPE$AHEAD: DEFB	0
 988:	05CD' 0000    	CONTRAN:DEFW	0
 989:	05CF' 0000    	CONMODE:DEFW	0
 990:	05D1' 6A04    		DEFW	BUFFER+64
 991:	05D3' 24      	OUTDELIM: DEFB	'$'
 992:	05D4' 00      	LISTCP:	DEFB	0
 993:	05D5' 00      	QFLAG:	DEFB	0
 994:			
 995:			; BDOS Section - 42 bytes
 996:			
 997:	05D6' 9C05    	SCBADD:	DEFW	SCB
 998:	05D8' 8000    	DMAAD:	DEFW	0080H
 999:	05DA' 00      	SELDSK:	DEFB	0
1000:	05DB' 0000    	INFO:	DEFW	0
1001:	05DD' 00      	RESEL:	DEFB	0
1002:	05DE' 00      	RELOG:	DEFB	0
1003:	05DF' 00      	FX:	DEFB	0
1004:	05E0' 00      	USRCODE:DEFB	0
1005:	05E1' 0000    	DCNT:	DEFW	0
1006:	05E3' 0000    	SEARCHA:DEFW	0
1007:	05E5' 00      	SEARCHL:DEFB	0
1008:	05E6' 01      	MULTCNT:DEFB	1
1009:	05E7' 00      	ERRORMODE: DEFB	0
1010:	05E8' 00FFFFFF	SEARCHCHAIN: DEFB	0,0FFH,0FFH,0FFH
1011:	05EC' 00      	TEMP$DRIVE: DEFB	0
1012:	05ED' 00      	ERRDRV:	DEFB	0
1013:	05EE' 0000    		DEFW	0
1014:	05F0' 00      	MEDIA$FLAG: DEFB	0
1015:	05F1' 0000    		DEFW	0
1016:	05F3' 80      	BDOS$FLAGS: DEFB	80H
1017:	05F4' FFFFFFFF	STAMP:	DEFB	0FFH,0FFH,0FFH,0FFH,0FFH
	      FF
1018:	05F9' 0000    	COMMONBASE: DEFW	0
1019:	05FB' C37CFC  	ERROR:	JP	ERROR$JMP
1020:	05FE' 0600    	BDOSADD:DEFW	BASE+6
1021:	0600'         		END



Statistics:

     4	passes
     0	jr promotions
   208	symbols
     0	bytes

     2	macro calls
   112	macro bytes
     0	invented symbols



Symbol Table:

@bdate             0     
@lcopy            17     
@scopy            51     
aret             428'    
auxin$rflg       5c2'    
auxinstf       =ff36'    
auxout$rflg      5c4'    
auxoutstf      =ff39'    
badfunc          2bc'    
bank             427'    
bank$bdos        2d5'    
base           =   0'    
bdos              24'    
bdos$flags       5f3'    
bdosadd          5fe'    
bios           =ff00'    
bios$pg        =ff00'    
blk$out          141'    
blk$out0         153'    
blk$out1         16a'    
blk$out2         170'    
bnkbdos        =fc06'    
bnkbdos$pg     =fc00'    
bootf          =ff00'    
buffer           42a'    
ccp$comlen       5ae'    
ccp$conbuff      5b1'    
ccp$curdrv       5af'    
ccp$curusr       5b0'    
ccp$flgs         5b3'    
cdma003        =   8     
cdma128        =  20     
cdmacpyout003    25c'    
cdmacpyout128    268'    
cdmain         =   1     
chainfx        =  2f     
clp$errcde       5ac'    
clp$flgs         5aa'    
column           5b7'    
common$dma       44e'    
commonbase       5f9'    
commonfcb        42a'    
compare          3e4'    
conbuffadd       5ba'    
conbufflen       5bc'    
conin             d8'    
conin$rflg       5be'    
coninf         =ff09'    
coninfx          574'    
conline          5b9'    
conmode          5cf'    
conout$rflg      5c0'    
conoutf        =ff0c'    
conoutfx         57a'    
conoutfxx      =   2     
conoutstf      =ff33'    
conpage          5b8'    
constatfx      =   b     
constf         =ff06'    
constfx          56e'    
constx            ce'    
contran          5cd'    
conwidth         5b6'    
copy$cr$only      1d'    
copy$fcb$back    240'    
cpycdmain        1ed'    
cpyfcbin         1fc'    
ctlh$act         5ca'    
curdma            1b'    
dcnt             5e1'    
devinitf       =ff3f'    
devtblf        =ff3c'    
dfctbl           3ee'    
dirinp            c3'    
dirinp1           c8'    
dirstat           bd'    
disk$func        194'    
disk$function    1cf'    
diskfx         =   c     
dmaad            5d8'    
drvtblf        =ff42'    
dspl$flgs        5a6'    
entsp            566'    
errdrv           5ed'    
error            5fb'    
error$jmp      =fc7c'    
errormode        5e7'    
fcbin          =   2     
fcbout         =  80     
find$xfcb         16'    
flushf         =ff48'    
func10           101'    
func10a          110'    
func111          135'    
func112          135'    
func3             9e'    
func4             a4'    
func5             a8'    
func6             ac'    
func7             e3'    
func8             e9'    
func9             ef'    
functab           86'    
fx               5df'    
goback           2cb'    
hash             59d'    
hash$tbla        425'    
hashl            59c'    
hashmx            12'    
homef          =ff18'    
info             5db'    
ioloc          =   3     
kbchar            20'    
listcp           5d4'    
listf          =ff0f'    
listfx           580'    
liststf        =ff2d'    
lstack           566'    
lstout$rflg      5c6'    
make$xfcb         15'    
media$flag       5f0'    
move$out         2e4'    
move$ret         2eb'    
move$tpa         2f2'    
movef          =ff4b'    
multcnt          5e6'    
multiof        =ff45'    
ndf            =  33     
nocpyin          213'    
normalcpm        1db'    
nxdf           =  71     
okdf             1b0'    
olog             590'    
outdelim         5d3'    
page$mode        5c8'    
parse            274'    
parse1           2b4'    
patch$flgs       594'    
pfcbout        =  40     
pm$default       5c9'    
print             f1'    
printfx        =   9     
punchf         =ff12'    
qconinx          177'    
qflag            5d5'    
rd$dir            14'    
readerf        =ff15'    
readf          =ff27'    
relog            5de'    
res$fx           424'    
resbdos$pg     =fd00'    
resel            5dd'    
rlog             592'    
rubout$act       5cb'    
scb              59c'    
scb$pg         =fe00'    
scbadd           5d6'    
sconoutf       =ff0c'    
screenf        =ffff     
search           1c7'    
search$h1        323'    
search$h2        337'    
search$h25       339'    
search$h3        348'    
search$h35       36f'    
search$h4        37e'    
search$h45       3a2'    
search$h5        3b2'    
search$h55       3b8'    
search$h6        3c0'    
search$h7        3d6'    
search$hash      2fa'    
searcha          5e3'    
searchchain      5e8'    
searchl          5e5'    
searchn          1cb'    
sectran        =ff30'    
seldsk           5da'    
seldskf        =ff1b'    
selmemf        =ff51'    
serial             0'    
serout         =   4     
setbnkf        =ff54'    
setdmaf        =ff24'    
setdmafx       =  1a     
setsecf        =ff21'    
settrkf        =ff1e'    
ssize          =  1e     
sta$ret          2c8'    
stamp            5f4'    
subdh            3dd'    
switch0          18d'    
switch1          183'    
temp$drive       5ec'    
timef          =ff4e'    
timeout        =  10     
type$ahead       5cc'    
user$info         1e'    
usrcode          5e0'    
util$flgs        5a2'    
version          5a1'    
wbootf         =ff03'    
wbootfx          568'    
writef         =ff2a'    
xdcnt             17'    
xdfctbl          415'    
xdmaadd           19'    
xmovef         =ff4e'    
