   1:			;
   2:			;********************************************************
   3:			;*							*
   4:			;*	    UNIVERSAL BASIC I/O SYSTEM (BIOS)		*
   5:			;*		       Vers. 1.8			*
   6:			;*							*
   7:			;*     A,B = 5 Inc. 32,10 sec/trk 256 byte/sec		*
   8:			;*     C,D = 5 Inc. 32,10 sec/trk 256 byte/sec		*
   9:			;*     E,F = 5 Inc. 17 sec/trk	  128 byte/sec (old Lg)	*
  10:			;*							*
  11:			;*    nota: aggiungere diagnostica errori in fdd i/o	*
  12:			;*							*
  13:			;********************************************************
  14:			;
  15:				title	Bios 2.0 for NE CP/M 2.2 with Hard-Disk Basf 6188
  16:			;	subttl	Copyright Studio Lg, Genova - Last rev 15/08/1984 09:06
  17:			;	Programmers: Martino Stefano & Gallarani Paolo
  18:			;
  19:				; Disassembly/retype Piergiorgio Betti & Pino Giaquinto 2015/04/25
  20:				;
  21:				include sysent.asm		; read in os allocation
sysent.asm
**** sysent.asm ****
   1:			;
   2:			;********************************************************
   3:			;*							*
   4:			;*	    UNIVERSAL BASIC I/O SYSTEM (BIOS)		*
   5:			;*							*
   6:			;*           memory size and SONE allocation		*
   7:			;*							*
   8:			;********************************************************
   9:			;
  10:			;	Programmers: Martino Stefano & Gallarani Paolo
  11:				; Disassembly/retype Pino Giaquinto & Piergiorgio Betti 2015/04/25
  12:			;
  13:			;********************************************************
  14:			;*		MEMORY SIZING				*
  15:			;********************************************************
  16:			;
  17:			; msize	equ	56			; CP/M memory size in kilobyte
  18:				include	msize.asm		; read in ram size
msize.asm
**** msize.asm ****
   1:	003E          	msize	equ	62
**** sysent.asm ****
  19:	0001          	mres	equ	1			; reserved mem in kilobyte
  20:			;
  21:			;********************************************************
  22:			;*		SYSTEM CONSTANTS			*
  23:			;********************************************************
  24:			;
  25:	003D          	cmsize	equ	msize-mres		; cp/m size in kbyte
  26:			;
  27:			;	bias is address offset from 3400h for memory system
  28:			;	than 16k (referred to as "b" throughout the next)
  29:			;
  30:	A400          	bias	equ	(cmsize-20)*1024;
  31:	D800          	ccp	equ	3400h+bias		; base of ccp
  32:	E000          	bdose	equ	ccp+800h		; start of bdos
  33:	E006          	bdos	equ	ccp+806h		; base of bdos
  34:	EE00          	bios	equ	ccp+1600h		; base of bios
  35:	1000          	ipl	equ	1000h			; ipl origin
  36:			;
  37:			; EOF
**** bios20h.asm ****
  22:				include const.asm		; read in system constants
const.asm
**** const.asm ****
   1:			;
   2:			;********************************************************
   3:			;*							*
   4:			;*	    UNIVERSAL BASIC I/O SYSTEM (BIOS)		*
   5:			;*							*
   6:			;*                  system constants           		*
   7:			;*							*
   8:			;********************************************************
   9:			;
  10:			;	Programmers: Martino Stefano & Gallarani Paolo
  11:				; Disassembly/retype Pino Giaquinto & Piergiorgio Betti 2015/04/25
  12:			;
  13:	4853          	vers	equ	('H'*256)+'S'		; Single side version
  14:	0014          	rev	equ	20			; CBIOS revision number
  15:			;
  16:			;
  17:			;	Boolean scalar constants
  18:	0000          	false	equ	0
  19:	FFFF          	true	equ	not false
  20:			;
  21:			;
  22:			; ***	I/O Devices	***
  23:	0001          	TTY	equ	01b			; CON:
  24:	0000          	RDR	equ	false			; Undefinited
  25:	0000          	PUN	equ	false			; Undefinited
  26:	0002          	LST	equ	10b			; LST:
  27:			;
  28:			;	Default Value for I/O byte
  29:	0081          	DftI.O	equ	(LST shl 6) or (RDR shl 4) or (PUN shl 2) or (TTY)
  30:			;
  31:			;
  32:			;
  33:			;********************************************************
  34:			;*							*
  35:			;*		ASCII EQUIVALENTS			*
  36:			;*							*
  37:			;********************************************************
  38:			;
  39:	0087          	bell	equ	'G'+'@'			; ring beeper
  40:	0088          	backsp	equ	'H'+'@'			; back space char.
  41:	0089          	tab	equ	'I'+'@'			; tabulation char.
  42:	008A          	lf	equ	'J'+'@'			; line-feed char.
  43:	008C          	ffeed	equ	'L'+'@'			; form feed char.
  44:	008D          	cr	equ	'M'+'@'			; carriage-return char.
  45:	0093          	pfx	equ	'S'+'@'			; attributes pfx
  46:	0048          	rever	equ	'H'			; Reverse On	(^SH)
  47:	0043          	flash	equ	'C'			; Flash On	(^SC)
  48:	0040          	norm	equ	'@'			; Normal	(^S@)
  49:	0020          	spc	equ	' '			; space char.
  50:	0024          	endmsg	equ	'$'			; end of print message
  51:			;
  52:			;
  53:			;
  54:			;********************************************************
  55:			;*							*
  56:			;*		Rom routines address			*
  57:			;*							*
  58:			;********************************************************
  59:			;
  60:	F000          	rom	equ	0F000h			; <--- rom starting address
  61:	F003          	cin	equ	rom+3			; console input
  62:	F006          	cout	equ	rom+6			; console output
  63:	F009          	csts	equ	rom+9			; console status
  64:	F00C          	lout	equ	rom+12			; printer output
  65:	F00F          	lsts	equ	rom+15			; printer status
  66:	F012          	fdios	equ	rom+18			; fdd I/O 128 byte
  67:	F015          	fdiod	equ	rom+21			; fdd I/O 256 byte
  68:	F018          	wdini	equ	rom+24			; wdd initialization
  69:	F01B          	wdio	equ	rom+27			; wdd I/O 256 byte
  70:	F01E          	strout	equ	rom+30			; print string .DE until $
  71:			; print	equ	strout			; sinonime
  72:	F021          	bootrom	equ	rom+33			; load BIOS and go to wboote
  73:	F024          	printat	equ	rom+36			; print str. -> DE at -> HL cursor
  74:	F027          	movcurs	equ	rom+39			; move cursor at -> HL
  75:	F02A          	vidinit	equ	rom+42			; initialize video
  76:	F02D          	CompFlg	equ	rom+45			; Version Number
  77:			;
  78:			;
  79:			;
  80:			;********************************************************
  81:			;*		SYSTEM CONSTANTS			*
  82:			;********************************************************
  83:			;
  84:	0000          	asmcpm	equ	false			; *** include and assemble cp/m ***
  85:			;
  86:	1600          	cpml	equ	bios-ccp		; lenght (in bytes) of cp/m system (ccp + bdos)
  87:	0600          	biosl	equ	600h			; lenght (in bytes) of standard bios
  88:	0016          	cpmsiz	equ	16h			; cpml/secsiz = lenght (sector num.) of cp/m (ccp + bdos)
  89:	0006          	biossiz	equ	06h			; biosl/secsiz = lenght (sector num.) of bios
  90:	0003          	iobyte	equ	0003h			; intel I/O byte
  91:	0004          	CurDsk	equ	0004h			; cp/m logical disk number
  92:	0080          	stack	equ	0080h			; wboot stack pointer
  93:	0080          	defldma	equ	0080h			; cp/m default dma adrs
  94:	1000          	stack1	equ	1000h			; ipl stack pointer
  95:			;
  96:			;
  97:			;********************************************************
  98:			;*							*
  99:			;*		Disk constants				*
 100:			;*							*
 101:			;********************************************************
 102:			;
 103:	0002          	fddsiz	equ	2			; fdd number on system (10 sec/trk -256 byte-)
 104:	0002          	wddsiz	equ	2			; wdd number on system (32 sec/trk -256 byte-)
 105:	0002          	extfds	equ	2			; fds number on system (17 sec/trk -128 byte-)
 106:	0006          	maxdsk	equ	fddsiz+wddsiz+extfds	; max disk on system
 107:			;
 108:	000A          	fddsec	equ	10			; fdd sec/trk (10)
 109:	0020          	wddsec	equ	32			; wdd sec/trk (32)
 110:	0100          	secsiz	equ	256			; byte/sector (256)
 111:			;
 112:	0002          	cpmblk	equ	secsiz/128		; r/w buffer size
 113:	0001          	secmsk	equ	cpmblk-1		; sector mask
 114:	0014          	fddspt	equ	fddsec*cpmblk		; cp/m fdd sec/trk (20)
 115:	0040          	wddspt	equ	wddsec*cpmblk		; cp/m wdd sec/trk (64)
 116:			;
 117:			;
 118:			;
 119:			;********************************************************
 120:			;*							*
 121:			;*	BDOS constants on entry to write		*
 122:			;*							*
 123:			;********************************************************
 124:			;
 125:	0000          	wrall	equ	0			; write to allocated
 126:	0001          	wrdir	equ	1			; write to directory
 127:	0002          	wrual	equ	2			; write to unallocated
 128:			;
**** bios20h.asm ****
  23:			;
  24:			;
  25:			;********************************************************
  26:			;*							*
  27:			;*	    UNIVERSAL BASIC I/O SYSTEM (BIOS)		*
  28:			;*		       Vers. 2.0			*
  29:			;*							*
  30:			;*                     System IPL			*
  31:			;*							*
  32:			;********************************************************
  33:			;
  34:			; 	subttl	IPL for NE BIOS 2.0 with Hard-Disk BASF 6188
  35:			;	Programmers: Martino Stefano & Gallarani Paolo
  36:			;
  37:			;
  38:			;********************************************************
  39:			;*							*
  40:			;*		IPL for NEW BIOS			*
  41:			;*							*
  42:			;********************************************************
  43:			;
  44:			;	this program loaded in ram by rom boot, load the cp/m
  45:			;	bios, set bios sysflag and go to wboote
  46:			;
  47:			;
  48:			;	subttl	IPL for NE BIOS 1.8 with Hard-Disk BASF 6188
  49:			;
  50:				aseg
  51:	1000          		.phase ipl			; origin of IPL
  52:			;
  53:			;
  54:	1000          	wdbboot:
  55:				; entry point for bios boot from hard disk
  56:	1000  C30910  		jp	wdbbt1			; jump to hard bios boot
  57:			;
  58:	1003          	fdbboot:
  59:				; entry point for bios boot from floppy disk
  60:	1003  C33A10  		jp	fdbbt1			; jump to floppy bios boot
  61:	1006          	iplmsg:
  62:				; message for ipl checking
  63:	1006  49504C  		defb	'IPL'
  64:			;
  65:			;
  66:	1009          	wdbbt1:
  67:				; load bios from hard disk
  68:	1009  213D10  		ld	hl,bbtdsk		; H.L = bios boot r/w para pointer
  69:	100C  CD1BF0  		call	wdio			; read bios
  70:	100F  B7      		or	a			; read error ?
  71:	1010  201B    		jr	nz,bbterr		; yes, then reinitialize system
  72:								; A = 0 because not error occurs
  73:	1012          	bbtok:
  74:				; bios has been loaded
  75:	1012  3250F2  		ld	(sysflag),a		; set bios system flag
  76:	1015  DD2151F2		ld	ix,vidareas		; init video table
  77:	1019  CD2AF0  		call	vidinit
  78:	101C  210300  		ld	hl,iobyte		; point to iobyte
  79:	101F  3681    		ld	(hl),DftI.O		; value for i/o byte (lst:=lpt:)
  80:	1021  23      		inc	hl			; point to logdsk
  81:	1022  3600    		ld	(hl),0			; set cp/m logical disk = 0
  82:	1024  114B10  		ld	de,cpmmsg		; D.E = cp/m message
  83:	1027  CD1EF0  		call	strout			; print it
  84:	102A  C303EE  		jp	wboote			; jump to bios wboote
  85:				;
  86:				; error in reading BIOS
  87:				;
  88:	102D          	bbterr:
  89:	102D  118110  		ld	de,bbtermsg		; D.E = bios boot error message
  90:	1030  CD1EF0  		call	strout			; print it
  91:	1033          		wait1cr:
  92:	1033  CD03F0  		call	cin			; wait one char.
  93:	1036  FE8D    		cp	cr			; cr ?
  94:	1038  20F9    		jr	nz,wait1cr		;
  95:				;
  96:	103A          	fdbbt1:
  97:	103A  C321F0  		jp	bootrom			; load IPL from FDD ?
  98:			;
  99:			;
 100:				; bios boot r/w para table (initially for wdd)
 101:			;
 102:	103D  00      	bbtdsk:	defb	0			; dsk-0 sid 0
 103:	103E  0000    	bbttrk:	defw	0			; cylinder number
 104:	1040  18      	bbtsec:	defb	24			; secor number (for wdd)
 105:	1041  00EE    	bbtdma:	defw	bios			; bios start address
 106:	1043  00      	btprw:	defb	0			; read operation
 107:			;
 108:	1044  06      	wdbloc:	defb	biossiz			; for wdd boot (6 sec. to load)
 109:			;
 110:	1045          	bbtxlt:
 111:				; sector translate table for floppy disk (256 byte/sec)
 112:				; the first two sector are occuped by ccp + bdos
 113:				; than bbtxlt starts at 4' sector
 114:				;
 115:	1045  09050208		defb	9,5,2,8,4,10
	      040A
 116:			;
 117:	104B          	cpmmsg:
 118:	104B  8C8D8A8A		defb	ffeed,cr,lf,lf,pfx,'H',(cmsize+1)/10+'0',(cmsize+1) mod 10+'0','K N.E. New Disk System - '
	      93483632
	      4B204E2E
	      452E204E
	      65772044
	      69736B20
	      53797374
	      656D202D
	      20
 119:	106C  76657273		defb	'vers ',high vers,low vers
	      204853
 120:	1073  20726576		defb	' rev ',rev/10+'0','.',rev mod 10+'0',pfx,'@'
	      20322E30
	      9340
 121:	107D  8D8A8724		defb	cr,lf,bell,endmsg
 122:			;
 123:			;
 124:	1081          	bbtermsg:
 125:	1081  878D8A43		defb	bell,cr,lf,'Cannot load your BIOS.'
	      616E6E6F
	      74206C6F
	      61642079
	      6F757220
	      42494F53
	      2E
 126:	109A  8D8A5365		defb	cr,lf,'Set new system diskette in disk A,'
	      74206E65
	      77207379
	      7374656D
	      20646973
	      6B657474
	      6520696E
	      20646973
	      6B20412C
 127:			;
 128:	10BE .. 10FF 00		defs	wdbboot+256-$	; free space on IPL ram
 129:			;
 130:	0100          		.dephase
 131:			;
 132:			;********************************************************
 133:			;*							*
 134:			;*		CP/M 2 Operating System			*
 135:			;*							*
 136:			;********************************************************
 137:			;
 138:	0000          	if asmcpm
 140:			endif
 141:			;
 142:			;********************************************************
 143:			;*							*
 144:			;*			BIOS				*
 145:			;*							*
 146:			;********************************************************
 147:			;
 148:			;	jump vector for individual subroutines
 149:			;
 150:	EE00          		.phase	bios		; origin of this program
 151:			;
 152:	EE00  C317EF  		jp	boot		; cold start
 153:	EE03          	wboote:
 154:	EE03  C31DEF  		jp	wboot		; warm start
 155:	EE06  C3DCEF  		jp	const		; console status
 156:	EE09  C3E8EF  		jp	conin		; console character in
 157:	EE0C  C3F9EF  		jp	conout		; console character out
 158:	EE0F  C30EF0  		jp	listd		; list character out
 159:	EE12  C32AF0  		jp	punch		; punch character out
 160:	EE15  C32BF0  		jp	reader		; reader character in
 161:	EE18  C35FF0  		jp	home		; move head to home position
 162:	EE1B  C33EF0  		jp	seldsk		; select disk
 163:	EE1E  C362F0  		jp	settrk		; set track number
 164:	EE21  C373F0  		jp	setsec		; set sector number
 165:	EE24  C378F0  		jp	setdma		; set dma address
 166:	EE27  C37DF0  		jp	read		; read disk
 167:	EE2A  C382F0  		jp	write		; write disk
 168:	EE2D  C31CF0  		jp	listst		; return list status
 169:	EE30  C367F0  		jp	sectran		; sector translate
 170:			;
 171:			;
 172:			;
 173:			;********************************************************
 174:			;* D P B T A B L E					*
 175:			;*							*
 176:			;*	W/F  Size  B/S   S/T  Trk  Hds  R/T  Capacity	*
 177:			;* -	--- ------ ---   --   ---  ---  --- ---------	*
 178:			;* A: = wdd   5"   256	 32   360			*
 179:			;* B: = wdd   5"   256	 32   360			*
 180:			;* C: = fdd   5"   256	 10				*
 181:			;* D: = fdd   5"   256	 10				*
 182:			;* E: = fdd   5"   128	 17				*
 183:			;* F: = fdd   5"   128	 17				*
 184:			;*							*
 185:			;********************************************************
 186:			;
 187:			;
 188:	EE33          	dpbase	equ	$	; base of disk parameter header
 189:			;
 190:				; dpe0,dpe1 = disk parameter header for hard disk
 191:	EE33          	dpe0:
 192:	EE33  00000000		defw	xlt0, 0000h	; no translate table
 193:	EE37  00000000		defw	0000h, 0000h	; scratch area
 194:	EE3B  00F5CCEE		defw	dirbuf, dpb0	; dir buff, parm block
 195:	EE3F  91F6DCF5		defw	csv0, alv0	; check, alloc vector
 196:	EE43          	dpe1:
 197:	EE43  00000000		defw	xlt0, 0000h	; no translate table
 198:	EE47  00000000		defw	0000h, 0000h	; scratch area
 199:	EE4B  00F5DBEE		defw	dirbuf, dpb01	; dir buff, parm block
 200:	EE4F  46F791F6		defw	csv1, alv1	; check, alloc vector
 201:			;
 202:				; dpe2,dpe3 = disk parameter header for floppy disk (256 byte/sec)
 203:	EE53          	dpe2:	; 256 byte/sec - Single Side
 204:	EE53  93EE0000		defw	xlt1, 0000h	; translate table
 205:	EE57  00000000		defw	0000h, 0000h	; scratch area
 206:	EE5B  00F5EAEE		defw	dirbuf,dpb1	; dir buff,parm block
 207:	EE5F  8CF580F5		defw	csv2,alv2	; check,alloc vector
 208:				;
 209:	EE63          	dpe3:	; 256 byte/sec - Single Side
 210:	EE63  93EE0000		defw	xlt1,0000h	; translate table
 211:	EE67  00000000		defw	0000h,0000h	; scratch area
 212:	EE6B  00F5F9EE		defw	dirbuf,dpb12	; dir buff,parm block
 213:	EE6F  A8F59CF5		defw	csv3,alv3	; check,alloc vector
 214:			;
 215:				; dpe4,dpe5 = disk parameter header for floppy disk (128 byte/sec)
 216:	EE73          	dpe4:	; 128 byte/sec - Single Side
 217:	EE73  BBEE0000		defw	xlt2,0000h	; translate table
 218:	EE77  00000000		defw	0000h,0000h	; scratch area
 219:	EE7B  00F508EF		defw	dirbuf,dpb2	; dir buff,parm block
 220:	EE7F  C2F5B8F5		defw	csv4,alv4	; check,alloc vector
 221:				;
 222:	EE83          	dpe5:	; 128 byte/sec - Single Side
 223:	EE83  BBEE0000		defw	xlt2,0000h	; translate table
 224:	EE87  00000000		defw	0000h,0000h	; scratch area
 225:	EE8B  00F508EF		defw	dirbuf,dpb2	; dir buff,parm block
 226:	EE8F  D4F5CAF5		defw	csv5,alv5	; check,alloc vector
 227:			;
 228:			;
 229:	0000          	xlt0	equ	0		; no sector translate for hard disk
 230:			;
 231:	EE93          	xlt1:
 232:				; sector translate table for floppy disk (256 byte/sec)
 233:	EE93  01020D0E		defb	1,2,13,14,5,6,17,18,9,10,3,4,15,16,7,8,19,20,11,12
	      05061112
	      090A0304
	      0F100708
	      13140B0C
 234:	EEA7  15162122		defb	21,22,33,34,25,26,37,38,29,30,23,24,35,36,27,28,39,40,31,32
	      191A2526
	      1D1E1718
	      23241B1C
	      27281F20
 235:			;
 236:	EEBB          	xlt2:
 237:				; sector translate table for floppy disk (128 byte/sec)
 238:	EEBB  01070D02		defb	1,7,13,2,8,14,3,9,15
	      080E0309
	      0F
 239:	EEC4  040A1005		defb	4,10,16,5,11,17,6,12
	      0B11060C
 240:			;
 241:			;
 242:	EECC          	dpb0:
 243:				; disk parameter block for hard disk 0 (256 byte/sector 1 res. trk)
 244:	EECC  8000    		defw	128		; SPT (sec/trk) (32 sect * (256/128) * 2 side)
 245:	EECE  05      		defb	5		; BSH
 246:	EECF  1F      		defb	31		; BLM
 247:	EED0  01      		defb	1		; EXM (extent mask)
 248:	EED1  9B05    		defw	1435		; DSM (disk size in BLS units - 1) (5740 kbyte)
 249:	EED3  FF03    		defw	1023		; DRM (directory elements - 1)
 250:	EED5  FF      		defb	11111111b	; AL0
 251:	EED6  00      		defb	00000000b	; AL1
 252:	EED7  0000    		defw	0		; CKS disk fixed, no dir. check vector
 253:	EED9  0100    		defw	1		; OFF (track offset)
 254:			;
 255:	EEDB          	dpb01:
 256:				; disk parameter block for hard disk 1 (256 byte/sector no res. trk)
 257:	EEDB  8000    		defw	128		; SPT (sec/trk) (32 sect * (256/128) * 2 side)
 258:	EEDD  05      		defb	5		; BSH
 259:	EEDE  1F      		defb	31		; BLM
 260:	EEDF  01      		defb	1		; EXM (extent mask)
 261:	EEE0  9F05    		defw	1439		; DSM (disk size in BLS units - 1) (5756 kbyte)
 262:	EEE2  FF03    		defw	1023		; DRM (directory elements - 1)
 263:	EEE4  FF      		defb	11111111b	; AL0
 264:	EEE5  00      		defb	00000000b	; AL1
 265:	EEE6  0000    		defw	0		; CKS disk fixed, no dir. check vector
 266:	EEE8  0000    		defw	0		; OFF (track offset)
 267:			;
 268:			;
 269:	EEEA          	dpb1:
 270:				; disk parameter block for floppy disk
 271:				; 256 byte/sector - Single Side
 272:	EEEA  1400    		defw	20		; SPT (sec/trk) (10 sect * (256/128) * 1 side)
 273:	EEEC  04      		defb	4		; BSH
 274:	EEED  0F      		defb	15		; BLM
 275:	EEEE  01      		defb	1		; EXM (extent mask)
 276:	EEEF  2D00    		defw	45		; DSM (disk size in BLS unit) (90 kbyte)
 277:	EEF1  3F00    		defw	63		; DRM (directory elements - 1)
 278:	EEF3  80      		defb	10000000b	; AL0
 279:	EEF4  00      		defb	00000000b	; AL1
 280:	EEF5  1000    		defw	16		; CKS = (DRM + 1)/4 (size dir. check vect.)
 281:	EEF7  0300    		defw	3		; OFF (track offset)
 282:			;
 283:	EEF9          	dpb12:
 284:				; disk parameter block for floppy disk
 285:				; 256 byte/sector - Single Side
 286:	EEF9  2800    		defw	40		; SPT (sec/trk) (10 sect * (256/128))
 287:	EEFB  04      		defb	4		; BSH
 288:	EEFC  0F      		defb	15		; BLM
 289:	EEFD  01      		defb	1		; EXM (extent mask)
 290:	EEFE  5E00    		defw	94		; DSM (disk size in BLS unit) (90 kbyte)
 291:	EF00  3F00    		defw	63		; DRM (directory elements - 1)
 292:	EF02  80      		defb	10000000b	; AL0
 293:	EF03  00      		defb	00000000b	; AL1
 294:	EF04  1000    		defw	16		; CKS = (DRM + 1)/4 (size dir. check vect.)
 295:	EF06  0200    		defw	2		; OFF (track offset)
 296:			;
 297:			;
 298:	EF08          	dpb2:
 299:				; disk parameter block for floppy disk (128 byte/sector)
 300:	EF08  1100    		defw	17		; SPT (SEC/trk)
 301:	EF0A  03      		defb	3		; BSH
 302:	EF0B  07      		defb	7		; BLM
 303:	EF0C  00      		defb	0		; EXM (extent mask)
 304:	EF0D  4D00    		defw	77		; DSM (disk size in BLS unit) (77 kbyte)
 305:	EF0F  1F00    		defw	31		; DRM (directory elements - 1)
 306:	EF11  80      		defb	10000000b	; AL0
 307:	EF12  00      		defb	00000000b	; AL1
 308:	EF13  0800    		defw	8		; CKS = (DRM + 1)/4 (size dir. check vect.)
 309:	EF15  0300    		defw	3		; OFF (track offset)
 310:			;
 311:			;
 312:			;
 313:			;********************************************************
 314:			;* B O O T						*
 315:			;*		Exec a Cold Boot			*
 316:			;********************************************************
 317:			;
 318:	EF17          	boot:
 319:				; set A = sysflag and go to bootrom
 320:	EF17  3A50F2  		ld	a,(sysflag)	; if A = 0 then load IPL from WDD
 321:	EF1A  C321F0  		jp      bootrom		; else from FDD
 322:			;
 323:			;
 324:			;
 325:			;********************************************************
 326:			;* W B O O T						*
 327:			;*		Load bdos + ccp				*
 328:			;*		From wdd or Single/Side Fdd		*
 329:			;********************************************************
 330:			;
 331:	EF1D          	wboot:
 332:	EF1D  318000  		ld	sp,stack	; set stack pointer
 333:	EF20  CD41F1  		call	WrtPng		; Write any pending sector
 334:	EF23  210400  		ld	hl,CurDsk	; point to cp/m log disk
 335:	EF26  7E      		ld	a,(hl)		; load cp/m logical disk
 336:	EF27  E60F    		and     00001111b	; mask out User
 337:	EF29  FE06    		cp	maxdsk		; disk overflow ?
 338:	EF2B  3802    		jr	c,wb_1		; no, then go to wboot
 339:	EF2D          	wb_0:
 340:	EF2D  3600    		ld	(hl),0		; else clear cp/m log disk
 341:							; H=0
 342:	EF2F          	wb_1:
 343:				; Set parameter,
 344:				; then load from Hard or Floppy Disk
 345:	EF2F  210000  		ld	hl,0		; HL=0
 346:	EF32  227BF2  		ld	(PrePhy),hl	; Dsk 0 - side 0 & low Track=0
 347:	EF35  2602    		ld	h,2		; Sector #2
 348:	EF37  227DF2  		ld	(PreTrk+1),hl	; Set High Trk=0 & Sector #2
 349:	EF3A  2616    		ld	h,cpmsiz	; ccp + bdos size in sector number
 350:	EF3C  2281F2  		ld	(PreR.W),hl	; set Read op. and # of sec (for wdd)
 351:	EF3F  2100D8  		ld	hl,ccp		; Cp/m starting add
 352:	EF42  227FF2  		ld	(PreDma),hl	; set it
 353:				;
 354:				; Hard or Floppy ?
 355:				;
 356:	EF45  3A50F2  		ld	a,(sysflag)	; load system flag
 357:	EF48  B7      		or	a		; sysflag = 0 ?
 358:	EF49  200B    		jr	nz,fd_wb	; no, load from floppy
 359:	EF4B          	wd_wb:
 360:				; load from hard disk
 361:	EF4B  217BF2  		ld	hl,PrePhy	; H.L = wdd boot para adrs
 362:	EF4E  CD1BF0  		call	wdio		; call wdd read
 363:	EF51  B7      		or	a		; wdd i/o error ?
 364:	EF52  207F    		jr	nz,exboot	; yes, then retry
 365:	EF54  182C    		jr	syschk		; no, then go to system check
 366:			;
 367:	EF56          	fd_wb:
 368:				; load cp/m from floppy disk
 369:	EF56  0616    		ld	b,cpmsiz	; ccp + bdos size in sector number
 370:	EF58  11CAEF  		ld	de,wbxlt+1	; D.E = sector translate table
 371:	EF5B          	fd_wb.3:
 372:	EF5B  C5      		push	bc		; save sector count
 373:	EF5C  D5      		push	de		; save xlt1 pointer
 374:	EF5D  1A      		ld	a,(de)		; load physical sector
 375:	EF5E  327EF2  		ld	(PreSec),a	; set physical sector number
 376:	EF61  217BF2  		ld	hl,PrePhy	; H.L = boot para adrs
 377:	EF64  CD15F0  		call	fdiod		; read 256 byte
 378:	EF67  D1      		pop	de		;
 379:	EF68  C1      		pop	bc		;
 380:	EF69  B7      		or	a		; read error ?
 381:	EF6A  2067    		jr	nz,exboot	; yes, then retry
 382:	EF6C  2180F2  		ld	hl,PreDma+1	; HL = high current dma adrs
 383:	EF6F  34      		inc	(hl)		; DMA=DMA+256
 384:	EF70  05      		dec	b		; warm boot end ?
 385:	EF71  280F    		jr	z,syschk	; yes, then go to system check
 386:	EF73  13      		inc	de		; xlt1 pointer + 1
 387:	EF74  7B      		ld	a,e		;
 388:	EF75  FED3    		cp	low (wbxlt+fddsec); end of track ?
 389:	EF77  20E2    		jr	nz,fd_wb.3	; no, load next sector
 390:	EF79  217CF2  		ld	hl,PreTrk	; H.L = track para adrs
 391:	EF7C  34      		inc	(hl)		;track = track + 1
 392:	EF7D  11C9EF  		ld	de,wbxlt	; point to start xlt table
 393:	EF80  18D9    		jr	fd_wb.3		; load first sector to next track
 394:				;
 395:				; CP/M has been loaded
 396:	EF82          	syschk:
 397:				; cp/m system check
 398:	EF82  3A02D8  		ld	a,(ccp+2)	; load third data of cp/m
 399:	EF85  FEDB    		cp	high (ccp+35Ch)	; check for correct jp andress
 400:	EF87  204A    		jr	nz,exboot	; no, error
 401:	EF89  3EC3    		ld	a,0c3h		; jump command
 402:	EF8B  320000  		ld	(0000),a	; location 0000h
 403:	EF8E  2103EE  		ld	hl,wboote	; wboot address
 404:	EF91  220100  		ld	(0001),hl	;
 405:	EF94  320500  		ld	(0005),a	; location 0005h
 406:	EF97  2106E0  		ld	hl,bdos		; bdos address
 407:	EF9A  220600  		ld	(0006),hl	;
 408:	EF9D  3EFF    		ld	a,0ffh		; A = 0ffh
 409:	EF9F  327AF2  		ld	(PreDsk),a	; Physic disk para -> 'ff'
 410:	EFA2  2100F4  		ld	hl,defbuf	; Default Buffer
 411:	EFA5  227FF2  		ld	(PreDma),hl	; set it
 412:	EFA8  018000  		ld	bc,defldma	; BC = default dma adrs
 413:	EFAB  CD78F0  		call	setdma		; cp/m dma = 0080h
 414:	EFAE  3A0400  		ld	a,(CurDsk)	; load cp/m Default disk
 415:	EFB1  4F      		ld	c,a		;
 416:	EFB2  C300D8  		jp	ccp		; and jump to ccp
 417:				;
 418:	EFB5 .. EFC8 00		defs	20		; free space
 419:			;
 420:	EFC9          	wbxlt:
 421:	EFC9  01070309		defb	1,7,3,9,5,2,8,4,10,6
	      05020804
	      0A06
 422:			;
 423:			;
 424:	EFD3          	exboot:
 425:	EFD3          	exbot1:
 426:	EFD3  11BAF1  		ld	de,nosysmsg	; D.E = no system message
 427:	EFD6  CDAFF1  		call	msgcr		; print it and wait cr
 428:	EFD9  C32FEF  		jp	wb_1		; retry boot
 429:			;
 430:			;
 431:			;
 432:			;********************************************************
 433:			;*							*
 434:			;*	*** Logical Peripheral Device Sub ***		*
 435:			;*							*
 436:			;********************************************************
 437:			;
 438:			;
 439:			;********************************************************
 440:			;* C o n S t						*
 441:			;*	Return console status (A=-1 if char ready)	*
 442:			;********************************************************
 443:			;
 444:	EFDC          	const:
 445:	EFDC  3A0300  		ld	a,(iobyte)	; load intel i/o byte
 446:	EFDF  E603    		and	00000011b	; mask bit 0,1
 447:	EFE1  FE02    		cp	2		;
 448:	EFE3  DA09F0  		jp	c,csts		; jump rom console status
 449:	EFE6  1848    		jr	notdev		; jump no device
 450:			;
 451:			;
 452:			;********************************************************
 453:			;* C o n I n						*
 454:			;*	Read char from console				*
 455:			;********************************************************
 456:			;
 457:	EFE8          	conin:
 458:	EFE8  3A0300  		ld	a,(iobyte)	; load intel i/o byte
 459:	EFEB  E603    		and	00000011b	; mask bit 0,1
 460:	EFED  FE02    		cp	2		;
 461:	EFEF  303F    		jr	nc,notdev	; >1, no device
 462:							;
 463:	EFF1  DDE5    		push	IX		; preserve IX for Z80's prgm
 464:	EFF3  CD03F0  		call	cin		; rom console input
 465:	EFF6  DDE1    		pop	IX		; restore
 466:	EFF8  C9      		ret			; done
 467:			;
 468:			;
 469:			;********************************************************
 470:			;* C o n O u t						*
 471:			;*	Write C caracter on console			*
 472:			;********************************************************
 473:			;
 474:	EFF9          	conout:
 475:	EFF9  3A0300  		ld	a,(iobyte)	; load intel i/o byte
 476:	EFFC  E603    		and	00000011b	; mask bit 0,1
 477:	EFFE  FE02    		cp	2		; >1, then
 478:	F000  302E    		jr	nc,notdev	; jump no device
 479:							;
 480:	F002  DDE5    		push	IX		; Save
 481:	F004  FDE5    		push	IY		;	Register
 482:	F006  CD06F0  		call	cout		; call console output
 483:	F009  FDE1    		pop	IY		; Restore
 484:	F00B  DDE1    		pop	IX		;	Registers
 485:	F00D  C9      		ret			; done
 486:			;
 487:			;
 488:			;
 489:			;********************************************************
 490:			;*	P R I N T E R   S u b r o u t i n e		*
 491:			;********************************************************
 492:			;
 493:			;
 494:			;********************************************************
 495:			;* L i s t						*
 496:			;*	Write C caracter on printer			*
 497:			;********************************************************
 498:			;
 499:	F00E          	listd:
 500:	F00E  3A0300  		ld	a,(iobyte)	; load intel i/o byte
 501:	F011  E6C0    		and	11000000b	; mask bit 6,7
 502:	F013  FE80    		cp	080h		;
 503:	F015  DA06F0  		jp	c,cout		; jump rom console output
 504:	F018  CA0CF0  		jp	z,lout		; jump printer output
 505:	F01B  C9      		ret			; no device, data lost
 506:			;	jr	notdev		; jump no device
 507:			;
 508:			;********************************************************
 509:			;* L i s t S t						*
 510:			;*	Return printer status				*
 511:			;********************************************************
 512:			;
 513:	F01C          	listst:
 514:	F01C  3A0300  		ld	a,(iobyte)	; load intel i/o byte
 515:	F01F  E6C0    		and	11000000b	; mask bit 6,7
 516:	F021  FE80    		cp	080h		;
 517:	F023  DA09F0  		jp	c,csts		; jump rom console status
 518:	F026  CA0FF0  		jp	z,lsts		; jump printer status
 519:	F029  C9      		ret			; no device, now ret 11000000b
 520:				;jr	notdev		; jump no device
 521:			;
 522:			;
 523:			;
 524:			;********************************************************
 525:			;* S E R I A L   D E V I C E S   S u b r o u t i n e	*
 526:			;********************************************************
 527:			;
 528:			;
 529:			;********************************************************
 530:			;* P u n c h						*
 531:			;*	Puncher output					*
 532:			;********************************************************
 533:			;
 534:	F02A          	punch:
 535:	0000          		if	PUN		; if PUNcher exists
 545:				else			; no puncher devices
 546:	F02A  C9      		ret			; data lost
 547:				endif
 548:			;
 549:			;
 550:			;********************************************************
 551:			;* R e a d e r						*
 552:			;*	Reader input					*
 553:			;********************************************************
 554:			;
 555:	F02B          	reader:
 556:	0000          		if	RDR		; if ReaDeR exists
 565:				ELSE			; if no device
 566:	F02B  00      		nop			;
 567:	F02C  00      		nop			;
 568:	F02D  3E1A    		ld	a,'Z'-'@'	; set ^z = EOF
 569:	F02F  C9      		ret			; end
 570:				endif
 571:			;
 572:	F030          	notdev:
 573:				; print not device message and go to cpm
 574:	F030  3E81    		ld	a,DftI.O	; set default i/o byte
 575:	F032  320300  		ld	(iobyte),a	;
 576:	F035  113FF2  		ld	de,ndevmsg	; D.E = no device msg
 577:	F038  CD1EF0  		call	strout		; print it
 578:	F03B  C31DEF  		jp	wboot		; return to cp/m
 579:			;
 580:			;
 581:			;
 582:			;********************************************************
 583:			;*		Disk I/O Subroutine			*
 584:			;********************************************************
 585:			;
 586:			;
 587:			;********************************************************
 588:			;* S e l D s k						*
 589:			;*		Select logical disk from reg. C		*
 590:			;*		Ret HL=.DPB or 0 if error		*
 591:			;********************************************************
 592:			;
 593:	F03E          	SelDsk:
 594:	F03E  210000  		ld	hl,0		; return 0000h if error
 595:	F041  79      		ld	a,c		;
 596:	F042  FE06    		cp	maxdsk		; too large ?
 597:	F044  D0      		ret	nc		; leave HL = 0000
 598:			;
 599:	F045  3A50F2  		ld	a,(sysflag)	; load system flag
 600:	F048  B7      		or	a		; if system flag = 0 then disk
 601:	F049  79      		ld	a,c		;	 restore disk # on a
 602:	F04A  2806    		jr	z,SDsk.1	; A,B = hard disk; C,D = floppy disk
 603:	F04C  FE04    		cp	wddsiz+fddsiz	; Disk # > D:
 604:	F04E  3002    		jr	nc,SDsk.1	; yes, no exchange
 605:	F050  EE02    		xor	00000010b	; A,B -> C,D and vice-versa
 606:							; A,B = floppy disk; C,D = hard disk
 607:	F052          	SDsk.1:
 608:	F052  3272F2  		ld	(LogDsk),a	; set logical disk number
 609:	F055  6F      		ld	l,a		; L = disk number
 610:	F056  29      		add	hl,hl		; HL = disk number * 16
 611:	F057  29      		add	hl,hl		; HL = disk number * 16
 612:	F058  29      		add	hl,hl		; HL = disk number * 16
 613:	F059  29      		add	hl,hl		; HL = disk number * 16
 614:	F05A  1133EE  		ld	de,dpbase	;
 615:	F05D  19      		add	hl,de		;H.L disk table adrs
 616:	F05E  C9      		ret
 617:			;
 618:			;
 619:			;********************************************************
 620:			;* H O M E						*
 621:			;*		Select logical track 0			*
 622:			;********************************************************
 623:			;
 624:	F05F          	Home:
 625:	F05F  010000  		ld	bc,0		; Track #0000
 626:			;
 627:			;
 628:			;********************************************************
 629:			;* S e t T r k						*
 630:			;*		Select logical track from reg.s BC	*
 631:			;********************************************************
 632:			;
 633:	F062          	SetTrk:
 634:			;
 635:	F062  ED4374F2		ld	(LogTrk),bc	; Save low and high byte
 636:	F066  C9      		ret			;
 637:			;
 638:			;
 639:			;********************************************************
 640:			;* S e t T r a n					*
 641:			;*		Translate the BC sector using trans	*
 642:			;*		table pointed by DE			*
 643:			;********************************************************
 644:			;
 645:	F067          	SecTran:
 646:	F067  EB      		ex	de,hl		; H.L = sectran table adrs
 647:	F068  7D      		ld	a,l		; check for -> 0000
 648:	F069  B4      		or	h		; this means no sec tran
 649:	F06A  09      		add	hl,bc		; compute sector (BC = sec num)
 650:	F06B  2804    		jr	z,Strn_5	; no sec tran
 651:	F06D  6E      		ld	l,(hl)		; get trans sector
 652:	F06E  2600    		ld	h,0		; high = 0
 653:	F070  C9      		ret			; done
 654:	F071          	Strn_5:
 655:	F071  2C      		inc	l		; convert to base 1
 656:	F072  C9      		ret
 657:			;
 658:			;
 659:			;********************************************************
 660:			;* S e t S e c						*
 661:			;*		Set sector from registers BC		*
 662:			;********************************************************
 663:			;
 664:	F073          	SetSec:
 665:	F073  79      		ld	a,c		; Only low byte
 666:	F074  3271F2  		ld	(LogSec),a	; because sector < 256
 667:	F077  C9      		ret			;
 668:			;
 669:			;
 670:			;********************************************************
 671:			;* S e t D M A						*
 672:			;*		Set DMA address from registers BC	*
 673:			;********************************************************
 674:			;
 675:	F078          	SetDMA:
 676:	F078  ED4377F2		ld	(LogDMA),bc	; set logical DMA
 677:	F07C  C9      		ret
 678:			;
 679:			;
 680:			;********************************************************
 681:			;* R e a d						*
 682:			;*		Read sector specified by prev param	*
 683:			;*		@ spec DMA (ret A=-1 if error)		*
 684:			;********************************************************
 685:			;
 686:	F07D          	read:
 687:	F07D  AF      		xor	a		; set disk read operation
 688:	F07E  0E02    		ld	c,wrual		; write type (to unallocated)
 689:	F080  1802    		jr	rw00		;
 690:			;
 691:			;
 692:			;********************************************************
 693:			;* W r i t e						*
 694:			;*		Write sector specified by prev param	*
 695:			;*		from spec DMA (ret A=-1 if error)	*
 696:			;********************************************************
 697:			;
 698:	F082          	write:
 699:	F082  3E01    		ld	a,1		; set write operation
 700:	F084          	rw00:
 701:	F084  3279F2  		ld	(LogR.W),a	; set read or write operation
 702:	F087  1172F2  		ld	de,LogDsk	; DE. LogDsk
 703:	F08A  1A      		ld	a,(de)		; A = Logical Disk number
 704:	F08B  FE04    		cp	wddsiz+fddsiz	; check for 256 byte/sec dsk
 705:	F08D  3831    		jr	c,RW256		; yes, jump to it
 706:			;
 707:			;
 708:			;********************************************************
 709:			;* R W 1 2 8	- 	Read o Write 128 byte/sec dsk	*
 710:			;*		Write pending sectors			*
 711:			;*		just read or write sector		*
 712:			;*		set no sector buffered			*
 713:			;********************************************************
 714:			;
 715:	F08F          	RW128:
 716:	F08F  E601    		and	1		; mask bit 1 for unit select
 717:	F091  3273F2  		ld	(PhyDsk),a	; set Disk Unit & Side 0
 718:	F094  CD41F1  		call	WrtPng		; Write Pending Sectors
 719:	F097  3A71F2  		ld	a,(LogSec)	;
 720:	F09A  3276F2  		ld	(PhySec),a	; Physical sector = Logical
 721:	F09D          	RW128.1:
 722:	F09D  2173F2  		ld	hl,PhyDsk	; Point to Operation Table
 723:	F0A0  CD12F0  		call	fdios		; read o write 128 byte
 724:	F0A3  217AF2  		ld	hl,PreDsk	; Point to Sector Buffered tbl
 725:	F0A6  36FF    		ld	(hl),0ffh	; set no sector buffered
 726:	F0A8  B7      		or	a		;fdd i/o error ?
 727:	F0A9  C8      		ret	z		; no, then normal return
 728:	F0AA  11FEF1  		ld	de,ioerrmsg	; D.E = Disk err message
 729:	F0AD  CD1EF0  		call	strout		; print it
 730:	F0B0  CD03F0  		call	cin		; wait one char.
 731:	F0B3  FE8D    		cp	cr		; is return ?
 732:	F0B5  28E6    		jr	z,RW128.1	; yes, then retry
 733:	F0B7  FE03    		cp	'C'-'@'		; is cntrl C ?
 734:	F0B9  CA1DEF  		jp	z,wboot		; yes, wboot
 735:	F0BC  3E01    		ld	a,1		; Set error
 736:	F0BE  B7      		or	a		; set flag
 737:	F0BF  C9      		ret			; ret with operation status on A
 738:			;
 739:			;
 740:			;********************************************************
 741:			;* R W 2 5 6	- 	Read o Write 256 byte/sec dsk	*
 742:			;********************************************************
 743:			;
 744:	F0C0          	RW256:
 745:	F0C0  2640    		ld	h,wddspt	; if disk number is 0 or 1
 746:	F0C2  FE02    		cp	wddsiz		; then H = wdd sector/track
 747:	F0C4  3802    		jr	c,R256.1	;
 748:	F0C6  2614    		ld	h,fddspt	; else H = fdd sector/track
 749:	F0C8          	R256.1:
 750:	F0C8  79      		ld	a,c		; get &
 751:	F0C9  3284F2  		ld	(WrType),a	; set CP/M write type
 752:	F0CC  1B      		dec	de		; DE. LogSec
 753:	F0CD  1A      		ld	a,(de)		; Get Logical Sector
 754:	F0CE  3D      		dec	a		; to base 0
 755:	F0CF  2E00    		ld	l,0		; initial side = 0
 756:	F0D1          	R256.2:
 757:	F0D1  BC      		cp	h		; repeat until
 758:	F0D2  3804    		jr	c,R256.3	; log sec < sec /trk
 759:	F0D4  2C      		inc	l		; side up
 760:	F0D5  94      		sub	h		; log sec = log sec - sec/trk
 761:	F0D6  18F9    		jr	R256.2		; retry
 762:	F0D8          		R256.3:
 763:	F0D8  B7      		or	a		;carry = 0
 764:	F0D9  1F      		rra			; A = A/2
 765:	F0DA  3C      		inc	a		; to base 1
 766:	F0DB  3276F2  		ld	(PhySec),a	; Set physical sector
 767:	F0DE  CB25    		sla	l		; to bit 4
 768:	F0E0  CB25    		sla	l		; to bit 4
 769:	F0E2  CB25    		sla	l		; to bit 4
 770:	F0E4  CB25    		sla	l		; to bit 4
 771:	F0E6  13      		inc	de		; DE.LogDsk
 772:	F0E7  1A      		ld	a,(de)		; get LogDsk
 773:	F0E8  E601    		and	1		; only unit number
 774:	F0EA  B5      		or	l		; merge side
 775:	F0EB  3273F2  		ld	(PhyDsk),a	; set unit and side
 776:				;
 777:	F0EE  0605    		ld	b,5		; byte count for old-new para compare
 778:							; D.E => CP/M	Disk para (new)
 779:	F0F0  217AF2  		ld	hl,PreDsk	; H.L =>	Disk para (old)
 780:	F0F3          	rw01:
 781:				; compare old para with new para (dsk,sid,trk,sec)
 782:	F0F3  1A      		ld	a,(de)		; A = new para
 783:	F0F4  BE      		cp	(hl)		; (hl) = old para
 784:	F0F5  2006    		jr	nz,wtchk	; new <> old
 785:	F0F7  23      		inc	hl		; next para adrs
 786:	F0F8  13      		inc	de		;
 787:	F0F9  10F8    		djnz	rw01		; repeat until end para
 788:	F0FB  1814    		jr	match		; dsk, sid,trk,sec,equ
 789:	F0FD          	wtchk:
 790:	F0FD  CD41F1  		call	WrtPng		; Write Pending Sectors
 791:	F100  C0      		ret	nz		; return if error
 792:				;
 793:	F101  010500  		ld	bc,5		; 5 parameters
 794:	F104  2172F2  		ld	hl,LogDsk	; H.L = new para adrs
 795:	F107  117AF2  		ld	de,PreDsk	; D.E = old para adrs
 796:	F10A  EDB0    		ldir			; new para -> old para
 797:	F10C  CD4DF1  		call	diskrd		; disk read
 798:	F10F  B7      		or	a		; read error ?
 799:	F110  C0      		ret	nz		; error return
 800:	F111          	match:
 801:	F111  3A71F2  		ld	a,(LogSec)	; load logical sector
 802:	F114  3D      		dec	a		; convert to base 0
 803:	F115  E601    		and	secmsk		; sector mask
 804:	F117  67      		ld	h,a
 805:	F118  2E00    		ld	l,0		; get high or low buff adrs
 806:	F11A  CB3C    		srl	h		; HL=HL*128=(*256)/2
 807:	F11C  CB1D    		rr	l
 808:	F11E  1100F4  		ld	de,defbuf	; D.E = phys sector buff start adrs
 809:	F121  19      		add	hl,de		; H.L = log sector buff start adrs
 810:	F122  ED5B77F2		ld	de,(LogDma)	; D.E = user dma adrs
 811:	F126  018000  		ld	bc,128		; BC = moving count
 812:	F129  3A79F2  		ld	a,(LogR.W)	; load r/w flag
 813:	F12C  B7      		or	a		; read ?
 814:	F12D  2804    		jr	z,rwbuf		;
 815:	F12F  3283F2  		ld	(WrtFlg),a	; write flag on (A=1)
 816:	F132  EB      		ex	de,hl		; H.L = user dma adrs
 817:	F133          	rwbuf:
 818:	F133  EDB0    		ldir			; move (hl) to (de)
 819:	F135  3A84F2  		ld	a,(WrType)	; load write type
 820:	F138  FE01    		cp	wrdir		; directory write ?
 821:	F13A  3E00    		ld	a,0		; prepare no errors
 822:	F13C  CC41F1  		call	z,WrtPng	; yes, write Phys sector
 823:	F13F  B7      		or	a		; set flags
 824:	F140  C9      		ret			; return status (A)
 825:			;
 826:			;
 827:			;********************************************************
 828:			;* W r t P n g						*
 829:			;*		Check for pending Sectors		*
 830:			;*		Write if active				*
 831:			;********************************************************
 832:			;
 833:	F141          	WrtPng:
 834:	F141  2183F2  		ld	hl,WrtFlg
 835:	F144  7E      		ld	a,(hl)		; get flag
 836:	F145  3600    		ld	(hl),0		; & clear
 837:	F147  B7      		or	a		; was active ?
 838:	F148  C8      		ret	z		; no, return
 839:	F149  CD50F1  		call	diskwt		; yes, write flush data
 840:	F14C  C9      		ret			; return status & flag
 841:			;
 842:			;
 843:			;********************************************************
 844:			;* D i s k R d						*
 845:			;*		Read Physical Sector			*
 846:			;********************************************************
 847:			;
 848:	F14D          	diskrd:
 849:				; disk read
 850:	F14D  AF      		xor	a		; 0 = read
 851:	F14E  1802    		jr	rdwt
 852:			;
 853:			;
 854:			;********************************************************
 855:			;* D i s k W t						*
 856:			;*		Write Physical Sector			*
 857:			;********************************************************
 858:			;
 859:	F150          	diskwt:
 860:				; disk write
 861:	F150  3E01    		ld	a,1		; 1 = write
 862:	F152          		rdwt:
 863:	F152  3281F2  		ld	(PreR.W),a	; set r/w para
 864:	F155          	rdwt0:
 865:	F155  217BF2  		ld	hl,PrePhy	; H.L = i/o para adrs
 866:	F158  3A7AF2  		ld	a,(PreDsk)	; load i/o unit number
 867:	F15B  FE02    		cp	wddsiz		; wdd i/o ?
 868:	F15D  3015    		jr	nc,fdrdwt	; no, then fdd i/o
 869:	F15F          	wdrdwt:
 870:	F15F  3E01    		ld	a,1		; one sector to wdd i/o
 871:	F161  3282F2  		ld	(PreBlk),a	; set wdd sector block
 872:	F164  CD1BF0  		call	wdio		; exec. wdd i/o
 873:	F167  B7      		or	a		; i/o error ?
 874:	F168  C8      		ret	z		; no, then normal return
 875:	F169  CD8DF1  		call	SendErr		; Print Error Code
 876:				;
 877:	F16C          	NoBuff:
 878:	F16C          	rdwterr:
 879:	F16C  3EFF    		ld	a,0ffh		; set no sector buffered
 880:	F16E  327AF2  		ld	(PreDsk),a	;
 881:	F171  E601    		and	1		; A=1
 882:	F173  C9      		ret
 883:	F174          	fdrdwt:
 884:	F174          	fdrw1:
 885:	F174  CD15F0  		call	fdiod		; r/w 256 byte
 886:	F177          	fdrw2:
 887:	F177  B7      		or	a		; fdd i/o error ?
 888:	F178  C8      		ret	z		; no, then normal return
 889:	F179  11FEF1  		ld	de,ioerrmsg	; D.E = Disk err message
 890:	F17C  CD1EF0  		call	strout		; print it
 891:	F17F  CD03F0  		call	cin		; wait one char.
 892:	F182  FE8D    		cp	cr		; is return ?
 893:	F184  28CF    		jr	z,rdwt0		; yes, then retry
 894:	F186  FE03    		cp	'C'-'@'		; is cntrl C ?
 895:	F188  20E2    		jr	nz,NoBuff	; Set Error and no sector buff
 896:	F18A  C303EE  		jp	wboote		; else go to wboot
 897:			;
 898:			;
 899:			;
 900:			;********************************************************
 901:			;*		Send Error Message on console		*
 902:			;********************************************************
 903:			;
 904:	F18D          	SendErr:
 905:	F18D  F5      		push	af		; save character
 906:	F18E  0F      		rrca			; get 4 msb's
 907:	F18F  0F      		rrca			; get 4 msb's
 908:	F190  0F      		rrca			; get 4 msb's
 909:	F191  0F      		rrca			; get 4 msb's
 910:	F192  CDA6F1  		call	HxChar		; print 4 msb's
 911:	F195  32F8F1  		ld	(ErrHig),a	; store high Error code
 912:	F198  F1      		pop	af		; get 4 lsb's
 913:	F199  CDA6F1  		call	HxChar		;
 914:	F19C  32F9F1  		ld	(ErrLow),a	; store low Error code
 915:	F19F  11EEF1  		ld	de,ErrMsg	;
 916:	F1A2  CD1EF0  		call	strout		; print it
 917:	F1A5  C9      		ret			;done
 918:				;
 919:				; Convert A low nibble in Hex ASCII Char
 920:				;
 921:	F1A6          	HxChar:
 922:	F1A6  E60F    		and	0Fh		; keep 4 lsb's
 923:	F1A8  C690    		add	a,90h		; develop a supplement of 6
 924:	F1AA  27      		daa			; and carry
 925:	F1AB  CE40    		adc	a,'@'		; sum ASCII offset
 926:	F1AD  27      		daa			;
 927:	F1AE  C9      		ret
 928:			;
 929:			;
 930:			;
 931:	F1AF          	msgcr:
 932:				; print string pointed by DE and wait cr
 933:	F1AF  CD1EF0  		call	strout		; print it
 934:	F1B2          	waitcr:
 935:	F1B2  CD03F0  		call	cin		; wait one char.
 936:	F1B5  FE8D    		cp	cr		; cr ?
 937:	F1B7  20F9    		jr	nz,waitcr	;
 938:	F1B9  C9      		ret
 939:			;
 940:			;
 941:			;
 942:			;********************************************************
 943:			;*							*
 944:			;*		Initialized RAM data areas		*
 945:			;*							*
 946:			;********************************************************
 947:			;
 948:	F1BA          	nosysmsg:
 949:	F1BA  8D8A8753		defb	cr,lf,bell,'Set system diskette in disk A,',cr,lf
	      65742073
	      79737465
	      6D206469
	      736B6574
	      74652069
	      6E206469
	      736B2041
	      2C8D8A
 950:	F1DD  6F6B2070		defb	'ok push return. ',endmsg
	      75736820
	      72657475
	      726E2E20
	      24
 951:			;
 952:	F1EE          	ErrMsg:
 953:	F1EE  8D8A8745		defb	cr,lf,bell,'Error #'
	      72726F72
	      2023
 954:	F1F8  30      	ErrHig:	defb	'0'
 955:	F1F9  30      	ErrLow:	defb	'0'
 956:	F1FA  202D2024		defb	' - ',endmsg
 957:			;
 958:			;
 959:	F1FE          	ioerrmsg:
 960:	F1FE  8D8A8744		defb	cr,lf,bell,'DISK I/O ERROR',cr,lf
	      49534B20
	      492F4F20
	      4552524F
	      528D8A
 961:	F211  3C524554		defb	'<RETURN> retry, ^C abort, any key to continue'
	      55524E3E
	      20726574
	      72792C20
	      5E432061
	      626F7274
	      2C20616E
	      79206B65
	      7920746F
	      20636F6E
	      74696E75
	      65
 962:	F23E  24      		defb	endmsg
 963:			;
 964:	F23F          	ndevmsg:
 965:	F23F  8D8A872E		defb	cr,lf,bell,'.NO Device.',cr,lf,endmsg
	      4E4F2044
	      65766963
	      652E8D8A
	      24
 966:			;
 967:			;
 968:			;
 969:			;********************************************************
 970:			;*		B i o s   INPUT/OUTPUT   Tables		*
 971:			;********************************************************
 972:			;
 973:	F250          	sysflag:
 974:	F250  00      		defb	0		; system flag for disk assignement
 975:			;
 976:	F251          	vidareas:
 977:				; video routine data areas
 978:	F251 .. F270 00		defs	32
 979:			;
 980:			; Logical Parameter Table
 981:			;
 982:	F271  01      	LogSec:	defb	1		; CP/M logical Sector number
 983:	F272  00      	LogDsk:	defb	0		; CP/M logical Disk number
 984:	F273  00      	PhyDsk:	defb	0		; Physical Disk Number
 985:	F274  0000    	LogTrk:	defw	0000		; Physical Track Number
 986:	F276  01      	PhySec:	defb	1		; Physical Sector Number
 987:	F277  8000    	LogDma:	defw	0080h		; CP/M logical Dma address
 988:	F279  00      	LogR.W:	defb	0		; CP/M logical R/W Flag
 989:			;
 990:			; Previous Parameter Table
 991:			;
 992:	F27A  FF      	PreDsk:	defb	0ffh		; Previous CP/M Disk
 993:	F27B  00      	PrePhy:	defb	0		; Previous Phys Disk
 994:	F27C  0000    	PreTrk:	defw	0000		; Previous Phys=Logical Track
 995:	F27E  01      	PreSec:	defb	1		; Previous Phys Sector
 996:	F27F  00F4    	PreDma:	defw	defbuf		; Physical DMA add
 997:	F281  00      	PreR.W:	defb	0		; Phys R/W operation
 998:	F282  01      	PreBlk:	defb	1		; Phys # of Sectors (for wdd)
 999:	F283  00      	WrtFlg:	defb	0		; Write Pending Flag
1000:	F284  01      	Wrtype:	defb	1		; BDos Write Type
1001:			;
1002:			;
1003:	F285 .. F3FF 00		defs	bios+600h-$		; free space on bios ram
1004:			;
1005:			;
1006:			;
1007:			;********************************************************
1008:			;*							*
1009:			;*		Disk data areas				*
1010:			;*							*
1011:			;********************************************************
1012:			;
1013:	F400 .. F4FF 00	defbuf:	defs	secsiz		; default i/o dma address
1014:	F500 .. F57F 00	dirbuf:	defs	128		; directory buffer
1015:			;
1016:			;
1017:			;********************************************************
1018:			;*		Allocation and check vectors		*
1019:			;********************************************************
1020:			;
1021:	F580 .. F58B 00	alv2:	defs	12		; alloc vector 2
1022:	F58C .. F59B 00	csv2:	defs	16		; check vector 2
1023:			;
1024:	F59C .. F5A7 00	alv3:	defs	12		; alloc vector 3
1025:	F5A8 .. F5B7 00	csv3:	defs	16		; check vector 3
1026:			;
1027:			;
1028:				; extfdd alloc and check vector
1029:			;
1030:	F5B8 .. F5C1 00	alv4:	defs	10		; alloc vector 4
1031:	F5C2 .. F5C9 00	csv4:	defs	8		; check vector 4
1032:			;
1033:	F5CA .. F5D3 00	alv5:	defs	10		; alloc vector 5
1034:	F5D4 .. F5DB 00	csv5:	defs	8		; check vector 5
1035:			;
1036:				; wdd alloc and check vector
1037:			;
1038:	F5DC .. F690 00	alv0:	defs	181		; alloc vector 0 (1440K/8)+1
1039:			csv0:	defs	0		; no check vector 0
1040:			;
1041:	F691 .. F745 00	alv1:	defs	181		; alloc vector 1 (1440K/8)+1
1042:			csv1:	defs	0		; no check vector 1
1043:			;
1044:	F746 .. F7FF 00		defs	bios+0a00h-$	; free space
1045:			;
1046:	0B00          		.dephase		; end of bios + data areas
1047:			; 	end 100h
1048:	0B00          		end



Statistics:

     5	passes
     0	jr promotions
   197	symbols
     0	bytes



Symbol Table:

alv0            f5dc     errhig          f1f8     rdwt            f152     
alv1            f691     errlow          f1f9     rdwt0           f155     
alv2            f580     errmsg          f1ee     rdwterr         f16c+    
alv3            f59c     exboot          efd3     read            f07d     
alv4            f5b8     exbot1          efd3+    reader          f02b     
alv5            f5ca     extfds         =   2+    rev            =  14+    
asmcpm         =   0+    false          =   0+    rever          =  48+    
backsp         =  88+    fd_wb           ef56     rom            =f000+    
bbtdma          1041+    fd_wb.3         ef5b     rw00            f084     
bbtdsk          103d     fdbboot         1003+    rw01            f0f3     
bbtermsg        1081     fdbbt1          103a     rw128           f08f+    
bbterr          102d     fddsec         =   a+    rw128.1         f09d     
bbtok           1012+    fddsiz         =   2+    rw256           f0c0     
bbtsec          1040+    fddspt         =  14+    rwbuf           f133     
bbttrk          103e+    fdiod          =f015+    sdsk.1          f052     
bbtxlt          1045+    fdios          =f012+    secmsk         =   1+    
bdos           =e006+    fdrdwt          f174     secsiz         = 100+    
bdose          =e000+    fdrw1           f174+    sectran         f067     
bell           =  87+    fdrw2           f177+    seldsk          f03e     
bias           =a400+    ffeed          =  8c+    senderr         f18d     
bios           =ee00+    flash          =  43+    setdma          f078     
biosl          = 600+    home            f05f     setsec          f073     
biossiz        =   6+    hxchar          f1a6     settrk          f062     
boot            ef17     iobyte         =   3+    spc            =  20+    
bootrom        =f021+    ioerrmsg        f1fe     stack          =  80+    
btprw           1043+    ipl            =1000+    stack1         =1000+    
ccp            =d800+    iplmsg          1006+    strn_5          f071     
cin            =f003+    lf             =  8a+    strout         =f01e+    
cmsize         =  3d+    listd           f00e     syschk          ef82     
compflg        =f02d+    listst          f01c     sysflag         f250     
conin           efe8     logdma          f277     tab            =  89+    
conout          eff9     logdsk          f272     true           =ffff+    
const           efdc     logr.w          f279     tty            =   1+    
cout           =f006+    logsec          f271     vers           =4853+    
cpmblk         =   2+    logtrk          f274     vidareas        f251     
cpml           =1600+    lout           =f00c+    vidinit        =f02a+    
cpmmsg          104b     lst            =   2+    wait1cr         1033     
cpmsiz         =  16+    lsts           =f00f+    waitcr          f1b2     
cr             =  8d+    match           f111     wb_0            ef2d+    
csts           =f009+    maxdsk         =   6+    wb_1            ef2f     
csv0            f691     movcurs        =f027+    wboot           ef1d     
csv1            f746     mres           =   1+    wboote          ee03     
csv2            f58c     msgcr           f1af     wbxlt           efc9     
csv3            f5a8     msize          =  3e+    wd_wb           ef4b+    
csv4            f5c2     ndevmsg         f23f     wdbboot         1000     
csv5            f5d4     nobuff          f16c     wdbbt1          1009     
curdsk         =   4+    norm           =  40+    wdbloc          1044+    
defbuf          f400     nosysmsg        f1ba     wddsec         =  20+    
defldma        =  80+    notdev          f030     wddsiz         =   2+    
dfti.o         =  81+    pfx            =  93+    wddspt         =  40+    
dirbuf          f500     phydsk          f273     wdini          =f018+    
diskrd          f14d     physec          f276     wdio           =f01b+    
diskwt          f150     preblk          f282     wdrdwt          f15f+    
dpb0            eecc     predma          f27f     wrall          =   0+    
dpb01           eedb     predsk          f27a     wrdir          =   1+    
dpb1            eeea     prephy          f27b     write           f082     
dpb12           eef9     prer.w          f281     wrtflg          f283     
dpb2            ef08     presec          f27e     wrtpng          f141     
dpbase         =ee33+    pretrk          f27c     wrtype          f284     
dpe0            ee33+    printat        =f024+    wrual          =   2+    
dpe1            ee43+    pun            =   0+    wtchk           f0fd     
dpe2            ee53+    punch           f02a     xlt0           =   0+    
dpe3            ee63+    r256.1          f0c8     xlt1            ee93     
dpe4            ee73+    r256.2          f0d1     xlt2            eebb     
dpe5            ee83+    r256.3          f0d8     
endmsg         =  24+    rdr            =   0+    
