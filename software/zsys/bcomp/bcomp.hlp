;
======= B C O M P   H E L P =======


  0. General information
  1. Command line syntax
  2. Address and Offset	        Address, Offset, Record
  3. Moving through a file      File, Screen, Line, Byte, Instant Move
  4. Switching between files    Switch, Echo
  5. Comparing files            Compare, Hilight
  6. Editing a file             Duplicate, Hex and Text edit, Cursor
  7. String Search              Search, Look Again
  8. Miscellaneous functions    Input, Files, Calc
  9. Installation



:0
GENERAL INFORMATION
===================

Version: 3.0
Date:    1 Jan 1992
Author:  Rob Friefeld

Purpose:

Compare and patch two binary files, or single file and memory.


System Requirements:

ZCPR 3.0+ or Z3PLUS, 79 x 24 CRT (minimum) with TCAP support for 
EREOL, CLS, GOTOXY.  Cursor on/off is used, if available.


Control Keys:

While BCOMP is running, press "?" or "/" to see a help screen showing 
the current command key assignments.

Usage:

 1)  Compare two similar files.

    If you just want to know -- Are two files the same or not? -- run 
    an automatic comparison program such as DIFF.  BCOMP is 
    interactive.  It gives each file a window in which you can examine 
    any part of the file and compare it to the other one visually or 
    automatically.

        Example: BCOMP vers1.com vers2.com 

2) Compare disk file to memory image.

    If only one file name is specified on the command line, the second 
    window looks at RAM.  You may want to use this to compare ENV or 
    TCAP files with those currently loaded.  You can also usually 
    compare disk with memory images of type3 or type4 programs after 
    they run.

	Example:  BCOMP sys.env
                

3) Patch a file or cross-patch file/file or file/RAM.

    The patcher is roughly similar to ZPATCH, except that two files 
    are open at once.  Use the second file for reference, update a 
    file from changes poked into high memory (e.g. TCAP or ENV 
    segments), or manually move in overlays.


Limitation:

This program is intended for executable binary files.  Files larger 
than 64k (.LBR, .OVR) can be compared with BCOMP, but as the addresses 
wrap past FFFFh, their display becomes meaningless.  (The record 
number display remains correct.)

...more



                        COPYRIGHT NOTICE

    BCOMP, its documentation, and its installation program are

              Copyright (C) 1992 by Robert Friefeld
                      All rights reserved.

  Any commercial use, or distribution with a commercial product,
      requires the advance written  consent  of the author.


                         Robert Friefeld
                      4607 Colorado Street
                      Long Beach, CA  90814

:1
COMMAND LINE SYNTAX
===================

Syntax:   BCOMP [dir:]file1 [dir:][file2]    or,
          BCOMP [dir:]file1 [/nnnn]

If no FILE2, then FILE1 name is used again.  If no DIR:FILE2, then 
second window is memory.  With the memory window, you may specify the 
initial address in hex.

If FILE1 does not require all the buffer space allocated to it, the 
extra space is released to FILE2.  Therefore, FILE1 should be the 
smaller of the two files.

     Examples:
          BCOMP xyz.com root:     <- xyz.com in current DU and ROOT:
          BCOMP xyz.com /a700     <- xyz.com and memory at A700h
:2
ADDRESS AND OFFSET
==================

SET ADDRESS:

Enter a hex (or decimal preceded by #) address.  The display then 
goes to that (user) address.  The address shown will depend on the 
user offset, as described below.  An address beyond what is currently 
in memory will go to either the start or end of the buffer.

The address display is OK until 64k of file is read in, then it wraps 
to 0.  The 24 bit math needed to go beyond address FFFFh has not been 
implemented.


SET OFFSET:
Input a new hex offset.  For files, the address display will change 
but the record number will not.  If an appropriate offset is chosen, 
the address will correspond to the location of the file memory image 
when running.  Default offset for files is taken from the file type 
(e.g. COM, RCP, ENV) after the manner of ZPATCH.  Type 3 environment 
files will be displayed at their load address offsets.

For the memory window, the address display is always absolute.  An 
offset is used to calculate a number for the record display.  For 
example, if you run a Type3 program, then run BCOMP to look at the 
file, the memory offset can be set to the program's load address 
(8000h).  The file and memory windows will then show the same 
addresses and record numbers as you compare the file to its memory 
image.

GO TO RECORD:
Input a decimal (or hex with #) record number to jump to.  It is up to 
you to pick a record currently in memory.  BCOMP does not random read 
the file looking for your record.  Record count display is OK to 8 meg 
file max.
:3
MOVING IN A FILE
================

You can move the display forward and backward by screen, line, byte, 
or to end of file.  To move one unit in either direction, press the 
command key shown on the help screen ("?" or "/").

"Instant move" commands make it very easy to adjust your viewing 
position.
          nl  Move n lines (dec)	 n [-255..255]   #n [-FFh..FFh]
          nr  Move n records (dec)
       n<cr>  Move n bytes (hex only)  n [-FFh..FFh]

Hex numbers require a leading "0","#", or "-" if the first character 
is A..F.  Numbers which contain A..F are automatically hex.  
Otherwise, use the "#" signifier to cause evaluation in the alternate 
radix.

Special case: 0l and 0r cause the display to line/record align.

...more


     Examples:
          3l   Move ahead 3 lines
          #20r Move ahead 20h records
        -d<cr> Move back 0dh bytes

        Current address: 8013h  0l -> move to 8010h
                                0r -> move to 8000h

These commands observe the ECHO flag.

The command table scanner considers the instant characters "0".."9", 
"-", and "#" last.  You can assign these characters to other commands 
with the installation, but will give up the instant move feature.  
However, you can still use "almost instant" commands by pressing 
<TAB>, then entering your numeric string.
:4
MOVING BETWEEN FILES
====================



SWITCH FILES:  Toggle
Cursor moves from one file to the other.


ECHO MODE:  Toggle
Echo mode repeats a command for both files so you can move through 
them in tandem.  The right upper screen shows a reminder when in echo 
mode.
:5
COMPARING FILES
===============

The display shows 128 bytes of the first file on the upper half of the 
screen and 128 bytes of the second file on the lower half.  The 
alternate file displays a "**" in the HEX field where the two files 
are identical.


AUTO-COMPARE:
Find the next byte in which the files differ.  Display both files at 
that byte.  If the display did not start with the files in sync, then 
the command will only move a single byte ahead.  If no difference is 
found, an EOF message shows on the status line.  If the entire file 
did not fit into memory, read in more and continue the comparison.


VIDEO TOGGLE:
Toggle highlighting of bytes in active window that are different from 
those in the alternate window.  When only a few bytes differ, it is 
much easier to see them this way.  Default is OFF.
:6
EDITING
=======

Editing is implemented as a separate mode so that numbers and text can 
be entered directly without conflict with viewing commands.  The 
cursor moves in response to standard control and/or arrow keys. 

DUPE BLOCK:

Overlay the 128 byte window of the alternate file onto the current 
file.  This command accomplishes with a single key what it takes a 
fair amount of work to do with the edit commands (described next).  
Note that neither window need be aligned on a record boundary.


...more

EDIT MODE:

Enter Edit Mode by pressing the <ESC> key.

   Cursor Movement:
     Use the WordStar(tm) diamond or the arrow keys.

             ^E
              ^
         ^S < $ > ^D     Horizontal movement is to next nibble.
              v          <BS> and <SP> are alternates in HEX field.
             ^X

   Patching:
     In the HEX field, enter hex bytes directly (0..9,A..F).
     In the ASCII field, enter text directly.

   Saving:
     On exit, if any editing has been done, you get a prompt to "Save 
Changes? (Y/n)"  On any response except "N", the disk file (or memory) 
is updated.  [There is no need to edit on a CP/M record boundary.]

BLOCK COMMANDS:

MARK:	Set the block marker.  The marker is ONE end of the block, 
shown on screen as ">".  The other end is the current cursor position.  
The cursor can be before or after the marker.

YANK:	Save the data between the block marker and the cursor into a 
buffer.  The buffer is cleared before each new edit.

     Error - Set Marker First:  Can't Yank until the Mark has been set 
     in the current screen.  Hence, no more than 128 bytes can be 
     Yanked.

COPY:	Replace the data starting at the cursor with whatever is in 
the block buffer.  This command enables you to move data from one file 
to the other.

     Error - Ovfl:  The copy operation cannot overflow the current 
     screen.  All of the data in the block buffer must fit, or the 
     copy is cancelled.

FILL:   Fill from the block marker to the cursor with a byte value.
:7
STRING SEARCH
=============

SEARCH:

Syntax: val val 'text string' val ..

String search command accepts a mix of hex bytes and quoted 
text.  Each value is separated by a " " or ",".  Text search is case 
sensitive, and high bits are NOT filtered.  Therefore, "m" does not 
match EDh.

	Example:
          c3 1f 10 'Z3ENV' 01
          c3,1f,10,'Z3ENV',01  <-- same thing

String search will accept "?" to match any byte, as long as it is not 
the first character.  "?" has no special meaning in a quoted string.

        Example:
          c3 ? ? 'Z3ENV'   <-- find the start of a ZCPR program

If the search is "echoed" to both windows, the string must be 
found in both windows.


LOOK AGAIN:

Look for the same series again.  The string is maintained when 
switching to the alternate file.
:8
MISCELLANEOUS
=============


CALCULATE:
The hex calculator from MU3 is included.  It does addition and 
subtraction as well as decimal-hex conversion.


INPUT:
If BCOMP printed a "memory full" message, more of the file may be read 
in.  The new read replaces data currently in memory.  If there is no 
more to read, you may start again at the beginning of the file.


FILES:
Restart BCOMP with a new command line.  Syntax is the same as on 
invocation.
:9
INSTALLATION
============

BCINST30.COM must be used to make your preferred assignment of command
keys.  (ZCNFG cannot handle BCOMP's control structure.)

In general, any of the command keys may be alphabetic, control keys,
or meta-key/key combinations.  Control keys are recommended in Edit
Mode so that you don't interfere with entry of numbers and text.
