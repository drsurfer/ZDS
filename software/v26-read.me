DDTZxx.LBR

DDTZ is an improved replacement for DDT.  DDTZ is friendlier, handles Z80 
coding, and has an extended command set.  See DDTZ.DOC.

DDTY is a smaller version for when disk space is especially short; it will not 
(dis)assemble Z80 codes but will trace them.  DDTZM alters the command set to 
agree with the MS/PC-DOS DEBUG program, for convenience when one is using both 
systems, e.g., with a V20 CPU.  These are assembly-time options for DDTZ.

The files in this library are all datestamped and checksummed.  To verify, do 
"ccitcrc *.*" and expect a "00 00" FIRST checksum.  LDIR (my version) can 
display the datestamps, and LSETDATE can set them.

Files with a middle 'Z' in the filetype are compressed with Steve Greenberg's 
CRUNCH utility; they can be expanded with UNCR (supplied).  UNCR itself 
requires a Z80 CPU.

This is a re-release to include George Havach's editing of the .DOC file and to 
reduce transmission time/storage space.  The previous release used squeezed, 
rather than crunched, files.

I have discovered that some SysOps omitted the source-code files when posting 
this library.  I would prefer that this NOT be done.  The source code is the 
ultimate documentation, and I am proud of it.

          C.B. Falconer (86/11/03)



NOTES ON VERSION 2.6

     This new release of DDTZ.LBR is hardly crucial, but it does reflect 
recent experience in Z80 emulation mode on an MS-DOS machine.  The author 
noted that everything worked just fine EXCEPT the disassembler ('L' command), 
which wouldn't handle 'MOV' instructions properly.  You can easily see this 
for yourself with the old version by changing the runtime value of 'z80flg' 
from FFh (= "true") to 0 (= "false"); this byte is located immediately after 
string '$8080$Z80$', at the very end of the program (on my Kaypro, it's at 
memory address E7DDh).  At this point, DDTZ thinks it's running on an 8080, 
and the error will show up quite plainly.

     Mr. Falconer noted this problem and found the culprit himself:  a single 
misplaced 'ldax d' instruction in the disassembler segment (DDTDISA.MAC).  
During this past summer, when I happened to call him about another matter, he 
informed me of the needed fix, which required reassembly of the source, not 
just "patching."  By that time, I had finally obtained the complete library 
(earlier I had seen only the truncated, "unofficial" one without source 
files).  Transposing a single line of code sounded simple enough, but I had a 
few surprises in store.

     First off, all the source files in the library were written for assembly 
using SLR Systems' SLRMAC Macro Assembler--a commercial upgrade of Microsoft's 
classic Macro-80.  Well, I don't have SLRMAC, and I soon discovered that, as 
with every upgrade, you win some and you lose some.  M80 promptly barfed on 
all the multiple-instruction lines (like "mov l,a ! add a ! add a !  add l; 
*5), which SLRMAC evidently tolerates perfectly well (they DO make for rather 
more logical listings!).  So, I was faced with a "downgrade" situation--a 
cautious editorial exercise, basically.  Then, I had to learn a thing or two 
about successful writing in assembler; on close inspection, DDTZ is a VERY 
sophisticated program (it relocates itself in memory according to its own 
bitmapped bootstrap loader, like MOVCPM), well worth closer study--even if it 
IS in clunky old 8080 code.  Still, that mere fact makes it transportable to 
the newer generation of PC/MS-DOS machines--typically under a "Z80 emulator," 
with or without replacement of the 8088 CPU with NEC's V20 chip, which happens 
to incorporate the full 8080 instruction set and thus enables you to run most 
older 8080-based CP/M software almost directly on your "IBM compatible."

     DDTZ really is at home in several worlds:  the original CP/M 2.2 realm 
(it's a flat-out replacement for DRI's venerable DDT debugger), the more 
evolved Z80 environment (it handles all the newer Zilog instructions), and now 
clone country.  A thread of continuity with the past in this ever-changing 
world becomes a lifeline of sanity for dedicated CP/M programmers; the current 
marketplace would have all us believe we're an endangered species, or even a 
"living fossil."  As a debugging utility, however, DDTZ is by no means the 
last, or even the latest, word (check out Rick Surwilo's Z8E if you want bells 
and whistles); but if, like myself, you've come up through the CP/M ranks with 
the original standard DRI utilities, then DDTZ definitely widens your horizon. 
As a programming tool, it's like a Swiss Army knife:  ready to hand, all-in- 
one, spartanly elegant, no-frills.  Any brave foray into the computer jungle 
will be made more secure with it stashed in the backpack.

     Hopefully, this new release will alert both CP/M novices and experts 
alike to the continuing vitality of our common enterprise.  Much quality 
software already flourishes in the public domain, and the possibility of 
enhancing it further through individual effort is a conspicuous opportunity 
for all who access this creative resource.  My own contribution here is mostly 
a stylistic polishing, in appreciation of its inherent value, borne out on 
numerous occasions made happier though its practical application.

     I am exceedingly grateful to Charles for his generosity in developing and 
releasing the original software, and for his timely encouragement of my humble 
attempts at improving its overall usefulness.  In every such endeavor, it 
always helps to consult the author about one's own ideas and intentions; the 
public domain is fundamentally a medium of communication within which the 
economic imperative ("Thou shalt make money!") is politely suspended--much to 
everyone's relief.  All the more so should common courtesy be a rule of thumb 
here in all our contacts and transactions.  These up/downloadable bundles 
represent someone's copious time and trouble, so always "handle with care!"



George Havach
San Francisco, California
September 27, 1987
æ