   1:			;
   2:			;=======================================================================
   3:			;
   4:			; DarkStar (NE Z80) Disk Transfer Utility
   5:			;
   6:			;=======================================================================
   7:			;;---------------------------------------------------------------------
   8:			;; Version      : 1.0 - 20171119
   9:			;; Assemble     : SLR z80asm, myzmac
  10:			;; Revisions:
  11:			;; 20171119	- Initial revision
  12:			;;---------------------------------------------------------------------
  13:			
  14:			title	ZDS Disk Transfer Utility
  15:			
  16:			
  17:			include ../Common.inc.asm
**** ../Common.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) SysBios
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; Original code:
   9:			; Z80 Nuova Elettronica Monitor 390 su eprom 2532 (4k)
  10:			;
  11:			; Disassembled and reconstructed by
  12:			; Piergiorgio Betti <pbetti@lpconsul.net> on 2005 01 26
  13:			;
  14:			; Latest non modular BIOS is DARKSTAR-MONITOR-0.9.0.asm
  15:			; dated 20140531
  16:			; - Following addition of MultiF-Board doing complete rewrite of the
  17:			;   monitor/BIOS has been started.
  18:			;   Major goals:
  19:			;   o Modularization: Now monitor can grow up to 256kb instead of 4kb
  20:			;     :-)
  21:			;   o Specialized images fitted in memory page (4kb) or multiples
  22:			;   o Full support for new hardware
  23:			;   o I/O rewrite for MODE 2 interrupts
  24:			;   Minor goals:
  25:			;   o Full code clean-up & reoarganization
  26:			; ---------------------------------------------------------------------
  27:			; Revisions:
  28:			; 20140905 - Modified hexadecimal constants to 0xxH format to be widely
  29:			;            accepted by different assemblers
  30:			; 20150714 - Modified to implement serial XON/XOFF and RTS/CTS
  31:			; 20170331 - Fixed uart1 isr routine
  32:			; ---------------------------------------------------------------------
  33:			
  34:			; ---------------------------------------------------------------------
  35:			; SYSBIOS
  36:			;
  37:			; This is the BIOS non-resident portion of the new (banked)
  38:			; BIOS/Monitor for the NE Z80 (aka DarkStar)
  39:			;
  40:			; ---------------------------------------------------------------------
  41:			;
  42:			; Full BIOS memory scheme:
  43:			;
  44:			;	+-----------------+
  45:			;	+    SysCommon    +   <-- Resident portion. Common to all images
  46:			;	+   FC00 - FFFF   +
  47:			;	+-----------------+
  48:			;	+-----------------+   +-----------------+   +-----------------+
  49:			;	+     SysBios     +   +   BootMonitor   +   +     [Other]     +
  50:			;	+   F000 - FBFF   +   +   F000 - FBFF   +   +   F000 - FBFF   +
  51:			;	+-----------------+   +-----------------+   +-----------------+
  52:			;
  53:			;	         ^                     ^                     ^
  54:			;	         |                     |                     |
  55:			;	         ---------------------------------------------
  56:			;	                      Variable section
  57:			;
  58:			; The above are always assembled at ORG F000 and linked and allocated
  59:			; in the EEPROM in this way:
  60:			;
  61:			;	+-----------------+
  62:			;	+    SysCommon    +
  63:			;	+   FC00 - FFFF   +
  64:			;	+     SysBios     +     <-- EEPROM page 1 ($C1000)
  65:			;	+   F000 - FBFF   +
  66:			;	+-----------------+
  67:			;	+-----------------+
  68:			;	+    SysCommon    +
  69:			;	+   FC00 - FFFF   +
  70:			;	+   BootMonitor   +     <-- EEPROM page 0 ($C0000)
  71:			;	+   F000 - FBFF   +
  72:			;	+-----------------+
  73:			;
  74:			; ---------------------------------------------------------------------
  75:			;
  76:			; Define which assembler we are using
  77:			;
  78:			
  79:			; PASMO	equ	1
  80:	0001          	mzmac	equ	1
  81:			; ZMAC	equ	1			; ZMAC Z80 assembler, not Linux/Unix version
  82:			
  83:			; ... only one at a time can be active (1) ...
  84:			
  85:			;
  86:			; Monitor version numbers (major.minor)
  87:			;
  88:	0033          	monmaj		equ	'3'
  89:	0036          	monmin		equ	'6'
  90:			
  91:			;
  92:			; Buffers addresses labels
  93:			;
  94:			
  95:			; -- Global --
  96:	0003          	iobyte		equ	0003h		; byte: Intel IOBYTE (CP/M 2.2 only)
  97:	0004          	cdisk		equ	0004h		; byte: Last logged drive
  98:	0006          	btpasiz		equ	0006h		; word: size of tpa + 1
  99:			;
 100:			; -- Private --
 101:	000B          	hmempag		equ	000bh		; byte: highest ram page
 102:	000C          	bbcbank		equ	000ch		; byte: current bank
 103:	000D          	bbcstck		equ	000dh		; word: current stack
 104:					;
 105:	004F          	prvtop		equ	004fh		; top of private area storage
 106:	004F          	colbuf		equ	prvtop		; byte:
 107:	004E          	dselbf		equ	colbuf-1	; byte: floppy drive select status
 108:								; - bits: 0 = drive 0
 109:								; - bits: 1 = drive 1
 110:								; - bits: 2 = drive 2
 111:								; - bits: 3 = drive 3
 112:								; - bits: 4 = unused
 113:								; - bits: 5 = head select
 114:								; - bits: 6 = motor on (disabled by jumper)
 115:								; - bits: 7 = unused
 116:	004D          	kbdbyte		equ	dselbf-1	; byte: store keyboard input
 117:	004C          	miobyte		equ	kbdbyte-1	; byte:
 118:								; - bits: 0: 0 = floppy write		1 = floppy read
 119:								;         1: 0 = no ctrl on keypress	1 = ctrl on keypress
 120:								;         2: 0 = scroll			1 = no scroll
 121:								;         3: 0 = accept lowercase	1 = convert to uppercase
 122:								;         4: 0 = destr. bkspace		1 = non destr. bkspace
 123:								;         5: 0 = console out		1 = serial out
 124:								;         6: 0 = disp. all chars	1 = obscure non punct.
 125:								;         7: 0 = ctrl chr set 1		1 = ctrl chr set 2
 126:	004B          	tmpbyte		equ	miobyte-1	; byte: transients flags
 127:								; - bits: 0: 0 = high in cursor addressing
 128:								;         1: 0 = ESC catched by ANSI driver
 129:								;         2: 0 = CSI catched by ANSI driver
 130:								;         3: 0 = Two byte code ESC seq. from serial
 131:								;         4: 0 = Plain serial i/o (disable ANSI driver)
 132:								;         5: 0 = store interrupt status (on/off)
 133:								;         6: 0 = floppy no home on err	1 = no home on err
 134:								;         7: 0 = unlock LBA free addressing (unpartitioned)
 135:	004A          	cursshp		equ	tmpbyte-1	; cursor shape
 136:	0048          	curpbuf		equ	cursshp-2	; word: cursor position
 137:	0046          	ftrkbuf		equ	curpbuf-2	; word: track # for i/o (0 - 65535)
 138:	0045          	fdrvbuf		equ	ftrkbuf-1	; byte: drive number for i/o (0 - 15)
 139:	0043          	fsecbuf		equ	fdrvbuf-2	; word: sector # for i/o (1 .. 65535)
 140:	0041          	frdpbuf		equ	fsecbuf-2	; word: dma address for i/o
 141:	003F          	fsekbuf		equ	frdpbuf-2	; word: current track number for drive A/B
 142:	003E          	ram3buf		equ	fsekbuf-1	; byte:
 143:	003D          	ram2buf		equ	ram3buf-1	; byte:
 144:	003C          	ram1buf		equ	ram2buf-1	; byte:
 145:	003B          	ram0buf		equ	ram1buf-1	; byte:
 146:	003A          	rst7sp3		equ	003ah		; keep clear area of RST38 (RST7)
 147:	0039          	rst7sp2		equ	0039h
 148:	0038          	rst7sp1		equ	0038h
 149:	0036          	vstabuf		equ	rst7sp1-2	; word: Display start addr
 150:	002F          	rsrvbuf		equ	vstabuf-7	; free 7 byte buffer
 151:	002D          	appbuf		equ	rsrvbuf-2	; word: generic buffer
 152:	002C          	copsys		equ	appbuf-1	; Op system type for partition selection
 153:	002B          	uart0br		equ	copsys-1	; UART 0 baudrate
 154:	002A          	uart1br		equ	uart0br-1	; UART 1 baudrate
 155:	0029          	ctc0tc		equ	uart1br-1	; CTC channel 0 time constant
 156:	0028          	ctc1tc		equ	ctc0tc-1	; CTC channel 1 time constant
 157:	0027          	timrcon		equ	ctc1tc-1	; timer buf
 158:	0026          	cnfbyte		equ	timrcon-1	; config byte
 159:								; - bits: 0: 0 = UART1 intr disabled	1 = RST8 redir UART1
 160:								;         1: 1 = XON/XOFF enabled on UART0
 161:								;         2: 1 = RTS/CTS enabled on UART0
 162:								;         3: 0 = unused/reserved
 163:								;         4: 0 = unused/reserved
 164:								;         5: 0 = unused/reserved
 165:								;         6: 0 = unused/reserved
 166:								;         7: 0 = unused/reserved
 167:	000F          	fifosto		equ	000fh		; fifo queues storage start
 168:	0008          	fifsize		equ	8		; fifo queue lenght
 169:	000B          	fifblok		equ	11		; fifo queue size
 170:	000F          	fifou0		equ	fifosto		; uart 0 queue (alternate console)
 171:	001A          	fifokb		equ	fifou0+fifblok	; keyboard queue
 172:	0025          	fifoend		equ	fifokb+fifblok	; fifo blocks end
 173:			;
 174:	3000          	bldoffs		equ	3000h		; place for disk bootloader
 175:			
 176:			;
 177:			; Some commodity equs
 178:			;
 179:	000D          	cr		equ	0dh		; ascii CR & LF
 180:	000A          	lf		equ	0ah
 181:	000C          	ff		equ	0ch		; FORM FEED (clear screen)
 182:	001B          	esc		equ	1bh		; ESCape
 183:	0011          	xonc		equ	11h		; Xon
 184:	0013          	xofc		equ	13h		; Xoff
 185:	FFFF          	true		equ	-1
 186:	0000          	false		equ	0
 187:	0100          	tpa		equ	0100h		; TPA base address (for CP/M)
 188:			
 189:			;
 190:			; Modules equs
 191:			;
 192:				; delay
 193:	00F6          	mscnt		equ	246
 194:				; mmu
 195:	000D          	mmutstpage	equ	0dh		; logical page used for sizing
 196:	D000          	mmutstaddr	equ	mmutstpage<<12	; logical page used for sizing
 197:			
 198:			; Conventionally all bios/monitor images start at $F000.
 199:			; Except for special cases all code is copied to ram @ $F000.
 200:			; In this case eeprom page 0 is directly mapped into logical space
 201:			; by hardware so we can initialize the system at cold boot.
 202:			;
 203:			; We assume to initialize MMU as follow:
 204:			;
 205:			; +--------+
 206:			; |  F000  |	-> $C0000  eeprom page 0
 207:			; +--------+
 208:			; +--------+
 209:			; |  EFFF  |
 210:			; +--------+
 211:			;     ...       -> $00000 to $0EFFF ram
 212:			; +--------+
 213:			; |  0000  |
 214:			; +--------+
 215:			;
 216:			
 217:			
 218:			; include	modules/hwequs.inc.asm
 219:			; Hardware equates
 220:			; ---------------------------------------------------------------------
 221:			
 222:			; ---------------------------------------------------------------------
 223:			; LX529 VIDEO BOARD:
 224:			; ---------------------------------------------------------------------
 225:	0080          	crtbase		equ	80h
 226:				; RAM0 for ascii chars & semi6. Combined with RAM1 and RAM2 for graphics
 227:	0080          	crtram0dat	equ	crtbase		; RAM0 access: PIO0 port A data register
 228:	0082          	crtram0cnt	equ	crtbase+2	; RAM0 access: PIO0 port A control register
 229:				; Printer port
 230:	0081          	crtprntdat	equ	crtbase+1	; PRINTER (output): PIO0 port B data register
 231:	0083          	crtprntcnt	equ	crtbase+3	; PRINTER (output): PIO0 port B control register
 232:								; STROBE is generated by hardware
 233:				; RAM1 for graphics. (pixel index by RAM0+RAM1+RAM2)
 234:	0084          	crtram1dat	equ	crtbase+4	; RAM1 access: PIO1 port A data register
 235:	0086          	crtram1cnt	equ	crtbase+6	; RAM1 access: PIO1 port A control register
 236:				; Keyboard port (negated). Bit 7 is for strobe
 237:	0085          	crtkeybdat	equ	crtbase+5	; KEYBOARD (input): PIO1 port B data register
 238:	0087          	crtkeybcnt	equ	crtbase+7	; KEYBOARD (input): PIO1 port B control register
 239:	0007          	keybstrbbit	equ	7		; Strobe bit
 240:				; RAM2 for graphics. (pixel index by RAM0+RAM1+RAM2)
 241:	0088          	crtram2dat	equ	crtbase+8	; RAM2 access: PIO2 port A data register
 242:	008A          	crtram2cnt	equ	crtbase+10	; RAM2 access: PIO2 port A control register
 243:				; Service/User port
 244:	0089          	crtservdat	equ	crtbase+9	; Service (i/o): PIO2 port B data register
 245:	008B          	crtservcnt	equ	crtbase+11	; Service (i/o): PIO2 port B control register
 246:	0000          	prntbusybit	equ	0		; Printer BUSY bit		(in)	1
 247:	0001          	crtwidthbit	equ	1		; Set 40/80 chars per line	(out)	0
 248:	0002          	pio2bit2	equ	2		; user 1 (input)		(in)	1
 249:	0003          	pio2bit3	equ	3		; user 2 (input)		(in)	1
 250:	0004          	pio2bit4	equ	4		; user 3 (input)		(in)	1
 251:	0005          	clksclk		equ	5		; DS1320 clock line		(out)	0
 252:	0006          	clkio		equ	6		; DS1320 I/O line		(i/o)	1
 253:	0007          	clkrst		equ	7		; DS1320 RST line		(out)	0
 254:				; normal set for PIO2 (msb) 01011101 (lsb) that is hex $5D
 255:								; Other bits available to user
 256:				; RAM3 control chars/graphics attributes
 257:	008E          	crtram3port	equ	crtbase+14	; RAM3 port
 258:	0000          	crtblinkbit	equ	0		; Blink
 259:	0001          	crtrevrsbit	equ	1		; Reverse
 260:	0002          	crtunderbit	equ	2		; Underline
 261:	0003          	crthilitbit	equ	3		; Highlight
 262:	0004          	crtmodebit	equ	4		; ASCII/GRAPHIC mode
 263:				; Beeper port
 264:	008F          	crtbeepport	equ	crtbase+15	; Beeper port
 265:				; 6545 CRT controller ports
 266:	008C          	crt6545adst	equ	crtbase+12	; Address & Status register
 267:	008D          	crt6545data	equ	crtbase+13	; Data register
 268:				; Cursor modes
 269:	0040          	blislowblok	equ	40h		; Blink, slow, block
 270:	004A          	blislowline	equ	4ah		; Blink, slow, line
 271:	0060          	blifastblok	equ	60h		; Blink, fast, block
 272:	006A          	blifastline	equ	6ah		; Blink, fast, line
 273:	0020          	cursoroff	equ	20h		; Off
 274:	0000          	fixblock	equ	00h		; Fixed, block
 275:	000A          	cursoron	equ	0ah		; On
 276:				; 6545 register index
 277:	0000          	vr0.hrtot	equ	0		; Total horizontal chars
 278:	0001          	vr1.hrdis	equ	1		; Total horizontal displayed ch.
 279:	0002          	vr2.hrsyncpos	equ	2		; Horizontal sync position
 280:	0003          	vr3.hrvrsyncw	equ	3		; Hsync and vsync width
 281:								; (bit 0-3 hsync, bit 4-7 vsync)
 282:	0004          	vr4.vrchrow	equ	4		; Total ch. rows in a frame
 283:	0005          	vr5.vradj	equ	5		; Vertical additional scan lines
 284:	0006          	vr6.vrdisrows	equ	6		; Displayed char rows
 285:	0007          	vr7.vrsyncpos	equ	7		; Vertical sync position
 286:	0008          	vr8.crtmode	equ	8		; Operating mode
 287:								; 76543210
 288:								; ||||||++ Interlace
 289:								; |||||+-- Addressing bin/rowcol
 290:								; ||||+--- Memory shared/transp.
 291:								; |||+---- Display delay no/yes
 292:								; ||+----- Cursor delay no/yes
 293:								; |+------ Pin 34 addr/strobe
 294:								; |------- Access blank/interl.
 295:	0009          	vr9.scanlines	equ	9		; Scan lines per char row
 296:	000A          	vr10.crstart	equ	10		; Cursor start line bit 0-4
 297:								; bit 6-5
 298:								;     0 0 = No blink
 299:								;     0 1 = No cursor
 300:								;     1 0 = Blink 1/16 rate
 301:								;     1 1 = Blink 1/32 rate
 302:	000B          	vr11.crend	equ	11		; Cursor end line bit 0-4
 303:	000C          	vr12.dstarth	equ	12		; Display start address high
 304:	000D          	vr13.dstartl	equ	13		; Display start address low
 305:	000E          	vr14.curposh	equ	14		; Cursor position high
 306:	000F          	vr15.curposl	equ	15		; Cursor position low
 307:	0010          	vr16.lpenh	equ	16		; LPEN position high
 308:	0011          	vr17.lpenl	equ	17		; LPEN position low
 309:	0012          	vr18.updaddrh	equ	18		; Update (next char) address H
 310:	0013          	vr19.updaddrl	equ	19		; Update (next char) address L
 311:	001F          	vr31.dummy	equ	31		; Dummy register for transparent
 312:								; addressing update checkin
 313:	07CF          	endvid		equ	07cfh		; end video cursor (25*80)
 314:			; ---------------------------------------------------------------------
 315:			; LX390 FDC CONTROLLER:
 316:			; ---------------------------------------------------------------------
 317:	00D0          	fdcbase		equ	0d0h
 318:	00D0          	fdccmdstatr	equ	fdcbase		; Command and status register
 319:	00D1          	fdctrakreg	equ	fdcbase+1	; Track register
 320:	00D2          	fdcsectreg	equ	fdcbase+2	; Sector register
 321:	00D7          	fdcdatareg	equ	fdcbase+7	; Data register *** Verificare che sia $d7
 322:	00D6          	fdcdrvrcnt	equ	fdcbase+6	; Driver select/control register
 323:			;
 324:	0007          	fdcrestc	equ	00000111b	; 1771 restore (seek to trak 0) cmd
 325:	0016          	fdcseekc	equ	00010110b	; seek cmd
 326:	0088          	fdcreadc	equ	10001000b	; read cmd
 327:	00A8          	fdcwritc	equ	10101000b	; write cmd
 328:	00D0          	fdcreset	equ	11010000b	; fdc reset immediate cmd
 329:			;
 330:			; ---------------------------------------------------------------------
 331:			; LX389: PARALLEL INTERFACE
 332:			; ---------------------------------------------------------------------
 333:			; alternate printer port
 334:	0003          	altprnprt	equ	03h
 335:			;
 336:			; parallel port PC link
 337:	0003          	ppdatap		equ	03h		; Data port
 338:	0002          	ppcntrp		equ	02h		; Control port
 339:	0000          	ppstrob		equ	0		; Strobe bit
 340:	0001          	ppakstb		equ	1		; Acknowledge/Stop bit
 341:			;
 342:	0000          	ppdini		equ	00h		; 00000000 Dnl Init byte
 343:	0004          	ppdrdy		equ	04h		; 00000100 Dnl Ready
 344:	0006          	ppdstp		equ	06h		; 00000110 Dnl Stop
 345:	0002          	ppdokg		equ	02h		; 00000010 Dnl Ok Go
 346:	0001          	ppuini		equ	01h		; 00000001 Upl Init byte
 347:	0005          	ppurdy		equ	05h		; 00000101 Upl Ready
 348:	0007          	ppuack		equ	07h		; 00000111 Upl Acknowledge
 349:	0003          	ppuokg		equ	03h		; 00000011 Upl Ok Go
 350:			;
 351:			; virtual disks (PC-linked over parallel port)
 352:	0000          	vdrdsec		equ	0		; read sector command
 353:	0001          	vdwrsec		equ	1		; write sector command
 354:	000A          	vdbufsz		equ	10		; 10 bytes block
 355:			; ---------------------------------------------------------------------
 356:			; MULTF-BOARD: MMU, IDE, SERIAL, CTC
 357:			; ---------------------------------------------------------------------
 358:			; -- I/O --
 359:	0020          	mmuport		equ	20h
 360:	0021          	menaprt		equ	21h
 361:			; -- Map --
 362:	00C0          	eepage0		equ	0c0h		; page 0 of eeprom
 363:	F000          	eepsta		equ	0f000h		; eeprom location after MMU reset
 364:	00EF          	mmtpapag	equ	(eepsta>>8)-1	; TPA top page (256 bytes pages)
 365:	00FF          	imtpag		equ	0ffh		; eeprom page with image table
 366:	0400          	imtsiz		equ	1024		; size
 367:	E000          	ramtbl		equ	0e000h		; ram table location
 368:	0030          	tblblk		equ	48		; block size
 369:	0014          	maxblk		equ	20		; max images
 370:	03C0          	rtbsiz		equ	tblblk * maxblk	; real table size
 371:								; A table block is:
 372:	0008          	tnamelen	equ	8		;	name		: 8 bytes
 373:	0002          	tpagelen	equ	2		;	page offset	: 2 bytes
 374:	0004          	tiaddrlen	equ	4		;	image address	: 4 bytes
 375:	0004          	tsizelen	equ	4		;	image size	: 4 bytes
 376:	0014          	tdesclen	equ	20		;	description	: 20 bytes
 377:			; -- IDE --
 378:	00E0          	ideporta	equ	0e0h		; lower 8 bits of IDE interface
 379:	00E1          	ideportb	equ	0e1h		; upper 8 bits of IDE interface
 380:	00E2          	ideportc	equ	0e2h		; control lines for IDE interface
 381:	00E3          	ideportctrl	equ	0e3h		; 8255 configuration port
 382:			
 383:	0092          	readcfg8255	equ	10010010b	; Set 8255 IDEportC to output, IDEportA/B input
 384:	0080          	writecfg8255	equ	10000000b	; Set all three 8255 ports to output mode
 385:			;IDE control lines for use with IDEportC.
 386:	0001          	idea0line	equ	01h		; direct from 8255 to IDE interface
 387:	0002          	idea1line	equ	02h		; direct from 8255 to IDE interface
 388:	0004          	idea2line	equ	04h		; direct from 8255 to IDE interface
 389:	0008          	idecs0line	equ	08h		; inverter between 8255 and IDE interface
 390:	0010          	idecs1line	equ	10h		; inverter between 8255 and IDE interface
 391:	0020          	idewrline	equ	20h		; inverter between 8255 and IDE interface
 392:	0040          	iderdline	equ	40h		; inverter between 8255 and IDE interface
 393:	0080          	iderstline	equ	80h		; inverter between 8255 and IDE interface
 394:			;Symbolic constants for the IDE Drive registers
 395:	0008          	regdata		equ	idecs0line
 396:	0009          	regerr		equ	idecs0line + idea0line
 397:	000A          	regseccnt	equ	idecs0line + idea1line
 398:	000B          	regsector	equ	idecs0line + idea1line + idea0line
 399:	000C          	regcyllsb	equ	idecs0line + idea2line
 400:	000D          	regcylmsb	equ	idecs0line + idea2line + idea0line
 401:	000E          	regshd		equ	idecs0line + idea2line + idea1line		;(0EH)
 402:	000F          	regcommand	equ	idecs0line + idea2line + idea1line + idea0line	;(0FH)
 403:	000F          	regstatus	equ	idecs0line + idea2line + idea1line + idea0line
 404:	0016          	regcontrol	equ	idecs1line + idea2line + idea1line
 405:	0016          	regastatus	equ	idecs1line + idea2line + idea1line
 406:			;IDE Command Constants.
 407:	0010          	cmdrecal	equ	010h
 408:	0020          	cmdread		equ	020h
 409:	0030          	cmdwrite	equ	030h
 410:	0091          	cmdinit		equ	091h
 411:	00EC          	cmdid		equ	0ech
 412:	00E0          	cmdspindown	equ	0e0h
 413:	00E1          	cmdspinup	equ	0e1h
 414:			; -- 16C550 UARTS --
 415:	00C0          	uart0base	equ	0c0h		; Port base address for 0
 416:	00C8          	uart1base	equ	0c8h		; Port base address for 1
 417:	00C0          	uart0		equ	uart0base	; Select UART 0
 418:	00C8          	uart1		equ	uart1base	; Select UART 1
 419:	0000          	r0rxtx		equ	0		; (r/w) RXD/TXD Transmit/Receive Buffer
 420:	0000          	r0brdl		equ	0		; (r/w) DLL  if bit 7 of LCR is set: Baud Rate Divisor LSB
 421:	0001          	r1ier		equ	1		; (r/w) IER - Interrupt Enable Register
 422:	0001          	r1brdm		equ	1		; (r/w) DLM if bit 7 of LCR is set: Baud Rate Divisor MSB
 423:	0002          	r2iir		equ	2		; (r)   IIR - Interrupt Identification Register
 424:	0002          	r2fcr		equ	2		; (w)   FCR - FIFO Control Register
 425:	0003          	r3lcr		equ	3		; (r/w) LCR - Line Control Register
 426:	0004          	r4mcr		equ	4		; (r/w) MCR - Modem Control Register
 427:	0005          	r5lsr		equ	5		; (r)   LSR - Line Status Register
 428:	0006          	r6msr		equ	6		; (r)   MSR - Modem Status Register
 429:	0007          	r7spr		equ	7		; (r/w) SPR - Scratch Pad Register
 430:				; fifo
 431:	0007          	ufifo1		equ	00000111b	; 1 char
 432:	0047          	ufifo4		equ	01000111b	; 4 char
 433:	0087          	ufifo8		equ	10000111b	; 8 char
 434:	00C7          	ufifo14		equ	11000111b	; 14 char
 435:				; speeds:
 436:	0060          	uart1200	equ	96		; = 1,843,200 / ( 16 x 1200 )
 437:	0030          	uart2400	equ	48		; = 1,843,200 / ( 16 x 2400 )
 438:	0018          	uart4800	equ	24		; = 1,843,200 / ( 16 x 4800 )
 439:	000C          	uart9600	equ	12		; = 1,843,200 / ( 16 x 9600 )
 440:	0006          	uart19k2	equ	06		; = 1,843,200 / ( 16 x 19,200 )
 441:	0003          	uart38k4	equ	03		; = 1,843,200 / ( 16 x 38,400 )
 442:	0002          	uart57k6	equ	02		; = 1,843,200 / ( 16 x 57,600 )
 443:	0001          	uart115k2	equ	01		; = 1,843,200 / ( 16 x 115,200 )
 444:			
 445:	0006          	u0defspeed	equ	uart19k2	; UART 0 default speed
 446:	000C          	u1defspeed	equ	uart9600	; UART 1 default speed
 447:			; -- Z80CTC --
 448:	00E8          	ctcbase		equ	0e8h
 449:	00E8          	ctcchan0	equ	ctcbase+0	; Channel 1 - Free
 450:	00E9          	ctcchan1	equ	ctcbase+1	; Channel 2 - System Timer
 451:	00EA          	ctcchan2	equ	ctcbase+2	; Channel 3 - UART 1 Interrupt
 452:	00EB          	ctcchan3	equ	ctcbase+3	; Channel 4 - UART 0 Interrupt
 453:	0020          	ctc0tchi	equ	32		; hi speed chan. 0 tc: 4Mhz / 256 / 32 = 488.28 Hz
 454:	0005          	ctc1tc100hz	equ	5		; lo speed chan. 1 tc: 488.28 Hz / 5 = ~ 97.6 Hz
 455:	000A          	ctc1tc50hz	equ	10		; lo speed chan. 1 tc: 488.28 Hz / 10 = ~ 48.8 Hz
 456:	0013          	ctc1tc25hz	equ	19		; lo speed chan. 1 tc: 488.28 Hz / 19 = ~ 25 Hz
 457:	0030          	ctc1tc10hz	equ	48		; lo speed chan. 1 tc: 488.28 Hz / 48 = ~ 10 Hz
 458:	00F4          	ctc1tc2hz	equ	244		; lo speed chan. 1 tc: 488.28 Hz / 244 = ~ 2 Hz
 459:	0013          	syshertz	equ	ctc1tc25hz	; System timer hertz
 460:			; -- EEPROM --
 461:	0001          	eep29ee		equ	01h		; type 29EE020
 462:	0002          	eep29xe		equ	02h		; type 29LE020 or 29VE020
 463:	0004          	eep29c		equ	04h		; type 29C020
 464:	0008          	eepunsupp	equ	08h		; unsupported
 465:	0010          	eeproglock	equ	10h		; programming locked
 466:				;
 467:	0080          	eerineprom	equ	80h		; tried to program eeprom running inside it
 468:			
 469:			;
 470:			; MMU organization
 471:			;
 472:			; MMU manage 16 4kb pages in Z80 address space (logical)
 473:			; It can assign any of 256 4k pages (physical) from its
 474:			; 1Mb address space.
 475:			;
 476:			; To load phisycal page XXh to logical page (in CPU address space) Y,
 477:			; you should consider that MMU is at a fixed address 20h and that
 478:			; logical 4K page Y is derived in the MMU by the usage of A12,A13,A14
 479:			; and A15 address lines during an I/O instruction.
 480:			;
 481:			; So to address phys. ram page 00h at the top of logical space page Fh
 482:			; you need to have Fh * on top address lines * because this address
 483:			; is the index to MMU page.
 484:			;
 485:			; So:
 486:			;
 487:			; 	LD	A,00h		<--- phis. page number	00xxxh (4k page)
 488:			; 	LD	B,F0h		<--- log. page number 	 Fxxxh (cpu page)
 489:			; 	LD	C,20h		<--- MMU I/O address
 490:			; 	OUT	(C),A
 491:			; 	RET
 492:			;
 493:			; The OUT instruction place:
 494:			; A on data lines D0-D7
 495:			; Fh (from B register) on A12-A15
 496:			; on port 20h (C register)
 497:			;
 498:			;
 499:			; Memory is organized as follow:
 500:			;
 501:			;	Slot 1	-> RAM	  -> 512k from 00000h to 7ffffh (mandatory)
 502:			;	Slot 2	-> RAM	  -> 128k from 80000h to 9ffffh (option 1)
 503:			;	Slot 2	-> RAM    -> 256k from 80000h to bffffh (option 2)
 504:			;	Slot 3	-> EEPROM -> 256k from c0000h to fffffh (mandatory)
 505:			;
 506:			
 507:			;*************************************
 508:			; Production / Testing
 509:	0000          	bbdebug		equ	false
 510:			;*************************************
 511:			
 512:			;-------------------------------------
 513:			; Segments, pages locations
 514:			
 515:	0000          	if	bbdebug
 521:			else
 522:			
 523:	00C0          	bbimgp		equ	eepage0		; Image location
 524:	000E          	bbappp		equ	0eh
 525:	000F          	bbpag		equ	0fh		; Base page location
 526:			
 527:			endif
 528:			
 529:	000D          	trnpag		equ	0dh		; Page used for transient MMU ops
 530:	F000          	bbbase		equ	bbpag << 12	; non resident base address
 531:	FC00          	bbcomn		equ	bbbase + 0c00h	; resident portion address
 532:			
 533:			; sysbase 	equ	bbbase		; use this to have 60K TPA
 534:			; SYSBASE 	equ	BBCOMN		; use this to have 63K TPA
 535:			
 536:			;-------------------------------------
**** dsktran.asm ****
  18:			include ../darkstar.equ
**** ../darkstar.equ ****
   1:			;****** Equ's file autogenerated by genequs ver: 1.0
   2:			;****** Input files:
   3:			;****** SysCommon.lst
   4:	FE76          	TX0            	EQU	0FE76H
   5:	FDC4          	FIN            	EQU	0FDC4H
   6:	FE78          	TX01           	EQU	0FE78H
   7:	FD89          	DLY1           	EQU	0FD89H
   8:	FD87          	DLY2           	EQU	0FD87H
   9:	FDE1          	FOUT           	EQU	0FDE1H
  10:	FE64          	U1NUL          	EQU	0FE64H
  11:	FE25          	U0ISR          	EQU	0FE25H
  12:	FE5B          	U1ISR          	EQU	0FE5BH
  13:	FD85          	DELAY          	EQU	0FD85H
  14:	FE50          	UISRE          	EQU	0FE50H
  15:	FDB5          	FSTAT          	EQU	0FDB5H
  16:	FE35          	UISRI          	EQU	0FE35H
  17:	FE6E          	DOSTX          	EQU	0FE6EH
  18:	FC4B          	BBU1ST         	EQU	0FC4BH
  19:	FC45          	BBU1RX         	EQU	0FC45H
  20:	FC3F          	BBU1TX         	EQU	0FC3FH
  21:	FD29          	BBEXEC         	EQU	0FD29H
  22:	FCFF          	BBHDRD         	EQU	0FCFFH
  23:	FD6A          	BBVOID         	EQU	0FD6AH
  24:	FE91          	UASTKB         	EQU	0FE91H
  25:	FD6B          	MMPMAP         	EQU	0FD6BH
  26:	FE0F          	INTRDI         	EQU	0FE0FH
  27:	FC2D          	SCONIN         	EQU	0FC2DH
  28:	FC15          	VCONIN         	EQU	0FC15H
  29:	FCDB          	BBDIV16        	EQU	0FCDBH
  30:	FCF9          	BBHDWR         	EQU	0FCF9H
  31:	FD78          	MMGETP         	EQU	0FD78H
  32:	FDFE          	INTREN         	EQU	0FDFEH
  33:	FE84          	RLDROM         	EQU	0FE84H
  34:	FCE1          	BBMUL16        	EQU	0FCE1H
  35:	FC00          	SYSCOM         	EQU	0FC00H
  36:	FE8F          	UASTAV         	EQU	0FE8FH
  37:	FE19          	SYTIMR         	EQU	0FE19H
  38:	FC33          	SCONST         	EQU	0FC33H
  39:	FC1B          	VCONST         	EQU	0FC1BH
  40:	FE6C          	SRXRSM         	EQU	0FE6CH
  41:	FE68          	SRXSTP         	EQU	0FE68H
  42:	FC39          	BBU0INI        	EQU	0FC39H
  43:	FC51          	BBU1INI        	EQU	0FC51H
  44:	FC87          	BBFREAD        	EQU	0FC87H
  45:	FD23          	BBEIDCK        	EQU	0FD23H
  46:	FD05          	BBHDGEO        	EQU	0FD05H
  47:	FEBF          	BBSTACK        	EQU	0FEBFH
  48:	FC81          	BBFHOME        	EQU	0FC81H
  49:	FD94          	BBCONIN        	EQU	0FD94H
  50:	FC27          	CRDUREG        	EQU	0FC27H
  51:	FFF0          	SINTVEC        	EQU	0FFF0H
  52:	FEBF          	SYSCMLO        	EQU	0FEBFH
  53:	FE22          	VOIDISR        	EQU	0FE22H
  54:	FC9F          	BBSTTIM        	EQU	0FC9FH
  55:	FDAA          	BBCONST        	EQU	0FDAAH
  56:	FC27          	SCONOUT        	EQU	0FC27H
  57:	FC0F          	VCONOUT        	EQU	0FC0FH
  58:	FCE7          	BBOFFCAL       	EQU	0FCE7H
  59:	FC57          	BBINICTC       	EQU	0FC57H
  60:	FE9B          	BBSTBASE       	EQU	0FE9BH
  61:	FC5D          	BBRESCTC       	EQU	0FC5DH
  62:	FCA5          	BBRDTIME       	EQU	0FCA5H
  63:	FD5A          	BBCALRET       	EQU	0FD5AH
  64:	FCB7          	BBDMASET       	EQU	0FCB7H
  65:	FC00          	BBJTOBNK       	EQU	0FC00H
  66:	FCBD          	BBDSKSEL       	EQU	0FCBDH
  67:	FCED          	BBHDINIT       	EQU	0FCEDH
  68:	FCB1          	BBSECSET       	EQU	0FCB1H
  69:	FD0B          	BBHDBOOT       	EQU	0FD0BH
  70:	FC69          	BBUPLCHR       	EQU	0FC69H
  71:	FC99          	BBPRNCHR       	EQU	0FC99H
  72:	FCC9          	BBVCPMBT       	EQU	0FCC9H
  73:	FC93          	BBFLOPIO       	EQU	0FC93H
  74:	FD1D          	BBEPMNGR       	EQU	0FD1DH
  75:	FCCF          	BBSIDSET       	EQU	0FCCFH
  76:	FD11          	BBLDPART       	EQU	0FD11H
  77:	FC75          	BBRDVDSK       	EQU	0FC75H
  78:	FC8D          	BBFWRITE       	EQU	0FC8DH
  79:	FCC3          	BBCPBOOT       	EQU	0FCC3H
  80:	FC21          	BBCURSET       	EQU	0FC21H
  81:	FCAB          	BBTRKSET       	EQU	0FCABH
  82:	FC7B          	BBWRVDSK       	EQU	0FC7BH
  83:	FD9F          	BBCONOUT       	EQU	0FD9FH
  84:	FCF3          	BBDRIVEID      	EQU	0FCF3H
  85:	FC63          	BBPSNDBLK      	EQU	0FC63H
  86:	FC03          	BBCRTCINI      	EQU	0FC03H
  87:	FC6F          	BBPRCVBLK      	EQU	0FC6FH
  88:	FC09          	BBCRTFILL      	EQU	0FC09H
  89:	FCD5          	BBFDRVSEL      	EQU	0FCD5H
  90:	FD17          	BBDPRMSET      	EQU	0FD17H
  91:			;****** EOF ***
  92:			
**** dsktran.asm ****
  19:			
  20:	0007          	bel	equ	$07
  21:	0003          	ctlc	equ	'C'-'@'
  22:	0008          	bs	equ	'H'-'@'
  23:	000A          	VERSION	equ	10
  24:			
  25:	0000          	DBGDMA	equ	false
  26:			
  27:			;--------------------
  28:	0100          		org	tpa
  29:			
  30:	0100  C37A01  	begin:	jp	recover
  31:			
  32:			;
  33:			;       begin the load operation
  34:			;
  35:	0103  0100    	rsec:	defw	1
  36:	0105  0000    	rtrk:	defw	0
  37:	0107  00      	rsid:	defb	0
  38:	0108  7C0D    	rdma:	defw	prgend
  39:			
  40:	010A  0100    	wsec:	defw	1
  41:	010C  0000    	wtrk:	defw	0
  42:	010E  00      	wsid:	defb	0
  43:	010F  7C0D    	wdma:	defw	prgend
  44:			
  45:	0111  00      	rwerr:	defb	0
  46:	0112  01      	nedos:	defb	1
  47:			
  48:				; Disks format vector
  49:	0113          	dgeotab:
  50:	0113  000000  		defb	0,0,0		; tracks, sides, sectors
  51:	0116  0002    		defw	512		; sec. size
  52:			
  53:	0118  00      	odrive:	defb	0
  54:	0119  00      	ddrive:	defb	0
  55:	011A  0000    	tsize:	defw	0
  56:	011C  0000    	dsize:	defw	0
  57:	011E  0000    		defw	0
  58:	0120 .. 012B 00	atsize:	defs	12
  59:	012C .. 0137 00	adsize:	defs	12
  60:			
  61:	0138          	useract:
  62:	0138  CD94FD  		call	bbconin
  63:			
  64:	013B          	usrexit:
  65:	013B  FE03    		cp	ctlc
  66:	013D  C0      		ret	nz
  67:	013E  CD2A0C  		call	inline
  68:	0141  0D0A1B04		defb	cr,lf,esc,$04,cr
	      0D
  69:	0146  1B040D55		defb	esc,$04,cr,"User break.",esc,$03,cr
	      73657220
	      62726561
	      6B2E1B03
	      0D
  70:	0157  20526574		defb	" Return to system.",cr,lf,cr,lf,0
	      75726E20
	      746F2073
	      79737465
	      6D2E0D0A
	      0D0A00
  71:			
  72:	016E  210B00  		ld	hl,11
  73:	0171  110002  		ld	de,512		; restore normal disk param
  74:	0174  CD0F0C  		call	dprmset
  75:			
  76:	0177  C30000  		jp	0		; goodbye, cruel world
  77:			
  78:	017A          	recover:
  79:	017A  DD211301		ld	ix, dgeotab	; disk param ptr
  80:			
  81:	017E  CD2A0C  		call	inline
  82:	0181  0C      		defb	ff
  83:	0182  1B060D5A		defb	esc,$06,cr,"ZDS Disk Image Transfer Utility",esc,$05,cr
	      44532044
	      69736B20
	      496D6167
	      65205472
	      616E7366
	      65722055
	      74696C69
	      74791B05
	      0D
  84:	01A7  0D0A    		defb	cr,lf
  85:	01A9  76657273		defb	"version ", version/10+'0','.',(version mod 10)+'0',cr,lf
	      696F6E20
	      312E300D
	      0A
  86:	01B6  0D0A0D0A		defb 	cr,lf,cr,lf,cr,lf,0
	      0D0A00
  87:			
  88:	01BD          	asktraks:
  89:	01BD  CD2A0C  		call	inline
  90:	01C0  456E7465		defb	"Enter # of traks per side",cr,lf
	      72202320
	      6F662074
	      72616B73
	      20706572
	      20736964
	      650D0A
  91:	01DB  202D2031		defb	" - 1 = 40",cr,lf
	      203D2034
	      300D0A
  92:	01E6  202D2032		defb	" - 2 = 80",cr,lf
	      203D2038
	      300D0A
  93:	01F1  2D2D3E20		defb	"--> ",0
	      00
  94:	01F6          	asktrk1:
  95:	01F6  CD94FD  		call	bbconin
  96:	01F9  CD3B01  		call	usrexit
  97:	01FC  FE31    		cp	'1'
  98:	01FE  201C    		jr	nz,asktrk2
  99:	0200  CD2A0C  		call	inline
 100:	0203  1B1B0D20		defb	esc,esc,cr," 40 Tracks ",esc,$1c,cr,0
	      34302054
	      7261636B
	      73201B1C
	      0D00
 101:	0215  1E28    		ld	e,40
 102:	0217  DD7300  		ld	(ix+0),e
 103:	021A  181E    		jr	asksides
 104:	021C          	asktrk2:
 105:	021C  FE32    		cp	'2'
 106:	021E  20D6    		jr	nz,asktrk1
 107:	0220  CD2A0C  		call	inline
 108:	0223  1B1B0D20		defb	esc,esc,cr," 80 Tracks ",esc,$1c,cr,0
	      38302054
	      7261636B
	      73201B1C
	      0D00
 109:	0235  1E50    		ld	e,80
 110:	0237  DD7300  		ld	(ix+0),e
 111:			
 112:	023A          	asksides:
 113:	023A  CD1D0D  		call	zcrlf
 114:	023D  CD2A0C  		call	inline
 115:	0240  456E7465		defb	"Enter disk sides",cr,lf
	      72206469
	      736B2073
	      69646573
	      0D0A
 116:	0252  202D2031		defb	" - 1 = SS, Single Side",cr,lf
	      203D2053
	      532C2053
	      696E676C
	      65205369
	      64650D0A
 117:	026A  202D2032		defb	" - 2 = DS, Double Side",cr,lf
	      203D2044
	      532C2044
	      6F75626C
	      65205369
	      64650D0A
 118:	0282  2D2D3E20		defb	"--> ",0
	      00
 119:	0287          	asksid1:
 120:	0287  CD94FD  		call	bbconin
 121:	028A  CD3B01  		call	usrexit
 122:	028D  FE31    		cp	'1'
 123:	028F  201E    		jr	nz,asksid2
 124:	0291  CD2A0C  		call	inline
 125:	0294  1B1B0D20		defb	esc,esc,cr," Single Side ",esc,$1c,cr,0
	      53696E67
	      6C652053
	      69646520
	      1B1C0D00
 126:	02A8  1E01    		ld	e,1
 127:	02AA  DD7301  		ld	(ix+1),e
 128:	02AD  1820    		jr	asksects
 129:	02AF          	asksid2:
 130:	02AF  FE32    		cp	'2'
 131:	02B1  20D4    		jr	nz,asksid1
 132:	02B3  CD2A0C  		call	inline
 133:	02B6  1B1B0D20		defb	esc,esc,cr," Double Side ",esc,$1c,cr,0
	      446F7562
	      6C652053
	      69646520
	      1B1C0D00
 134:	02CA  1E02    		ld	e,2
 135:	02CC  DD7301  		ld	(ix+1),e
 136:			
 137:	02CF          	asksects:
 138:	02CF  CD1D0D  		call	zcrlf
 139:	02D2  CD2A0C  		call	inline
 140:	02D5  456E7465		defb	"Enter # of sectors/size per track",cr,lf
	      72202320
	      6F662073
	      6563746F
	      72732F73
	      697A6520
	      70657220
	      74726163
	      6B0D0A
 141:	02F8  202D2031		defb	" - 1 = 17 (sone/edcpm 128)",cr,lf
	      203D2031
	      37202873
	      6F6E652F
	      65646370
	      6D203132
	      38290D0A
 142:	0314  202D2032		defb	" - 2 = 10 (nedos/sone 256)",cr,lf
	      203D2031
	      3020286E
	      65646F73
	      2F736F6E
	      65203235
	      36290D0A
 143:	0330  202D2033		defb	" - 3 = 11 (cpm3/zds 512)",cr,lf
	      203D2031
	      31202863
	      706D332F
	      7A647320
	      35313229
	      0D0A
 144:	034A  2D2D3E20		defb	"--> ",0
	      00
 145:	034F          	asksec1:
 146:	034F  CD94FD  		call	bbconin
 147:	0352  CD3B01  		call	usrexit
 148:	0355  FE31    		cp	'1'
 149:	0357  2026    		jr	nz,asksec2
 150:	0359  CD2A0C  		call	inline
 151:	035C  1B1B0D20		defb	esc,esc,cr," 17/128 ",esc,$1c,cr,0
	      31372F31
	      3238201B
	      1C0D00
 152:	036B  1E11    		ld	e,17
 153:	036D  DD7302  		ld	(ix+2),e
 154:			; 	jr	asksize
 155:	0370  118000  		ld	de,128
 156:	0373  DD7303  		ld	(ix+3),e
 157:	0376  DD7204  		ld	(ix+4),d
 158:	0379  CD0F0C  		call	dprmset
 159:	037C  C32104  		jp	askconf
 160:	037F          	asksec2:
 161:	037F  FE32    		cp	'2'
 162:	0381  2076    		jr	nz,asksec3
 163:	0383  CD2A0C  		call	inline
 164:	0386  1B1B0D20		defb	esc,esc,cr," 10/256 ",esc,$1c,cr,0
	      31302F32
	      3536201B
	      1C0D00
 165:	0395  1E0A    		ld	e,10
 166:	0397  DD7302  		ld	(ix+2),e
 167:			; 	jr	asksize
 168:	039A  110001  		ld	de,256
 169:	039D  DD7303  		ld	(ix+3),e
 170:	03A0  DD7204  		ld	(ix+4),d
 171:	03A3  CD0F0C  		call	dprmset
 172:	03A6  CD2A0C  		call	inline
 173:	03A9  0D0A4973		defb	cr,lf,"Is a NEDOS disk ? (y/n): ",0
	      2061204E
	      45444F53
	      20646973
	      6B203F20
	      28792F6E
	      293A2000
 174:	03C5  CD3D0D  		call	gchr			;
 175:	03C8  CD3B01  		call	usrexit
 176:	03CB  FE59    		cp	'Y'			; is 'y' ?
 177:	03CD  201E    		jr	nz,nodos		; no
 178:	03CF  CD2A0C  		call	inline
 179:	03D2  65732C20		defb	"es, NEDOS format.",cr,lf,lf,0
	      4E45444F
	      5320666F
	      726D6174
	      2E0D0A0A
	      00
 180:	03E7  AF      		xor	a
 181:	03E8  321201  		ld	(nedos),a
 182:	03EB  1834    		jr	askconf
 183:	03ED          	nodos:
 184:	03ED  CD2A0C  		call	inline
 185:	03F0  084E6F0D		defb	bs,"No",cr,lf,lf,0
	      0A0A00
 186:	03F7  1828    		jr	askconf
 187:	03F9          	asksec3:
 188:	03F9  FE33    		cp	'3'
 189:	03FB  C24F03  		jp	nz,asksec1
 190:	03FE  CD2A0C  		call	inline
 191:	0401  1B1B0D20		defb	esc,esc,cr," 11/512 ",esc,$1c,cr,0
	      31312F35
	      3132201B
	      1C0D00
 192:	0410  1E0B    		ld	e,11
 193:	0412  DD7302  		ld	(ix+2),e
 194:	0415  110002  		ld	de,512
 195:	0418  DD7303  		ld	(ix+3),e
 196:	041B  DD7204  		ld	(ix+4),d
 197:	041E  CD0F0C  		call	dprmset
 198:			
 199:	0421          	askconf:
 200:	0421  DD4E03  		ld	c,(ix+3)		;
 201:	0424  DD4604  		ld	b,(ix+4)		;
 202:	0427  CD560C  		call	bn2a16			; convert size to decimal
 203:	042A  217004  		ld	hl,pdsize		;
 204:	042D  CD0E0D  		call	pldecs			;
 205:	0430  DD4E02  		ld	c,(ix+2)		;
 206:	0433  CD3D0C  		call	bin2a8			; convert # secs. to decimal
 207:	0436  217B04  		ld	hl,pdsecs		;
 208:	0439  CD0E0D  		call	pldecs			;
 209:	043C  DD4E00  		ld	c,(ix+0)		;
 210:	043F  CD3D0C  		call	bin2a8			; convert # tracks to decimal
 211:	0442  218704  		ld	hl,pdtrks		;
 212:	0445  CD0E0D  		call	pldecs			;
 213:	0448  DD4E01  		ld	c,(ix+1)		;
 214:	044B  CD3D0C  		call	bin2a8			; convert # sides to decimal
 215:	044E  219204  		ld	hl,pdsids		;
 216:	0451  CD0E0D  		call	pldecs			;
 217:			
 218:	0454  CD2A0C  		call	inline
 219:	0457  0D0A0A59		defb	cr,lf,lf,"Your disk format is:",cr,lf
	      6F757220
	      6469736B
	      20666F72
	      6D617420
	      69733A0D
	      0A
 220:	0470  303030  	pdsize:	defb	"000"
 221:	0473  20627974		defb	" bytes, "
	      65732C20
 222:	047B  3030    	pdsecs:	defb	"00"
 223:	047D  20736563		defb	" sectors, "
	      746F7273
	      2C20
 224:	0487  3030    	pdtrks:	defb	"00"
 225:	0489  20747261		defb	" tracks, "
	      636B732C
	      20
 226:	0492  30      	pdsids:	defb	"0"
 227:	0493  20736964		defb	" side(s)",cr,lf,0
	      65287329
	      0D0A00
 228:			
 229:	049E  1600    		ld	d,0			; calc track size
 230:	04A0  DD5E02  		ld	e,(ix+2)		; #sectors in DE
 231:	04A3  DD4E03  		ld	c,(ix+3)
 232:	04A6  DD4604  		ld	b,(ix+4)		; sec. size in BC
 233:	04A9  CDE1FC  		call	bbmul16
 234:	04AC  ED531A01		ld	(tsize),de		; store res.
 235:			
 236:	04B0  0600    		ld	b,0			; calc disk size
 237:	04B2  DD4E00  		ld	c,(ix+0)		; #tracks in BC LSB
 238:	04B5  D9      		exx				; zero MSB
 239:	04B6  010000  		ld	bc,0
 240:	04B9  110000  		ld	de,0
 241:	04BC  D9      		exx
 242:	04BD  CD560D  		call	mul32			; get 1 side size
 243:				; res. in HL',HL
 244:			
 245:	04C0  0600    		ld	b,0			; calc disk size
 246:	04C2  DD4E01  		ld	c,(ix+1)		; #sides in BC
 247:	04C5  EB      		ex	de,hl			; hl to de LSB
 248:	04C6  D9      		exx
 249:	04C7  010000  		ld	bc,0			; zero BC MSB
 250:	04CA  EB      		ex	de,hl			; hl to de MSB
 251:	04CB  D9      		exx
 252:	04CC  CD560D  		call	mul32			; res. in HL',HL
 253:	04CF  221C01  		ld	(dsize),hl		; store LSB
 254:	04D2  D9      		exx
 255:	04D3  221E01  		ld	(dsize+2),hl		; store MSB
 256:	04D6  D9      		exx
 257:			
 258:	04D7  CD2A0C  		call	inline
 259:	04DA  54726163		defb	"Track size ",0
	      6B207369
	      7A652000
 260:	04E6  ED4B1A01		ld	bc,(tsize)		;
 261:	04EA  CD560C  		call	bn2a16			; convert size to decimal
 262:	04ED  212001  		ld	hl,atsize		;
 263:	04F0  CD0E0D  		call	pldecs			;
 264:	04F3  112001  		ld	de,atsize
 265:	04F6  CD1B0C  		call	print
 266:	04F9  CD2A0C  		call	inline
 267:	04FC  20627974		defb	" bytes, disk size ",0
	      65732C20
	      6469736B
	      2073697A
	      652000
 268:	050F  ED4B1C01		ld	bc,(dsize)		;
 269:	0513  D9      		exx
 270:	0514  ED4B1E01		ld	bc,(dsize+2)
 271:	0518  D9      		exx
 272:	0519  CD6D0C  		call	bn2a32			; convert size to decimal
 273:	051C  212C01  		ld	hl,adsize		;
 274:	051F  CD0E0D  		call	pldecs			;
 275:	0522  112C01  		ld	de,adsize
 276:	0525  CD1B0C  		call	print
 277:	0528  CD2A0C  		call	inline
 278:	052B  20627974		defb	" bytes.",cr,lf,lf,0
	      65732E0D
	      0A0A00
 279:	0536  CD2A0C  		call	inline
 280:	0539  0D0A0D0A		defb	cr,lf,cr,lf,"Continue (y/n)? ",0
	      436F6E74
	      696E7565
	      2028792F
	      6E293F20
	      00
 281:			
 282:	054E  CD3D0D  		call	gchr			;
 283:	0551  CD3B01  		call	usrexit
 284:	0554  FE59    		cp	'Y'			; is 'y' ?
 285:	0556  200B    		jr	nz,unconf		; no
 286:	0558  CD2A0C  		call	inline
 287:	055B  65730D0A		defb	"es",cr,lf,lf,0
	      0A00
 288:	0561  180D    		jr	askdrives
 289:	0563          	unconf:
 290:	0563  CD2A0C  		call	inline
 291:	0566  084E6F0D		defb	bs,"No",cr,lf,lf,0
	      0A0A00
 292:	056D  C3BD01  		jp	asktraks
 293:			
 294:	0570          	askdrives:
 295:	0570  CD2A0C  		call	inline
 296:	0573  456E7465		defb	"Enter origin drive (A-P): ",0
	      72206F72
	      6967696E
	      20647269
	      76652028
	      412D5029
	      3A2000
 297:	058E  CD3D0D  		call	gchr			;
 298:	0591  CD3B01  		call	usrexit
 299:	0594  FE41    		cp	'A'			; is valid ?
 300:	0596  FA1A06  		jp	m,wrongdrv		;
 301:	0599  FE51    		cp	'P'+1			;
 302:	059B  F21A06  		jp	p,wrongdrv		; no
 303:			
 304:	059E  D641    		sub	'A'			; makes number
 305:	05A0  321801  		ld	(odrive),a		; store user selection
 306:			
 307:	05A3  CD2A0C  		call	inline
 308:	05A6  0D0A456E		defb	cr,lf,"Enter destination drive (A-P): ",0
	      74657220
	      64657374
	      696E6174
	      696F6E20
	      64726976
	      65202841
	      2D50293A
	      2000
 309:	05C8  CD3D0D  		call	gchr			;
 310:	05CB  CD3B01  		call	usrexit
 311:	05CE  FE41    		cp	'A'			; is valid ?
 312:	05D0  FA1A06  		jp	m,wrongdrv		;
 313:	05D3  FE51    		cp	'P'+1			;
 314:	05D5  F21A06  		jp	p,wrongdrv		; no
 315:			
 316:	05D8  D641    		sub	'A'			; makes number
 317:	05DA  47      		ld	b,a			; is the same ?
 318:	05DB  3A1801  		ld	a,(odrive)
 319:	05DE  90      		sub	b			; yes
 320:	05DF  285C    		jr	z,samedrv		; error
 321:			
 322:	05E1  78      		ld	a,b
 323:	05E2  321901  		ld	(ddrive),a		; store user selection
 324:	05E5  CD2A0C  		call	inline
 325:	05E8  0D0A5072		defb	cr,lf,"Press any key to start, when ready...",cr,lf,0
	      65737320
	      616E7920
	      6B657920
	      746F2073
	      74617274
	      2C207768
	      656E2072
	      65616479
	      2E2E2E0D
	      0A00
 326:	0612  CD94FD  		call	bbconin
 327:	0615  CD3B01  		call	usrexit
 328:	0618  185E    		jr	recover2		; go on
 329:			
 330:	061A          	wrongdrv:
 331:	061A  CD2A0C  		call	inline
 332:	061D  0D0A4472		defb	cr,lf,"Drive selection invalid",cr,lf,lf,0
	      69766520
	      73656C65
	      6374696F
	      6E20696E
	      76616C69
	      640D0A0A
	      00
 333:	063A  C37005  		jp	askdrives
 334:			
 335:	063D          	samedrv:
 336:	063D  CD2A0C  		call	inline
 337:	0640  0D0A4F72		defb	cr,lf,"Origin and destination drive cannot be the same",cr,lf,lf,0
	      6967696E
	      20616E64
	      20646573
	      74696E61
	      74696F6E
	      20647269
	      76652063
	      616E6E6F
	      74206265
	      20746865
	      2073616D
	      650D0A0A
	      00
 338:	0675  C37005  		jp	askdrives
 339:			
 340:	0678          	recover2:
 341:	0678  CD1D0D  		call	zcrlf
 342:			
 343:	067B          	recover3:				; read & write one track
 344:								; at a time
 345:	067B  210000  		ld	hl,0
 346:	067E  220501  		ld	(rtrk),hl		; init track 0
 347:	0681  23      		inc	hl
 348:	0682  220301  		ld	(rsec),hl		; sector 1
 349:	0685  217C0D  		ld	hl,prgend
 350:	0688  220801  		ld	(rdma),hl		; dma address
 351:	068B  AF      		xor	a
 352:	068C  320701  		ld	(rsid),a		; side 0
 353:			
 354:	068F  3A1801  		ld	a,(odrive)		; select origin drive
 355:	0692  4F      		ld	c,a
 356:	0693  CDE808  		call	mseldsk
 357:	0696  CDF308  		call	mhome
 358:	0699          	readsec:
 359:	0699  ED4B0801		ld      bc,(rdma)		; base transfer address
 360:	069D  CDB7FC  		call	bbdmaset
 361:	06A0  ED4B0501		ld	bc,(rtrk)		; track
 362:	06A4  CDABFC  		call	bbtrkset
 363:	06A7  ED4B0301		ld      bc,(rsec)        	; sector
 364:	06AB  CDB1FC  		call	bbsecset
 365:	06AE  ED4B0701		ld      bc,(rsid)        	; side
 366:	06B2  0600    		ld	b,0
 367:	06B4  CD250A  		call	sidset
 368:			
 369:	06B7  3A1801  		ld	a,(odrive)		; select origin drive
 370:	06BA  4F      		ld	c,a
 371:	06BB  CDE808  		call	mseldsk
 372:	06BE  CDFB08  		call	mread		; perform i/o
 373:	06C1  B7      		or	a		; test for errors
 374:	06C2  2806    		jr	z, reads2	; ok
 375:			
 376:	06C4  321101  		ld	(rwerr),a
 377:	06C7  CD1608  		call	fill11		; read error
 378:	06CA          	reads2:
 379:	06CA  CD2E08  		call	advmsgr
 380:	06CD  AF      		xor	a
 381:	06CE  321101  		ld	(rwerr),a
 382:	06D1          	readnsec:
 383:	06D1  2A0801  		ld	hl,(rdma)	; next sector dma
 384:	06D4  DD4E03  		ld	c,(ix+3)	; sec len
 385:	06D7  DD4604  		ld	b,(ix+4)
 386:	06DA  09      		add	hl,bc		; move dma
 387:	06DB  220801  		ld	(rdma),hl
 388:			
 389:	06DE  210301  		ld	hl,rsec
 390:	06E1  34      		inc	(hl)		; to next sector on trk
 391:	06E2  2A0301  		ld	hl,(rsec)
 392:	06E5  7D      		ld	a,l
 393:	06E6  DD5E02  		ld	e,(ix+2)
 394:			
 395:	06E9  1C      		inc	e		; overflow
 396:	06EA  BB      		cp	e		; eot ?
 397:	06EB  2802    		jr	z, readnsid	; nxt trk/sid
 398:			
 399:	06ED  18AA    		jr	readsec		; nxt sec
 400:	06EF          	readnsid:
 401:	06EF  210701  		ld	hl,rsid
 402:	06F2  34      		inc	(hl)		; to next side
 403:	06F3  3A0701  		ld	a,(rsid)
 404:	06F6  DD5E01  		ld	e,(ix+1)
 405:			
 406:	06F9  BB      		cp	e		; eos ?
 407:	06FA  2808    		jr	z, readntrk	; nxt trk
 408:			
 409:	06FC  210100  		ld	hl,1
 410:	06FF  220301  		ld	(rsec),hl	; to begin of track, next side
 411:			
 412:	0702  1895    		jr	readsec
 413:	0704          	readntrk:
 414:	0704  2A0501  		ld	hl,(rtrk)	; update write routine register
 415:	0707  220C01  		ld	(wtrk),hl
 416:			
 417:	070A  CD9007  		call	writetrack	; flush buffer
 418:			
 419:	070D  210501  		ld	hl,rtrk
 420:	0710  34      		inc	(hl)		; to next track
 421:	0711  2A0501  		ld	hl,(rtrk)
 422:	0714  7D      		ld	a,l
 423:	0715  DD5E00  	 	ld	e,(ix+0)
 424:			; 	ld	e,5		; ******** DEBUG ******
 425:			
 426:	0718  BB      		cp	e		; eod ?
 427:	0719  281A    		jr	z, opdone	; done
 428:			
 429:	071B  210100  		ld	hl,1		; reset sector
 430:	071E  220301  		ld	(rsec),hl
 431:	0721  217C0D  		ld	hl,prgend	; reset dma
 432:	0724  220801  		ld	(rdma),hl
 433:	0727  AF      		xor	a		; reset side
 434:	0728  320701  		ld	(rsid),a
 435:			
 436:	072B  3A1801  		ld	a,(odrive)		; re-select origin drive
 437:	072E  4F      		ld	c,a
 438:	072F  CDE808  		call	mseldsk
 439:			
 440:	0732  C39906  		jp	readsec
 441:			
 442:	0735          	opdone:
 443:	0735  CD2A0C  		call	inline
 444:	0738  0D0A0A4A		defb	cr,lf,lf,"Job done.",cr,lf
	      6F622064
	      6F6E652E
	      0D0A
 445:	0746  446F2061		defb	"Do another disk? (y/n) ",0
	      6E6F7468
	      65722064
	      69736B3F
	      2028792F
	      6E292000
 446:			
 447:	075E  CD3D0D  		call	gchr			;
 448:	0761  CD3B01  		call	usrexit
 449:	0764  FE59    		cp	'Y'			; is 'y' ?
 450:	0766  200C    		jr	nz,opdone2		; no
 451:	0768  CD2A0C  		call	inline
 452:	076B  65730D0A		defb	"es",cr,lf,lf,0
	      0A00
 453:	0771  C3BD01  		jp	asktraks
 454:			
 455:	0774          	opdone2:
 456:	0774  CD2A0C  		call	inline
 457:	0777  084E6F2E		defb	bs,"No. Bye.",cr,lf,lf,0
	      20427965
	      2E0D0A0A
	      00
 458:			
 459:	0784  210B00  		ld	hl,11
 460:	0787  110002  		ld	de,512
 461:	078A  CD0F0C  		call	dprmset
 462:			
 463:	078D  C30000  		jp	0
 464:			
 465:			;
 466:			; flush (write) current track in memory to disk.
 467:			;
 468:	0790          	writetrack:
 469:	0790  210100  		ld	hl,1			; init registers
 470:	0793  220A01  		ld	(wsec),hl		; sector 1
 471:	0796  217C0D  		ld	hl,prgend
 472:	0799  220F01  		ld	(wdma),hl		; dma address
 473:	079C  AF      		xor	a
 474:	079D  320E01  		ld	(wsid),a		; side 0
 475:			
 476:	07A0  3A1901  		ld	a,(ddrive)		; select destination drive
 477:	07A3  4F      		ld	c,a
 478:	07A4  CDE808  		call	mseldsk
 479:			
 480:	07A7  2A0C01  		ld	hl,(wtrk)		; if on trk0 perform fhome
 481:	07AA  7D      		ld	a,l
 482:	07AB  B4      		or	h
 483:	07AC  CCF308  		call	z,mhome
 484:	07AF          	writesec:
 485:	07AF  ED4B0F01		ld      bc,(wdma)		; base transfer address
 486:	07B3  CDB7FC  		call	bbdmaset
 487:	07B6  ED4B0C01		ld	bc,(wtrk)		; track
 488:	07BA  CDABFC  		call	bbtrkset
 489:	07BD  ED4B0A01		ld      bc,(wsec)        	; sector
 490:	07C1  CDB1FC  		call	bbsecset
 491:	07C4  ED4B0E01		ld      bc,(wsid)        	; side
 492:	07C8  0600    		ld	b,0
 493:	07CA  CD250A  		call	sidset
 494:			
 495:	07CD  3A1901  		ld	a,(ddrive)		; select destination drive
 496:	07D0  4F      		ld	c,a
 497:	07D1  CDE808  		call	mseldsk
 498:	07D4  CD0B09  		call	mwrite		; perform i/o
 499:	07D7  B7      		or	a		; test for errors
 500:	07D8  2803    		jr	z, writes2	; ok
 501:			
 502:	07DA  321101  	 	ld	(rwerr),a	; write error
 503:	07DD          	writes2:
 504:	07DD  CD3E08  		call	advmsgw
 505:	07E0  AF      		xor	a
 506:	07E1  321101  		ld	(rwerr),a
 507:	07E4          	writensec:
 508:	07E4  2A0F01  		ld	hl,(wdma)	; next sectro dma
 509:	07E7  DD4E03  		ld	c,(ix+3)	; sec len
 510:	07EA  DD4604  		ld	b,(ix+4)
 511:	07ED  09      		add	hl,bc		; move dma
 512:	07EE  220F01  		ld	(wdma),hl
 513:			
 514:	07F1  210A01  		ld	hl,wsec
 515:	07F4  34      		inc	(hl)		; to next sector on trk
 516:	07F5  2A0A01  		ld	hl,(wsec)
 517:	07F8  7D      		ld	a,l
 518:	07F9  DD5E02  		ld	e,(ix+2)
 519:			
 520:	07FC  1C      		inc	e		; overflow
 521:	07FD  BB      		cp	e		; eot ?
 522:	07FE  2802    		jr	z, writensid	; nxt trk/sid
 523:			
 524:	0800  18AD    		jr	writesec	; nxt sec
 525:	0802          	writensid:
 526:	0802  210E01  		ld	hl,wsid
 527:	0805  34      		inc	(hl)		; to next side
 528:	0806  3A0E01  		ld	a,(wsid)
 529:	0809  DD5E01  		ld	e,(ix+1)
 530:			
 531:	080C  BB      		cp	e		; eos ?
 532:	080D  C8      		ret	z		; write done
 533:			
 534:	080E  210100  		ld	hl,1
 535:	0811  220A01  		ld	(wsec),hl	; to begin of track, next side
 536:			
 537:	0814  1899    		jr	writesec
 538:			
 539:			;
 540:			; Fill bad sector with 11h
 541:			;
 542:	0816          	fill11:
 543:	0816  DD4E03  		ld	c,(ix+3)
 544:	0819  DD4604  		ld	b,(ix+4)
 545:	081C  1E11    		ld	e, $11
 546:	081E  2A0801  		ld	hl,(rdma)
 547:	0821          	fill111:
 548:	0821  73      		ld	(hl),e
 549:	0822  23      		inc	hl
 550:	0823  0B      		dec	bc
 551:	0824  78      		ld	a,b
 552:	0825  B1      		or	c
 553:	0826  20F9    		jr	nz,fill111
 554:	0828  C9      		ret
 555:			
 556:			;
 557:			; used to blank buffers
 558:			;
 559:	0829          	fillbf:
 560:	0829  71      		ld	(hl),c
 561:	082A  23      		inc	hl
 562:	082B  10FC    		djnz	fillbf
 563:	082D  C9      		ret
 564:			
 565:			
 566:			;
 567:			; update progress status
 568:			;
 569:	082E          	advmsgr:
 570:	082E  FD210301		ld	iy,rsec
 571:	0832  CD2A0C  		call	inline
 572:	0835  52656164		defb	"Read  ",0
	      202000
 573:	083C  180E    		jr	advmsg
 574:	083E          	advmsgw:
 575:	083E  FD210A01		ld	iy,wsec
 576:	0842  CD2A0C  		call	inline
 577:	0845  57726974		defb	"Write ",0
	      652000
 578:	084C          	advmsg:
 579:	084C  CDAAFD  		call	bbconst			; user break?
 580:	084F  B7      		or	a
 581:	0850  C43801  		call	nz,useract		; verify
 582:			
 583:	0853  FD4E00  		ld	c,(iy+0)		;
 584:	0856  FD4601  		ld	b,(iy+1)
 585:	0859  CD3D0C  		call	bin2a8			; convert # secs. to decimal
 586:	085C  218808  		ld	hl,advsec		;
 587:	085F  CD0E0D  		call	pldecs			;
 588:	0862  FD4E02  		ld	c,(iy+2)		;
 589:	0865  FD4603  		ld	b,(iy+3)
 590:	0868  CD3D0C  		call	bin2a8			; convert # tracks to decimal
 591:	086B  219208  		ld	hl,advtrk		;
 592:	086E  CD0E0D  		call	pldecs			;
 593:	0871  FD4E04  		ld	c,(iy+4)		;
 594:	0874  CD3D0C  		call	bin2a8			; convert # sides to decimal
 595:	0877  219B08  		ld	hl,advsid		;
 596:	087A  CD0E0D  		call	pldecs			;
 597:			
 598:	087D  CD2A0C  		call	inline
 599:	0880  73656374		defb	"sector: "
	      6F723A20
 600:	0888  2020    	advsec:	defb	"  "
 601:	088A  20747261		defb	" track: "
	      636B3A20
 602:	0892  2020    	advtrk:	defb	"  "
 603:	0894  20736964		defb	" side: "
	      653A20
 604:	089B  30      	advsid:	defb	"0"
 605:	089C  00      		defb	0
 606:			
 607:	089D  3A1101  		ld	a,(rwerr)		; in error?
 608:	08A0  B7      		or	a
 609:	08A1  2818    		jr	z,advok			; no
 610:			
 611:	08A3  CD2A0C  		call	inline
 612:	08A6  202D2045		defb	" - Error: ",0
	      72726F72
	      3A2000
 613:	08B1  CD280D  		call	zbits
 614:	08B4  CD1D0D  		call	zcrlf
 615:	08B7  CDCD08  		call	cleanmsg
 616:	08BA  C9      		ret
 617:	08BB          	advok:
 618:	08BB  CD2A0C  		call	inline
 619:	0000          	if DBGDMA
 622:			else
 623:	08BE  20202020		defb	"         ",cr,0
	      20202020
	      200D00
 624:			endif
 625:	08C9  CDCD08  		call	cleanmsg
 626:	08CC  C9      		ret
 627:			
 628:	08CD          	cleanmsg:
 629:	08CD  0E20    		ld	c,' '
 630:	08CF  0602    		ld	b,2
 631:	08D1  218808  		ld	hl,advsec
 632:	08D4  CD2908  		call	fillbf			;
 633:	08D7  0602    		ld	b,2
 634:	08D9  219208  		ld	hl,advtrk		;
 635:	08DC  CD2908  		call	fillbf			;
 636:	08DF  0601    		ld	b,1
 637:	08E1  219B08  		ld	hl,advsid		;
 638:	08E4  CD2908  		call	fillbf			;
 639:	08E7  C9      		ret
 640:			
 641:	0000          	if DBGDMA
 677:			endif
 678:			
 679:				;
 680:			; disk drive select
 681:			;
 682:	08E8          	mseldsk:
 683:	08E8  CDBDFC  		call	bbdsksel
 684:	08EB  79      		ld	a,c
 685:	08EC  FE03    		cp	'B'+1-'@'		; is real drive?
 686:	08EE  F0      		ret	p			; no
 687:	08EF  CDD5FC  		call	bbfdrvsel		; yes
 688:	08F2  C9      		ret
 689:			
 690:			;
 691:			; home floppy drive
 692:			;
 693:	08F3          	mhome:
 694:	08F3  79      		ld	a,c
 695:	08F4  FE03    		cp	'B'+1-'@'		; is real drive?
 696:	08F6  F0      		ret	p			; no
 697:	08F7  CD4C09  		call	fhome			; yes
 698:	08FA  C9      		ret
 699:			
 700:			;
 701:			; read sector
 702:			;
 703:	08FB          	mread:
 704:	08FB  3A1801  		ld	a,(odrive)
 705:	08FE  FE03    		cp	'B'+1-'@'		; is real drive?
 706:	0900  F20709  		jp	p,mreadv		; no
 707:	0903  CD9A09  		call	fread
 708:	0906  C9      		ret
 709:	0907          	mreadv:
 710:	0907  CD300B  		call	rdvdsk
 711:	090A  C9      		ret
 712:			
 713:			;
 714:			; write sector
 715:			;
 716:	090B          	mwrite:
 717:	090B  3A1901  		ld	a,(ddrive)
 718:	090E  FE03    		cp	'B'+1-'@'		; is real drive?
 719:	0910  F21709  		jp	p,mwritev		; no
 720:	0913  CDA109  		call	fwrite
 721:	0916  C9      		ret
 722:	0917          	mwritev:
 723:	0917  CD9F0B  		call	wrvdsk
 724:	091A  C9      		ret
 725:			
 726:			;
 727:			;=======================================================================
 728:			;
 729:			; Modular Z80 DarkStar (NE Z80) Monitor
 730:			;
 731:			;=======================================================================
 732:			;
 733:			; Floppy I/O
 734:			; ---------------------------------------------------------------------
 735:			; ---------------------------------------------------------------------
 736:			; Revisions:
 737:			; 20150714 - Changed to have timeouts on floppy operations that could
 738:			;            produce system locks. (I.e. in absence of floppy in drive)
 739:			; ---------------------------------------------------------------------
 740:			
 741:			
 742:	0003          	rtrycnt		equ	3		; # retry count for errors
 743:			
 744:			;;
 745:			;; FDC delay
 746:			;
 747:	091B          	fdcdly:
 748:	091B  E3      		ex	(sp),hl
 749:	091C  E3      		ex	(sp),hl
 750:	091D  E3      		ex	(sp),hl
 751:	091E  E3      		ex	(sp),hl
 752:	091F  E3      		ex	(sp),hl
 753:	0920  E3      		ex	(sp),hl
 754:	0921  E3      		ex	(sp),hl
 755:	0922  E3      		ex	(sp),hl
 756:	0923  C9      		ret
 757:			
 758:			;;
 759:			;; waitfd - get 1771 status and copy on buffer
 760:			;
 761:	0924          	waitfd:
 762:				; wait until fdd busy is reset
 763:	0924  CD1B09  		call	fdcdly			; wait aproax 56 micros
 764:	0927  0604    		ld	b,4			; set soft timer
 765:	0929          	fwait00:
 766:	0929  110000  		ld	de,0			; for ~ five seconds
 767:	092C          	fwait01:
 768:	092C  DBD0    		in	a,(fdccmdstatr)		; input to fdd status
 769:	092E  CB47    		bit	0,a			; test busy bit
 770:	0930  C8      		ret	z			; exit if no command is in progress
 771:			; 	jr	z,fwait02		; jump if no command is in progress
 772:	0931  1B      		dec	de			;
 773:	0932  7A      		ld	a,d			; timer down
 774:	0933  B3      		or	e			;
 775:	0934  20F6    		jr	nz,fwait01		;
 776:	0936  05      		dec	b			;
 777:	0937  20F0    		jr	nz,fwait00		; time out
 778:	0939          	ftimeout:
 779:	0939  3ED0    		ld	a,fdcreset		; reset fdd controller
 780:	093B  D3D0    		out	(fdccmdstatr),a		; exec. command
 781:	093D  AF      		xor	a
 782:	093E  D3D6    		out	(fdcdrvrcnt),a
 783:	0940  3C      		inc	a			; set time-out bit error
 784:	0941  B7      		or	a			; set NZ
 785:	0942  C9      		ret				; and ret
 786:			;
 787:			;;
 788:			;; set HL to right track buffer (a or b)
 789:			;
 790:	0943          	gtrkbuf:
 791:	0943  213F00  		ld	hl,fsekbuf
 792:	0946  3A4500  		ld	a,(fdrvbuf)
 793:	0949  85      		add	a,l
 794:	094A  6F      		ld	l,a
 795:	094B  C9      		ret
 796:			;;
 797:			;; FHOME - move head to trak 0 (cp/m home like)
 798:			;;
 799:	094C          	fhome:
 800:	094C  C5      		push	bc			; save register
 801:	094D  D5      		push	de
 802:	094E  3E07    		ld	a,fdcrestc		; fdd restore command
 803:	0950  D3D0    		out	(fdccmdstatr),a		; exec. command
 804:	0952  CD2409  		call	waitfd			; wait until end command
 805:	0955  4F      		ld	c,a			; save status
 806:			
 807:	0956  CD4309  		call	gtrkbuf			; proceed
 808:	0959  DBD1    		in	a,(fdctrakreg)
 809:	095B  77      		ld	(hl),a
 810:	095C  79      		ld	a,c			; restore status
 811:	095D  E619    		and	00011001b		; set Z flag
 812:	095F  B7      		or	a
 813:	0960  D1      		pop	de
 814:	0961  C1      		pop	bc			; restore register
 815:	0962  C9      		ret
 816:			
 817:			;;
 818:			;; FSEEK - seek to specific track/sector
 819:			;
 820:	0963          	fseek:
 821:	0963  C5      		push	bc
 822:	0964  D5      		push	de
 823:	0965  0603    		ld	b,rtrycnt		; retrys number
 824:	0967  CD4309  		call	gtrkbuf
 825:	096A  7E      		ld	a,(hl)
 826:	096B  D3D1    		out	(fdctrakreg),a
 827:	096D          	fretr1:
 828:	096D  3A4300  		ld	a,(fsecbuf)
 829:	0970  4F      		ld	c,a			; load sec #
 830:	0971  3A1201  		ld	a,(nedos)		; are we in nedos mode?
 831:	0974  B7      		or	a
 832:	0975  2001    		jr	nz,stdfsk		; no
 833:	0977  0D      		dec	c			; yes sec # in zero based
 834:			
 835:	0978  79      	stdfsk:	ld	a,c
 836:	0979  D3D2    		out	(fdcsectreg),a
 837:	097B  3A4600  		ld	a,(ftrkbuf)
 838:	097E  D3D7    		out	(fdcdatareg),a
 839:	0980  3E16    		ld	a,fdcseekc		; seek cmd
 840:	0982  D3D0    		out	(fdccmdstatr),a		; exec. command
 841:	0984  48      		ld	c,b			; save retry count
 842:	0985  CD2409  		call	waitfd
 843:	0988  41      		ld	b,c			; restore retry count
 844:	0989  E619    		and	00011001b
 845:	098B  2807    		jr	z,fskend		; ok
 846:			
 847:	098D  CD4C09  		call	fhome			; seek error
 848:	0990  2002    		jr	nz,fskend
 849:	0992  10D9    		djnz	fretr1			; retry
 850:	0994          	fskend:
 851:	0994  DBD1    		in	a,(fdctrakreg)
 852:	0996  77      		ld	(hl),a
 853:	0997  D1      		pop	de
 854:	0998  C1      		pop	bc
 855:	0999  C9      		ret
 856:			;;
 857:			;; FREAD - read a sector
 858:			;
 859:	099A          	fread:
 860:	099A  3A4C00  		ld	a,(miobyte)
 861:	099D  CBC7    		set	0,a
 862:	099F  1805    		jr	flopio
 863:			;;
 864:			;; FWRITE - write a sector
 865:			;
 866:	09A1          	fwrite:
 867:	09A1  3A4C00  		ld	a,(miobyte)
 868:	09A4  CB87    		res	0,a
 869:			;;
 870:			;; FLOPIO - read or write a sector depending on MIOBYTE
 871:			;
 872:	09A6          	flopio:
 873:	09A6  D5      		push	de
 874:	09A7  324C00  		ld	(miobyte),a
 875:	09AA  0603    		ld	b,rtrycnt		; # retries
 876:	09AC          	frwnxt:
 877:	09AC  CD6309  		call	fseek			; go to trk/sec
 878:	09AF  206D    		jr	nz,fioend
 879:			
 880:	09B1  F3      		di				; not interruptible
 881:	09B2  2A4100  		ld	hl,(frdpbuf)
 882:	09B5  DD5E03  		ld	e,(ix+3)		; need to know buffer size on r/w
 883:	09B8  DD5604  		ld	d,(ix+4)
 884:			
 885:	09BB  3A4C00  		ld	a,(miobyte)
 886:	09BE  CB47    		bit	0,a			; read or write?
 887:	09C0  2818    		jr	z,frwwro		; go to write
 888:			
 889:	09C2  3E88    		ld	a,fdcreadc		; read command
 890:	09C4  D3D0    		out	(fdccmdstatr),a		; exec. command
 891:	09C6  CD1B09  		call	fdcdly
 892:	09C9  1803    		jr	frrdy
 893:	09CB          	frbsy:
 894:	09CB  0F      		rrca				; busy bit to carry flag
 895:	09CC  3038    		jr	nc,fwend		; if busy 0 end read
 896:	09CE          	frrdy:
 897:	09CE  DBD0    		in	a,(fdccmdstatr)
 898:	09D0  CB4F    		bit	1,a			; data request active ?
 899:	09D2  28F7    		jr	z,frbsy			; no: check busy bit
 900:			
 901:	09D4  DBD7    		in	a,(fdcdatareg)		; get data
 902:	09D6  77      		ld	(hl),a
 903:	09D7  23      		inc	hl
 904:	09D8  18F4    		jr	frrdy
 905:	09DA          	frwwro:
 906:	09DA  3A1201  		ld	a,(nedos)		; are we in nedos mode?
 907:	09DD  B7      		or	a
 908:	09DE  200B    		jr	nz,stdfwr		; no
 909:	09E0  3A4600  		ld	a,(ftrkbuf)		; yes, n track 17?
 910:	09E3  FE11    		cp	17
 911:	09E5  2004    		jr	nz,stdfwr		; no
 912:	09E7  3EA9    		ld	a,$a9			; write cmd for FA DAM
 913:	09E9  1802    		jr	sndwrc
 914:	09EB  3EA8    	stdfwr:	ld	a,fdcwritc		; write command
 915:	09ED  D3D0    	sndwrc:	out	(fdccmdstatr),a		; exec. command
 916:	09EF  CD1B09  		call	fdcdly
 917:	09F2  1803    		jr	fwrdy
 918:	09F4          	frwbsy:
 919:	09F4  0F      		rrca				; busy bit to carry flag
 920:	09F5  300F    		jr	nc,fwend		; if busy 0 end read
 921:	09F7          	fwrdy:
 922:	09F7  DBD0    		in	a,(fdccmdstatr)
 923:	09F9  CB4F    		bit	1,a
 924:	09FB  28F7    		jr	z,frwbsy
 925:	09FD  7E      		ld	a,(hl)
 926:	09FE  D3D7    		out	(fdcdatareg),a
 927:	0A00  23      		inc	hl
 928:	0A01  1B      		dec	de		; 6 c.
 929:	0A02  7A      		ld	a,d		; 4 c.
 930:	0A03  B3      		or	e		; 4 c.
 931:	0A04  20F1    		jr	nz,fwrdy	; 7/12 c.
 932:	0A06          	fwend:
 933:	0A06  FB      		ei				; end of critical operations
 934:	0A07  48      		ld	c,b			; save retry count
 935:	0A08  CD2409  		call	waitfd
 936:	0A0B  41      		ld	b,c			; restore retry count
 937:	0A0C  E65C    		and	01011100b		; mask wrt-prtc,rnf,crc,lst-dat error
 938:	0A0E  280E    		jr	z,fioend		; ok
 939:			
 940:	0A10  3A4B00  		ld	a,(tmpbyte)		; nok
 941:	0A13  CB77    		bit	6,a			; seek to home in error?
 942:	0A15  2005    		jr	nz,fiotry		; no
 943:			
 944:	0A17  CD4C09  		call	fhome			; yes, do seek
 945:	0A1A  2002    		jr	nz,fioend		; seek error eeek!!
 946:	0A1C          	fiotry:
 947:	0A1C  108E    		djnz	frwnxt			; retry if in count
 948:	0A1E          	fioend:
 949:	0A1E  F5      		push	af
 950:	0A1F  AF      		xor	a
 951:	0A20  D3D6    		out	(fdcdrvrcnt),a		; shut down
 952:			
 953:	0A22  F1      		pop	af
 954:	0A23  D1      		pop	de
 955:	0A24  C9      		ret
 956:			
 957:			;;
 958:			;; SIDSET - set current side bit on DSELBF
 959:			;;          selected side on C
 960:			;;
 961:	0A25          	sidset:
 962:	0A25  214E00  		ld	hl,dselbf		; loads drive interf. buffer
 963:	0A28  79      		ld	a,c			; which side ?
 964:	0A29  FE00    		cp	0			;
 965:	0A2B  2003    		jr	nz,sidone		; side 1
 966:	0A2D  CBAE    		res	5,(hl)			; side 0
 967:	0A2F  C9      		ret				;
 968:	0A30          	sidone:
 969:	0A30  CBEE    		set	5,(hl)			;
 970:	0A32  C9      		ret
 971:			
 972:			
 973:			;
 974:			;=======================================================================
 975:			;
 976:			; Modular Z80 DarkStar (NE Z80) Monitor
 977:			;
 978:			;=======================================================================
 979:			;
 980:			; Parallel communication
 981:			; ---------------------------------------------------------------------
 982:			
 983:	0A33          	vdskbuf:
 984:	0A33 .. 0A3C 00		defs	vdbufsz			; i/o command buffer
 985:	0A3D .. 0A3E 00	szbuf:	defs	2
 986:	0A3F  00      	cksum:	defb	0
 987:	0A40  40494F40	s_vhdr:	defb	"@IO@"
 988:			
 989:			;;
 990:			;; get a byte from remote
 991:			;;
 992:			;; use:
 993:			;;	none
 994:			;; return:
 995:			;;	A  - received byte
 996:			
 997:	0A44          	uplchr:
 998:	0A44  DB02    		in	a, (ppcntrp)		; wait for remote ready to tx
 999:	0A46  CB4F    		bit	ppakstb, a
1000:	0A48  C0      		ret	nz
1001:	0A49  CB47    		bit	ppstrob, a
1002:	0A4B  20F7    		jr	nz, uplchr
1003:			
1004:	0A4D  C5      		push	bc
1005:	0A4E  3E05    		ld	a, ppurdy		; signal ready to receive
1006:	0A50  D302    		out	(ppcntrp), a
1007:	0A52          	upwstrb:
1008:	0A52  DB02    		in	a, (ppcntrp)		; wait for data
1009:	0A54  CB47    		bit	ppstrob, a
1010:	0A56  28FA    		jr	z, upwstrb
1011:			
1012:	0A58  DB03    		in	a,(ppdatap)
1013:	0A5A  4F      		ld	c, a			; copy on C (return value)
1014:			
1015:	0A5B  3E03    		ld	a, ppuokg		; let's remote run...
1016:	0A5D  D302    		out	(ppcntrp), a
1017:	0A5F  0620    		ld	b,$20			; <---- tunable
1018:	0A61  00      	upwdly:	nop
1019:	0A62  10FD    		djnz	upwdly
1020:	0A64  DB02    		in	a, (ppcntrp)		; in remote answer
1021:	0A66  CB4F    		bit	ppakstb, a		; check for stop requests
1022:	0A68  79      		ld	a,c
1023:	0A69  C1      		pop	bc
1024:	0A6A  C9      		ret
1025:			
1026:			
1027:			;
1028:			;; PRCVBLK - upload a block through parallel link
1029:			;;
1030:			;; use:
1031:			;;	DE - offset of storage area
1032:			;;	BC - block size
1033:			;; unclean register usage: A, HL, IY
1034:			;; return:
1035:			;; C: Rx status 0 = ok >0 = error
1036:	0A6B          	prcvblk:
1037:	0A6B  F5      		push	af
1038:	0A6C  EB      		ex	de,hl			; offset in HL
1039:	0A6D  3E01    		ld	a, ppuini		; init parallel port for rx
1040:	0A6F  D302    		out	(ppcntrp),a
1041:	0A71  113F0A  		ld	de,cksum
1042:	0A74  AF      		xor	a			; used to calc checksum
1043:	0A75  12      		ld	(de),a
1044:	0A76  CD440A  		call	uplchr			; get two bytes of block size
1045:	0A79  323D0A  		ld	(szbuf),a
1046:	0A7C  CD440A  		call	uplchr
1047:	0A7F  323E0A  		ld	(szbuf+1),a
1048:	0A82  FD2A3D0A		ld	iy,(szbuf)		; IY count from remote size
1049:	0A86  CD440A  	prbloo:	call	uplchr			; begin real transfer
1050:	0A89  2022    		jr	nz, prnak		; stopped here: error!
1051:	0A8B  77      		ld	(hl),a			; store data
1052:	0A8C  1A      		ld	a,(de)			; update csum
1053:	0A8D  86      		add	a,(hl)
1054:	0A8E  12      		ld	(de),a
1055:	0A8F  23      		inc	hl
1056:	0A90  FD2B    		dec	iy
1057:	0A92  0B      		dec	bc			; check for upload end
1058:	0A93  78      		ld	a,b
1059:	0A94  B1      		or	c
1060:	0A95  20EF    		jr	nz,prbloo		; next
1061:	0A97  FD223D0A		ld	(szbuf),iy		; receive buffer full
1062:	0A9B  ED4B3D0A		ld	bc,(szbuf)
1063:	0A9F  78      		ld	a,b			; received size match?
1064:	0AA0  B1      		or	c
1065:	0AA1  200A    		jr	nz, prnak		; no
1066:	0AA3  CD440A  		call	uplchr			; flush sender waiting checksum byte
1067:	0AA6  47      		ld	b,a
1068:	0AA7  1A      		ld	a,(de)			; block end: calc. final csum
1069:	0AA8  2F      		cpl
1070:	0AA9  3C      		inc	a
1071:	0AAA  B8      		cp	b			; match ?
1072:	0AAB  2806    		jr	z, prbend		; yes: exit
1073:	0AAD  3E07    	prnak:	ld	a,ppuack		; send negative aknowledge
1074:	0AAF  D302    		out	(ppcntrp),a
1075:	0AB1  0E01    		ld	c, 1			; rx error
1076:	0AB3  110500  	prbend:	ld	de, 5			; 50 msec wait
1077:	0AB6  CD85FD  		call	delay
1078:	0AB9  3E01    		ld	a, ppuini		; clean handshake
1079:	0ABB  D302    		out	(ppcntrp), a
1080:	0ABD  F1      		pop	af
1081:	0ABE  C9      		ret
1082:			
1083:			;--------------------
1084:			;; Routines to manage data send (download) over parallel port
1085:			;;
1086:			;; PSNDCH - send a byte over parallel
1087:			;;
1088:			;; use:
1089:			;; HL - point to byte to transfer (updated after exec)
1090:			;; unclean register usage: A, DE
1091:	0ABF          	psndch:
1092:	0ABF  DB02    		in	a, (ppcntrp)		; wait synchro strobe from remote
1093:	0AC1  CB47    		bit	ppstrob, a
1094:	0AC3  20FA    		jr	nz, psndch
1095:			
1096:	0AC5  7E      		ld	a, (hl)
1097:	0AC6  D303    		out	(ppdatap), a		; out data and then emit ready signal
1098:	0AC8  23      		inc	hl
1099:	0AC9  3E04    		ld	a, ppdrdy
1100:	0ACB  D302    		out	(ppcntrp), a
1101:								;; remote should reset strobe when PPDRDY is get...
1102:	0ACD          	pwackb:
1103:	0ACD  DB02    		in	a, (ppcntrp)		; wait ack from remote
1104:	0ACF  CB4F    		bit	ppakstb, a
1105:	0AD1  28FA    		jr	z, pwackb
1106:			
1107:	0AD3  3E02    		ld	a, ppdokg		; reset ready bit and let remote run waiting 1 msec.
1108:	0AD5  D302    		out	(ppcntrp), a
1109:								;; remote should reset ack when PPDOKG is get...
1110:	0AD7  C5      		push	bc
1111:	0AD8  0620    		ld	b,$20			; <---- tunable
1112:	0ADA  00      	pswdly:	nop
1113:	0ADB  10FD    		djnz	pswdly
1114:	0ADD  C1      		pop	bc
1115:	0ADE  C9      		ret
1116:			
1117:			;;
1118:			;; PSNDBLK - send a block over parallel link
1119:			;;
1120:			;; use:
1121:			;; DE - point to the base of block to transfer
1122:			;; BC - block size
1123:			;; unclean register usage: A, HL
1124:			;; return:
1125:			;; C: Tx status 0 = ok >0 = error
1126:			;;
1127:	0ADF          	psndblk:
1128:	0ADF  F5      		push	af
1129:	0AE0  EB      		ex	de,hl			; offset in HL
1130:	0AE1  113F0A  		ld	de,cksum
1131:	0AE4  AF      		xor	a			; will carry the checksum
1132:	0AE5  12      		ld	(de),a
1133:	0AE6  ED433D0A		ld	(szbuf), bc		; store block size to send it
1134:	0AEA  3E00    		ld	a, ppdini		; setup port for tx
1135:	0AEC  D302    		out	(ppcntrp), a
1136:	0AEE  E5      		push	hl			; save DMA in HL
1137:	0AEF  213D0A  		ld	hl, szbuf
1138:	0AF2  CDBF0A  		call	psndch			; send len. lsb
1139:	0AF5  CDBF0A  		call	psndch			; send len. msb
1140:	0AF8  E1      		pop	hl			; restore HL
1141:	0AF9          	psnxtc:
1142:	0AF9  1A      		ld	a,(de)
1143:	0AFA  86      		add	a,(hl)			; block bytes summing
1144:	0AFB  12      		ld	(de),a
1145:	0AFC  CDBF0A  		call	psndch			; send byte
1146:	0AFF  0B      		dec	bc			; check for transfer end
1147:	0B00  78      		ld	a, b
1148:	0B01  B1      		or	c
1149:	0B02  20F5    		jr	nz, psnxtc
1150:	0B04  1A      		ld	a,(de)			; block end: calc. final csum
1151:	0B05  2F      		cpl
1152:	0B06  3C      		inc	a
1153:	0B07  213D0A  		ld	hl, szbuf		; store in first byte of SZBUF
1154:	0B0A  77      		ld	(hl),a
1155:	0B0B  CDBF0A  		call	psndch			; send csum
1156:	0B0E  112200  		ld	de, 34			; 34 more msec. to get okgo
1157:	0B11  CD85FD  		call	delay
1158:	0B14  3E06    		ld	a, ppdstp
1159:	0B16  D302    		out	(ppcntrp), a
1160:	0B18  112300  		ld	de, 35			; 35 msec. to stop remote
1161:	0B1B  CD85FD  		call	delay
1162:	0B1E  3E01    		ld	a, ppuini
1163:	0B20  D302    		out	(ppcntrp), a		; leave parallel clean
1164:	0B22  0E00    		ld	c, 0			; ret ok (maybe)
1165:	0B24  DB02    		in	a, (ppcntrp)		; in result code
1166:	0B26  E6FC    		and	$fc			; mask
1167:	0B28  FE02    		cp	$02			; init and strobe set ?
1168:	0B2A  2002    		jr	nz, psbok
1169:	0B2C  0E01    		ld	c, 1			; ret nok on reg. C
1170:	0B2E          	psbok:
1171:	0B2E  F1      		pop	af
1172:	0B2F  C9      		ret
1173:			
1174:			;----------------------------------------------------------
1175:			; PC-LINKED VIRTUAL DISK HANDLE ROUTINES
1176:			; ---------------------------------------------------------
1177:			;;
1178:			;; VDSKRD - read a sector form remote
1179:			;;
1180:			;; use:
1181:			;;	none
1182:			;; unclean register usage: A, IY
1183:			
1184:	0B30          	rdvdsk:
1185:	0B30  FDE5    		push	iy
1186:	0B32  D5      		push	de
1187:	0B33  C5      		push	bc
1188:	0B34  E5      		push	hl
1189:	0B35  1602    		ld	d, 2			; retries
1190:	0B37  FD21330A	vdrtry:	ld	iy, vdskbuf
1191:	0B3B  21400A  		ld	hl, s_vhdr
1192:	0B3E  0604    		ld	b, 4
1193:	0B40  4E      	vdrsl1: ld	c, (hl)
1194:	0B41  FD7100  		ld	(iy + 0), c
1195:	0B44  FD23    		inc	iy
1196:	0B46  23      		inc	hl
1197:	0B47  10F7    		djnz	vdrsl1
1198:			
1199:	0B49  0E00    		ld	c, vdrdsec		; read command
1200:	0B4B  FD7100  		ld	(iy + 0), c
1201:	0B4E  214500  		ld	hl, fdrvbuf
1202:	0B51  4E      		ld	c, (hl)			; drive
1203:	0B52  FD7101  		ld	(iy + 1), c
1204:	0B55  ED4B4300		ld	bc, (fsecbuf)		; sector
1205:	0B59  0B      		dec	bc			; base sector # is zero...
1206:	0B5A  FD7102  		ld	(iy + 2), c
1207:	0B5D  FD7003  		ld	(iy + 3), b
1208:	0B60  ED4B4600		ld	bc, (ftrkbuf)		; track
1209:	0B64  FD7104  		ld	(iy + 4), c
1210:	0B67  FD7005  		ld	(iy + 5), b
1211:			
1212:	0B6A  D5      		push	de
1213:	0B6B  11330A  		ld	de, vdskbuf		; command offset
1214:	0B6E  010A00  		ld	bc, vdbufsz		; block size
1215:	0B71  CDDF0A  		call	psndblk			; send command block
1216:	0B74  D1      		pop	de
1217:	0B75  79      		ld	a, c
1218:	0B76  B7      		or	a			; what happens ?
1219:	0B77  2807    		jr	z, vdrok		; tx ok
1220:	0B79  15      		dec	d			; retry ?
1221:	0B7A  20BB    		jr	nz, vdrtry
1222:	0B7C  3E01    		ld	a, 1			; ret tx err
1223:	0B7E  1819    		jr	vdrnok
1224:								; receive sector now
1225:	0B80  D5      	vdrok:	push	de
1226:	0B81  ED5B4100		ld	de, (frdpbuf)		; set dma address
1227:	0B85  ED4B190C		ld	bc,(csptr+2)
1228:	0B89  CD6B0A  		call	prcvblk			; download sector
1229:	0B8C  D1      		pop	de
1230:	0B8D  79      		ld	a, c
1231:	0B8E  B7      		or	a			; what happens ?
1232:	0B8F  2807    		jr	z, vdrend		; rx ok
1233:	0B91  15      		dec	d			; retry ?
1234:	0B92  20A3    		jr	nz, vdrtry
1235:	0B94  3E01    		ld	a, 1			; ret rx err
1236:	0B96  1801    		jr	vdrnok
1237:	0B98  AF      	vdrend:	xor	a
1238:	0B99  E1      	vdrnok:	pop 	hl
1239:	0B9A  C1      		pop	bc
1240:	0B9B  D1      		pop	de
1241:	0B9C  FDE1    		pop	iy
1242:	0B9E  C9      		ret
1243:			
1244:			;;
1245:			;; VDSKWR - write a sector to remote
1246:			;;
1247:			;; use:
1248:			;;	none
1249:			;; unclean register usage: A
1250:			
1251:	0B9F          	wrvdsk:
1252:	0B9F  FDE5    		push	iy
1253:	0BA1  D5      		push	de
1254:	0BA2  C5      		push	bc
1255:	0BA3  E5      		push	hl
1256:	0BA4  1602    		ld	d, 2			; retries
1257:	0BA6  FD21330A	vdwtry:	ld	iy, vdskbuf
1258:	0BAA  21400A  		ld	hl, s_vhdr
1259:	0BAD  0604    		ld	b, 4
1260:	0BAF  4E      	vdwsl1: ld	c, (hl)
1261:	0BB0  FD7100  		ld	(iy + 0), c
1262:	0BB3  FD23    		inc	iy
1263:	0BB5  23      		inc	hl
1264:	0BB6  10F7    		djnz	vdwsl1
1265:			
1266:	0BB8  0E01    		ld	c, vdwrsec		; read command
1267:	0BBA  FD7100  		ld	(iy + 0), c
1268:	0BBD  214500  		ld	hl, fdrvbuf
1269:	0BC0  4E      		ld	c, (hl)			; drive
1270:	0BC1  FD7101  		ld	(iy + 1), c
1271:	0BC4  ED4B4300		ld	bc, (fsecbuf)		; sector
1272:	0BC8  0B      		dec	bc			; base sector # is zero...
1273:	0BC9  FD7102  		ld	(iy + 2), c
1274:	0BCC  FD7003  		ld	(iy + 3), b
1275:	0BCF  ED4B4600		ld	bc, (ftrkbuf)		; track
1276:	0BD3  FD7104  		ld	(iy + 4), c
1277:	0BD6  FD7005  		ld	(iy + 5), b
1278:			
1279:	0BD9  D5      		push	de
1280:	0BDA  11330A  		ld	de, vdskbuf		; command offset
1281:	0BDD  010A00  		ld	bc, vdbufsz		; block size
1282:	0BE0  CDDF0A  		call	psndblk			; send command block
1283:	0BE3  D1      		pop	de
1284:	0BE4  79      		ld	a, c
1285:	0BE5  B7      		or	a			; what happens ?
1286:	0BE6  2807    		jr	z, vdwok		; tx ok
1287:	0BE8  15      		dec	d			; retry ?
1288:	0BE9  20BB    		jr	nz, vdwtry
1289:	0BEB  3E01    		ld	a, 1			; ret tx err
1290:	0BED  181A    		jr	vdwnok
1291:								; receive sector now
1292:	0BEF  D5      	vdwok:		push	de
1293:	0BF0  ED5B4100		ld	de, (frdpbuf)		; set dma address
1294:	0BF4  ED4B190C		ld	bc, (csptr+2)		; vdisk sector length
1295:	0BF8  CDDF0A  		call	psndblk			; upload sector
1296:	0BFB  D1      		pop	de
1297:	0BFC  79      		ld	a, c
1298:	0BFD  B7      		or	a			; what happens ?
1299:	0BFE  2807    		jr	z, vdwend		; tx ok
1300:	0C00  15      		dec	d			; retry ?
1301:	0C01  20A3    		jr	nz, vdwtry
1302:	0C03  3E01    		ld	a, 1			; ret tx err
1303:	0C05  1802    		jr	vdwnok
1304:	0C07  3E00    	vdwend:	ld	a, 0
1305:	0C09  E1      	vdwnok:	pop 	hl
1306:	0C0A  C1      		pop	bc
1307:	0C0B  D1      		pop	de
1308:	0C0C  FDE1    		pop	iy
1309:	0C0E  C9      		ret
1310:			
1311:			
1312:	0C0F          	dprmset:
1313:	0C0F  22170C  		ld	(csptr),hl
1314:	0C12  ED53190C		ld	(cslen),de
1315:	0C16  C9      		ret
1316:			
1317:	0C17  0000    	csptr:	defw	0
1318:	0C19  0000    	cslen:	defw	0
1319:			
1320:			
1321:			
1322:			
1323:			;----------------------------------------------------------------
1324:			; Print the string -> by DE. Return with DE pointing past the
1325:			; string end so as to point to the start of the next string.
1326:			;----------------------------------------------------------------
1327:			;
1328:	0C1B          	print:
1329:	0C1B  1A      		ld	a,(de)
1330:	0C1C  13      		inc	de
1331:	0C1D  B7      		or	a
1332:	0C1E  C8      		ret	z
1333:	0C1F  FE24    		cp	'$'			; END ?
1334:	0C21  C8      		ret	z
1335:	0C22  FE00    		cp	0			; END ?
1336:	0C24  C8      		ret	z
1337:	0C25  CD360C  		call	coe
1338:	0C28  18F1    		jr	print
1339:			
1340:			;;
1341:			;; Inline print
1342:			;;
1343:	0C2A          	inline:
1344:	0C2A  E3      		ex	(sp),hl			; get address of string (ret address)
1345:	0C2B  F5      		push	af
1346:	0C2C  D5      		push	de
1347:	0C2D  EB      		ex	de,hl
1348:	0C2E          	inline2:
1349:	0C2E  CD1B0C  		call	print
1350:	0C31          	inline3:
1351:	0C31  EB      		ex	de,hl
1352:	0C32  D1      		pop	de
1353:	0C33  F1      		pop	af
1354:	0C34  E3      		ex	(sp),hl			; load return address after the '$'
1355:	0C35  C9      		ret				; back to code immediately after string
1356:			
1357:			
1358:			; output A to console
1359:	0C36          	coe:
1360:	0C36  C5      		push	bc
1361:	0C37  4F      		ld	c,a
1362:	0C38  CD9FFD  		call	bbconout
1363:	0C3B  C1      		pop	bc
1364:	0C3C  C9      		ret
1365:			
1366:			;;
1367:			;; routines for binary to decimal conversion
1368:			;;
1369:			;; (c) piergiorgio betti <pbetti@lpconsul.net> - 2006
1370:			;;
1371:			;; the active part is taken from:
1372:			;; david barrow - assembler routines for the z80
1373:			;; century communications ltd - isbn 0 7126 0506 1
1374:			;;
1375:			
1376:			
1377:			;;
1378:			;; bin2a8 - convert an 8 bit value to ascii
1379:			;;
1380:			;; input	c = value to be converted
1381:			;; output	de = converted string address
1382:			;
1383:	0C3D  E5      	bin2a8: push	hl
1384:	0C3E  F5      		push	af
1385:	0C3F  0600    		ld	b,0
1386:	0C41  ED438A0C		ld	(ival16),bc
1387:	0C45  218A0C  		ld	hl,ival16
1388:	0C48  118E0C  		ld	de,oval16
1389:	0C4B  3E01    		ld	a,1			; one byte conversion
1390:	0C4D  CD9C0C  		call	lngibd
1391:	0C50  118E0C  		ld	de,oval16
1392:	0C53  F1      		pop	af
1393:	0C54  E1      		pop	hl
1394:	0C55  C9      		ret
1395:				;
1396:			;;
1397:			;; bn2a16 - convert a 16 bit value to ascii
1398:			;;
1399:			;; input	bc = value to be converted
1400:			;; output	de = converted string address
1401:			;
1402:	0C56  E5      	bn2a16: push	hl
1403:	0C57  F5      		push	af
1404:	0C58  ED438A0C		ld	(ival16),bc
1405:	0C5C  218A0C  		ld	hl,ival16
1406:	0C5F  118E0C  		ld	de,oval16
1407:	0C62  3E02    		ld	a,2			; two byte conversion
1408:	0C64  CD9C0C  		call	lngibd
1409:	0C67  118E0C  		ld	de,oval16
1410:	0C6A  F1      		pop	af
1411:	0C6B  E1      		pop	hl
1412:	0C6C  C9      		ret
1413:				;
1414:			;;
1415:			;; bn2a32 - convert a 16 bit value to ascii
1416:			;;
1417:			;; input	bc  = value to be converted LSB
1418:			;;		bc' = value to be converted MSB
1419:			;; output	de  = converted string address
1420:			;
1421:	0C6D  E5      	bn2a32: push	hl
1422:	0C6E  F5      		push	af
1423:	0C6F  ED438A0C		ld	(ival16),bc
1424:	0C73  D9      		exx
1425:	0C74  ED438C0C		ld	(ival16+2),bc
1426:	0C78  D9      		exx
1427:	0C79  218A0C  		ld	hl,ival16
1428:	0C7C  118E0C  		ld	de,oval16
1429:	0C7F  3E04    		ld	a,4			; four byte conversion
1430:	0C81  CD9C0C  		call	lngibd
1431:	0C84  118E0C  		ld	de,oval16
1432:	0C87  F1      		pop	af
1433:	0C88  E1      		pop	hl
1434:	0C89  C9      		ret
1435:				;
1436:			;; generic storage
1437:			
1438:	0C8A .. 0C8D 00	ival16:	defs	4
1439:	0C8E .. 0C99 00	oval16:	defs	12
1440:			
1441:			;;
1442:			;;
1443:			;; lngibd - convert long integer of given precision to ascii
1444:			;;
1445:			;; input	hl addresses the first byte of the binary value
1446:			;;		which must be stored with the low order byte in
1447:			;;		lowest memory.
1448:			;;		de addresses the first byte of the destination
1449:			;;		area which must be larger enough to accept the
1450:			;;		decimal result (2.42 * binary lenght + 1).
1451:			;;		a = binary byte lenght (1 to 255)
1452:			
1453:			;;
1454:	000A          	cvbase	equ	10		; conversion base
1455:	0C9A          	vptr	equ	hilo		; storage area equ
1456:			
1457:			
1458:	0C9A .. 0C9B 00	hilo:	defs	2		; storage area
1459:			
1460:	0C9C  4F      	lngibd:	ld	c,a
1461:	0C9D  0600    		ld	b,0
1462:	0C9F  2B      		dec	hl
1463:	0CA0  229A0C  		ld	(vptr),hl
1464:	0CA3  3EFF    		ld	a,-1
1465:	0CA5  12      		ld	(de),a
1466:	0CA6  09      		add	hl,bc
1467:				;
1468:	0CA7  7E      	nxtmsb:	ld	a,(hl)
1469:	0CA8  B7      		or	a
1470:	0CA9  C2B80C  		jp	nz,msbfnd
1471:	0CAC  2B      		dec	hl
1472:	0CAD  0D      		dec	c
1473:	0CAE  C2A70C  		jp	nz,nxtmsb
1474:				;
1475:	0CB1  EB      		ex	de,hl
1476:	0CB2  3630    		ld	(hl),'0'
1477:	0CB4  23      		inc	hl
1478:	0CB5  3600    		ld	(hl),0
1479:	0CB7  C9      		ret
1480:				;
1481:	0CB8  47      	msbfnd:	ld	b,a
1482:	0CB9  3E80    		ld	a,$80
1483:				;
1484:	0CBB  B8      	nxtmsk:	cp	b
1485:	0CBC  DAC60C  		jp	c,mskfnd
1486:	0CBF  CAC60C  		jp	z,mskfnd
1487:	0CC2  0F      		rrca
1488:	0CC3  C3BB0C  		jp	nxtmsk
1489:				;
1490:	0CC6  47      	mskfnd:	ld	b,a
1491:	0CC7  C5      		push	bc
1492:	0CC8  2A9A0C  		ld	hl,(vptr)
1493:	0CCB  0600    		ld	b,0
1494:	0CCD  09      		add	hl,bc
1495:	0CCE  A6      		and	(hl)
1496:	0CCF  C6FF    		add	a,$ff
1497:	0CD1  6B      		ld	l,e
1498:	0CD2  62      		ld	h,d
1499:				;
1500:	0CD3  7E      	nxtopv:	ld	a,(hl)
1501:	0CD4  3C      		inc	a
1502:	0CD5  CAE70C  		jp	z,opvdon
1503:	0CD8  3D      		dec	a
1504:	0CD9  8F      		adc	a,a
1505:				;
1506:	0CDA  FE0A    		cp	cvbase
1507:	0CDC  DAE10C  		jp	c,nocoul
1508:	0CDF  D60A    		sub	cvbase
1509:	0CE1  3F      	nocoul:	ccf
1510:				;
1511:	0CE2  77      		ld	(hl),a
1512:	0CE3  23      		inc	hl
1513:	0CE4  C3D30C  		jp	nxtopv
1514:				;
1515:	0CE7  D2EF0C  	opvdon:	jp	nc,extdon
1516:	0CEA  3601    		ld	(hl),1
1517:	0CEC  23      		inc	hl
1518:	0CED  36FF    		ld	(hl),-1
1519:				;
1520:	0CEF  C1      	extdon:	pop	bc
1521:	0CF0  78      		ld	a,b
1522:	0CF1  0F      		rrca
1523:	0CF2  D2C60C  		jp	nc,mskfnd
1524:	0CF5  0D      		dec	c
1525:	0CF6  C2C60C  		jp	nz,mskfnd
1526:				;
1527:				; reverse digit order. add ascii digits hi-nibbles
1528:	0CF9  3600    		ld	(hl),0
1529:				;
1530:	0CFB  2B      	nxtcnv:	dec	hl
1531:	0CFC  7D      		ld	a,l
1532:	0CFD  93      		sub	e
1533:	0CFE  7C      		ld	a,h
1534:	0CFF  9A      		sbc	a,d
1535:	0D00  D8      		ret	c
1536:				;
1537:	0D01  1A      		ld	a,(de)
1538:	0D02  F630    		or	$30
1539:	0D04  47      		ld	b,a
1540:	0D05  7E      		ld	a,(hl)
1541:	0D06  F630    		or	$30
1542:	0D08  70      		ld	(hl),b
1543:	0D09  12      		ld	(de),a
1544:				;
1545:	0D0A  13      		inc	de
1546:	0D0B  C3FB0C  		jp	nxtcnv
1547:			
1548:				;
1549:				; this copy a decimal converted string in area
1550:				; pointed by hl
1551:	0D0E          	pldecs:
1552:	0D0E  EB      		ex	de,hl			; load hl on de
1553:	0D0F  218E0C  		ld	hl,oval16		; result of conversion
1554:	0D12  7E      	pldnxt:	ld	a,(hl)			; pick char pointed by hl
1555:	0D13  B7      		or	a			; is the terminating nul ?
1556:	0D14  C8      		ret	z			; yes
1557:	0D15  12      		ld	(de),a			; digit copy
1558:	0D16  3600    		ld	(hl),0			; leave digit clean
1559:	0D18  23      		inc	hl			; next locations
1560:	0D19  13      		inc	de			;
1561:	0D1A  C3120D  		jp	pldnxt			;
1562:			
1563:				; new line sequence
1564:	0D1D          	zcrlf:
1565:	0D1D  0E0D    		ld	c,cr			;
1566:	0D1F  CD9FFD  		call	bbconout		; send cr
1567:	0D22  0E0A    		ld	c,lf			;
1568:	0D24  CD9FFD  		call	bbconout		; send lf
1569:	0D27  C9      		ret
1570:			
1571:				;display bit pattern in [a]
1572:				;
1573:	0D28  F5      	zbits:	push	af
1574:	0D29  C5      		push	bc
1575:	0D2A  D5      		push	de
1576:	0D2B  5F      		ld	e,a
1577:	0D2C  0608    		ld	b,8
1578:	0D2E  CB23    	bq2:	sla	e
1579:	0D30  3E18    		ld	a,18h
1580:	0D32  8F      		adc	a,a
1581:	0D33  4F      		ld	c,a
1582:	0D34  CD9FFD  		call	bbconout
1583:	0D37  10F5    		djnz	bq2
1584:	0D39  D1      		pop	de
1585:	0D3A  C1      		pop	bc
1586:	0D3B  F1      		pop	af
1587:	0D3C  C9      		ret
1588:			
1589:				; get user input
1590:	0D3D          	gchr:
1591:	0D3D  CD94FD  		call	bbconin			; take from console
1592:	0D40  E67F    		and	$7f			;
1593:	0D42  FE60    		cp	$60			;
1594:	0D44  FA4E0D  		jp	m,gcdsp			; verify alpha
1595:	0D47  FE7B    		cp	$7b			;
1596:	0D49  F24E0D  		jp	p,gcdsp			;
1597:	0D4C  CBAF    		res	5,a			; convert to uppercase
1598:	0D4E  C5      	gcdsp:	push	bc			;
1599:	0D4F  4F      		ld	c,a			;
1600:	0D50  CD9FFD  		call	bbconout		;
1601:	0D53  79      		ld	a,c			;
1602:	0D54  C1      		pop	bc			;
1603:	0D55  C9      		ret				;
1604:			
1605:			;==================================================
1606:			; multiply routine 32*32bit=32bit
1607:			; h'l'hl = b'c'bc * d'e'de
1608:			; needs register a, changes flags
1609:			;
1610:	0D56          	mul32:
1611:	0D56  A7      	        and     a               ; reset carry flag
1612:	0D57  ED62    	        sbc     hl,hl           ; lower result = 0
1613:	0D59  D9      	        exx
1614:	0D5A  ED62    	        sbc     hl,hl           ; higher result = 0
1615:	0D5C  78      	        ld      a,b             ; mpr is ac'bc
1616:	0D5D  0620    	        ld      b,32            ; initialize loop counter
1617:	0D5F          	mul32loop:
1618:	0D5F  CB2F    	        sra     a               ; right shift mpr
1619:	0D61  CB19    	        rr      c
1620:	0D63  D9      	        exx
1621:	0D64  CB18    	        rr      b
1622:	0D66  CB19    	        rr      c               ; lowest bit into carry
1623:	0D68  3005    	        jr      nc,mul32noadd
1624:	0D6A  19      	        add     hl,de           ; result += mpd
1625:	0D6B  D9      	        exx
1626:	0D6C  ED5A    	        adc     hl,de
1627:	0D6E  D9      	        exx
1628:	0D6F          	mul32noadd:
1629:	0D6F  CB23    	        sla     e               ; left shift mpd
1630:	0D71  CB12    	        rl      d
1631:	0D73  D9      	        exx
1632:	0D74  CB13    	        rl      e
1633:	0D76  CB12    	        rl      d
1634:	0D78  10E5    	        djnz    mul32loop
1635:	0D7A  D9      	        exx
1636:			
1637:			; result in h'l'hl
1638:	0D7B  C9      	        ret
1639:			
1640:			
1641:			;-----------------------------------------------
1642:			
1643:	0D7C          	prgend	equ	$
1644:			
1645:	0D7C          		end



Statistics:

     5	passes
     0	jr promotions
   510	symbols
     0	bytes



Symbol Table:

adsize           12c     eep29c         =   4+    r3lcr          =   3+    
advmsg           84c     eep29ee        =   1+    r4mcr          =   4+    
advmsgr          82e     eep29xe        =   2+    r5lsr          =   5+    
advmsgw          83e     eepage0        =  c0+    r6msr          =   6+    
advok            8bb     eeproglock     =  10+    r7spr          =   7+    
advsec           888     eepsta         =f000+    ram0buf        =  3b+    
advsid           89b     eepunsupp      =   8+    ram1buf        =  3c+    
advtrk           892     eerineprom     =  80+    ram2buf        =  3d+    
altprnprt      =   3+    endvid         = 7cf+    ram3buf        =  3e+    
appbuf         =  2d+    esc            =  1b+    ramtbl         =e000+    
askconf          421     extdon           cef     rdma             108     
askdrives        570     false          =   0+    rdvdsk           b30     
asksec1          34f     fdcbase        =  d0+    readcfg8255    =  92+    
asksec2          37f     fdccmdstatr    =  d0+    readnsec         6d1+    
asksec3          3f9     fdcdatareg     =  d7+    readnsid         6ef     
asksects         2cf     fdcdly           91b     readntrk         704     
asksid1          287     fdcdrvrcnt     =  d6+    reads2           6ca     
asksid2          2af     fdcreadc       =  88+    readsec          699     
asksides         23a     fdcreset       =  d0+    recover          17a     
asktraks         1bd     fdcrestc       =   7+    recover2         678     
asktrk1          1f6     fdcsectreg     =  d2+    recover3         67b+    
asktrk2          21c     fdcseekc       =  16+    regastatus     =  16+    
atsize           120     fdctrakreg     =  d1+    regcommand     =   f+    
bbappp         =   e+    fdcwritc       =  a8+    regcontrol     =  16+    
bbbase         =f000+    fdrvbuf        =  45+    regcyllsb      =   c+    
bbcalret       =fd5a+    ff             =   c+    regcylmsb      =   d+    
bbcbank        =   c+    fhome            94c     regdata        =   8+    
bbcomn         =fc00+    fifblok        =   b+    regerr         =   9+    
bbconin        =fd94+    fifoend        =  25+    regseccnt      =   a+    
bbconout       =fd9f+    fifokb         =  1a+    regsector      =   b+    
bbconst        =fdaa+    fifosto        =   f+    regshd         =   e+    
bbcpboot       =fcc3+    fifou0         =   f+    regstatus      =   f+    
bbcrtcini      =fc03+    fifsize        =   8+    rldrom         =fe84+    
bbcrtfill      =fc09+    fill11           816     rsec             103     
bbcstck        =   d+    fill111          821     rsid             107     
bbcurset       =fc21+    fillbf           829     rsrvbuf        =  2f+    
bbdebug        =   0+    fin            =fdc4+    rst7sp1        =  38+    
bbdiv16        =fcdb+    fioend           a1e     rst7sp2        =  39+    
bbdmaset       =fcb7+    fiotry           a1c     rst7sp3        =  3a+    
bbdprmset      =fd17+    fixblock       =   0+    rtbsiz         = 3c0+    
bbdriveid      =fcf3+    flopio           9a6     rtrk             105     
bbdsksel       =fcbd+    fout           =fde1+    rtrycnt        =   3+    
bbeidck        =fd23+    frbsy            9cb     rwerr            111     
bbepmngr       =fd1d+    frdpbuf        =  41+    s_vhdr           a40     
bbexec         =fd29+    fread            99a     samedrv          63d     
bbfdrvsel      =fcd5+    fretr1           96d     sconin         =fc2d+    
bbfhome        =fc81+    frrdy            9ce     sconout        =fc27+    
bbflopio       =fc93+    frwbsy           9f4     sconst         =fc33+    
bbfread        =fc87+    frwnxt           9ac     sidone           a30     
bbfwrite       =fc8d+    frwwro           9da     sidset           a25     
bbhdboot       =fd0b+    fsecbuf        =  43+    sintvec        =fff0+    
bbhdgeo        =fd05+    fseek            963     sndwrc           9ed     
bbhdinit       =fced+    fsekbuf        =  3f+    srxrsm         =fe6c+    
bbhdrd         =fcff+    fskend           994     srxstp         =fe68+    
bbhdwr         =fcf9+    fstat          =fdb5+    stdfsk           978     
bbimgp         =  c0+    ftimeout         939+    stdfwr           9eb     
bbinictc       =fc57+    ftrkbuf        =  46+    syscmlo        =febf+    
bbjtobnk       =fc00+    fwait00          929     syscom         =fc00+    
bbldpart       =fd11+    fwait01          92c     syshertz       =  13+    
bbmul16        =fce1+    fwend            a06     sytimr         =fe19+    
bboffcal       =fce7+    fwrdy            9f7     szbuf            a3d     
bbpag          =   f+    fwrite           9a1     tblblk         =  30+    
bbprcvblk      =fc6f+    gcdsp            d4e     tdesclen       =  14+    
bbprnchr       =fc99+    gchr             d3d     tiaddrlen      =   4+    
bbpsndblk      =fc63+    gtrkbuf          943     timrcon        =  27+    
bbrdtime       =fca5+    hilo             c9a     tmpbyte        =  4b+    
bbrdvdsk       =fc75+    hmempag        =   b+    tnamelen       =   8+    
bbresctc       =fc5d+    idea0line      =   1+    tpa            = 100+    
bbsecset       =fcb1+    idea1line      =   2+    tpagelen       =   2+    
bbsidset       =fccf+    idea2line      =   4+    trnpag         =   d+    
bbstack        =febf+    idecs0line     =   8+    true           =ffff+    
bbstbase       =fe9b+    idecs1line     =  10+    tsize            11a     
bbsttim        =fc9f+    ideporta       =  e0+    tsizelen       =   4+    
bbtrkset       =fcab+    ideportb       =  e1+    tx0            =fe76+    
bbu0ini        =fc39+    ideportc       =  e2+    tx01           =fe78+    
bbu1ini        =fc51+    ideportctrl    =  e3+    u0defspeed     =   6+    
bbu1rx         =fc45+    iderdline      =  40+    u0isr          =fe25+    
bbu1st         =fc4b+    iderstline     =  80+    u1defspeed     =   c+    
bbu1tx         =fc3f+    idewrline      =  20+    u1isr          =fe5b+    
bbuplchr       =fc69+    imtpag         =  ff+    u1nul          =fe64+    
bbvcpmbt       =fcc9+    imtsiz         = 400+    uart0          =  c0+    
bbvoid         =fd6a+    inline           c2a     uart0base      =  c0+    
bbwrvdsk       =fc7b+    inline2          c2e+    uart0br        =  2b+    
begin            100+    inline3          c31+    uart1          =  c8+    
bel            =   7+    intrdi         =fe0f+    uart115k2      =   1+    
bin2a8           c3d     intren         =fdfe+    uart1200       =  60+    
bldoffs        =3000+    iobyte         =   3+    uart19k2       =   6+    
blifastblok    =  60+    ival16           c8a     uart1base      =  c8+    
blifastline    =  6a+    kbdbyte        =  4d+    uart1br        =  2a+    
blislowblok    =  40+    keybstrbbit    =   7+    uart2400       =  30+    
blislowline    =  4a+    lf             =   a+    uart38k4       =   3+    
bn2a16           c56     lngibd           c9c     uart4800       =  18+    
bn2a32           c6d     maxblk         =  14+    uart57k6       =   2+    
bq2              d2e     menaprt        =  21+    uart9600       =   c+    
bs             =   8+    mhome            8f3     uastav         =fe8f+    
btpasiz        =   6+    miobyte        =  4c+    uastkb         =fe91+    
cdisk          =   4+    mmgetp         =fd78+    ufifo1         =   7+    
cksum            a3f     mmpmap         =fd6b+    ufifo14        =  c7+    
cleanmsg         8cd     mmtpapag       =  ef+    ufifo4         =  47+    
clkio          =   6+    mmuport        =  20+    ufifo8         =  87+    
clkrst         =   7+    mmutstaddr     =d000+    uisre          =fe50+    
clksclk        =   5+    mmutstpage     =   d+    uisri          =fe35+    
cmdid          =  ec+    monmaj         =  33+    unconf           563     
cmdinit        =  91+    monmin         =  36+    uplchr           a44     
cmdread        =  20+    mread            8fb     upwdly           a61     
cmdrecal       =  10+    mreadv           907     upwstrb          a52     
cmdspindown    =  e0+    msbfnd           cb8     useract          138     
cmdspinup      =  e1+    mscnt          =  f6+    usrexit          13b     
cmdwrite       =  30+    mseldsk          8e8     vconin         =fc15+    
cnfbyte        =  26+    mskfnd           cc6     vconout        =fc0f+    
coe              c36     mul32            d56     vconst         =fc1b+    
colbuf         =  4f+    mul32loop        d5f     vdbufsz        =   a+    
copsys         =  2c+    mul32noadd       d6f     vdrdsec        =   0+    
cr             =   d+    mwrite           90b     vdrend           b98     
crdureg        =fc27+    mwritev          917     vdrnok           b99     
crt6545adst    =  8c+    mzmac          =   1+    vdrok            b80     
crt6545data    =  8d+    nedos            112     vdrsl1           b40     
crtbase        =  80+    nocoul           ce1     vdrtry           b37     
crtbeepport    =  8f+    nodos            3ed     vdskbuf          a33     
crtblinkbit    =   0+    nxtcnv           cfb     vdwend           c07     
crthilitbit    =   3+    nxtmsb           ca7     vdwnok           c09     
crtkeybcnt     =  87+    nxtmsk           cbb     vdwok            bef     
crtkeybdat     =  85+    nxtopv           cd3     vdwrsec        =   1+    
crtmodebit     =   4+    odrive           118     vdwsl1           baf     
crtprntcnt     =  83+    opdone           735     vdwtry           ba6     
crtprntdat     =  81+    opdone2          774     version        =   a+    
crtram0cnt     =  82+    opvdon           ce7     voidisr        =fe22+    
crtram0dat     =  80+    oval16           c8e     vptr           = c9a+    
crtram1cnt     =  86+    pdsecs           47b     vr0.hrtot      =   0+    
crtram1dat     =  84+    pdsids           492     vr1.hrdis      =   1+    
crtram2cnt     =  8a+    pdsize           470     vr10.crstart   =   a+    
crtram2dat     =  88+    pdtrks           487     vr11.crend     =   b+    
crtram3port    =  8e+    pio2bit2       =   2+    vr12.dstarth   =   c+    
crtrevrsbit    =   1+    pio2bit3       =   3+    vr13.dstartl   =   d+    
crtservcnt     =  8b+    pio2bit4       =   4+    vr14.curposh   =   e+    
crtservdat     =  89+    pldecs           d0e     vr15.curposl   =   f+    
crtunderbit    =   2+    pldnxt           d12     vr16.lpenh     =  10+    
crtwidthbit    =   1+    ppakstb        =   1+    vr17.lpenl     =  11+    
cslen            c19     ppcntrp        =   2+    vr18.updaddrh  =  12+    
csptr            c17     ppdatap        =   3+    vr19.updaddrl  =  13+    
ctc0tc         =  29+    ppdini         =   0+    vr2.hrsyncpos  =   2+    
ctc0tchi       =  20+    ppdokg         =   2+    vr3.hrvrsyncw  =   3+    
ctc1tc         =  28+    ppdrdy         =   4+    vr31.dummy     =  1f+    
ctc1tc100hz    =   5+    ppdstp         =   6+    vr4.vrchrow    =   4+    
ctc1tc10hz     =  30+    ppstrob        =   0+    vr5.vradj      =   5+    
ctc1tc25hz     =  13+    ppuack         =   7+    vr6.vrdisrows  =   6+    
ctc1tc2hz      =  f4+    ppuini         =   1+    vr7.vrsyncpos  =   7+    
ctc1tc50hz     =   a+    ppuokg         =   3+    vr8.crtmode    =   8+    
ctcbase        =  e8+    ppurdy         =   5+    vr9.scanlines  =   9+    
ctcchan0       =  e8+    prbend           ab3     vstabuf        =  36+    
ctcchan1       =  e9+    prbloo           a86     waitfd           924     
ctcchan2       =  ea+    prcvblk          a6b     wdma             10f     
ctcchan3       =  eb+    prgend         = d7c+    writecfg8255   =  80+    
ctlc           =   3+    print            c1b     writensec        7e4+    
curpbuf        =  48+    prnak            aad     writensid        802     
cursoroff      =  20+    prntbusybit    =   0+    writes2          7dd     
cursoron       =   a+    prvtop         =  4f+    writesec         7af     
cursshp        =  4a+    psbok            b2e     writetrack       790     
cvbase         =   a+    psndblk          adf     wrongdrv         61a     
dbgdma         =   0+    psndch           abf     wrvdsk           b9f     
ddrive           119     psnxtc           af9     wsec             10a     
delay          =fd85+    pswdly           ada     wsid             10e     
dgeotab          113     pwackb           acd     wtrk             10c     
dly1           =fd89+    r0brdl         =   0+    xofc           =  13+    
dly2           =fd87+    r0rxtx         =   0+    xonc           =  11+    
dostx          =fe6e+    r1brdm         =   1+    zbits            d28     
dprmset          c0f     r1ier          =   1+    zcrlf            d1d     
dselbf         =  4e+    r2fcr          =   2+    
dsize            11c     r2iir          =   2+    
